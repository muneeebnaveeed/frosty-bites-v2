[{"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\index.js":"1","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\App.js":"2","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\index.js":"3","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\reducers.js":"4","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\index.js":"5","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\auth\\reducer.js":"6","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\types\\reducer.js":"7","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\suppliers\\reducer.js":"8","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\units\\reducer.js":"9","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\salaries\\reducer.js":"10","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\products\\reducer.js":"11","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\employees\\reducer.js":"12","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\inventories\\reducer.js":"13","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\customers\\reducer.js":"14","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\expenses\\reducer.js":"15","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\enums.js":"16","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\Login.js":"17","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\Registration.js":"18","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\expenses\\AddNewExpense.js":"19","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\Error404.js":"20","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\index.js":"21","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\index.js":"22","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\users\\index.js":"23","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\modals\\index.js":"24","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\modals\\index.js":"25","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\index.js":"26","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\dashboard\\index.js":"27","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\index.js":"28","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\add-sale\\index.js":"29","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\expenses\\index.js":"30","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\auth\\actionTypes.js":"31","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\units\\actionTypes.js":"32","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\types\\actionTypes.js":"33","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\suppliers\\actionTypes.js":"34","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\employees\\actionTypes.js":"35","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\salaries\\actionTypes.js":"36","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\inventories\\actionTypes.js":"37","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\products\\actionTypes.js":"38","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\customers\\actionTypes.js":"39","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\expenses\\actionTypes.js":"40","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\auth\\actions.js":"41","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\Footer.js":"42","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\product-grid.js":"43","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\ClearSale.js":"44","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\employees-grid.js":"45","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\add-sale\\add-sale.js":"46","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\actions.js":"47","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\SpinnerOverlay.js":"48","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\CreatableSelect.js":"49","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\ModalWrapper.js":"50","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\Select.js":"51","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\index.js":"52","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\sale-grid.js":"53","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\RefundSale.js":"54","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\MangeSales.js":"55","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\nav\\index.js":"56","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\Button.js":"57","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\modals\\manage-employee\\index.js":"58","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\Pagination.js":"59","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\modals\\manage-product\\index.js":"60","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\salaries\\index.js":"61","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\PageTitle.js":"62","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\expenseTypes\\index.js":"63","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\getSortingIcon.js":"64","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\add-sale\\receipt.js":"65","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\validations.js":"66","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\add-sale\\sale-info.js":"67","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\inventories\\actions.js":"68","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\expenses\\actions.js":"69","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\salaries\\actions.js":"70","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\customers\\actions.js":"71","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\suppliers\\actions.js":"72","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\employees\\actions.js":"73","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\products\\actions.js":"74","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\types\\actions.js":"75","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\units\\actions.js":"76","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\add-sale\\cart-grid.js":"77","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\queries.js":"78","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\queries.js":"79","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\queries.js":"80","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\purchase\\ManagePurchase.js":"81","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\useQuery.js":"82","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\server.js":"83","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\useAlert.js":"84","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\queries.js":"85","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\nav\\SideBar.js":"86","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\nav\\NavHader.js":"87","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\ChatBox.js":"88","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\nav\\Header.js":"89","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\modals\\manage-employee\\manage-employee.modal.js":"90","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\modals\\manage-product\\manage-product.modal.js":"91","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\misc.js":"92","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\DeleteButton.js":"93","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\EditButton.js":"94","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\GenericTableHeadingSorter.js":"95","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\utils.js":"96","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\TableSearch.js":"97","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\FormField.js":"98","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\validations.js":"99","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\modals\\manage-product\\manage-product-form.js":"100","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\validations.js":"101","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\modals\\manage-employee\\manage-employee-form.js":"102","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\FormikField.js":"103","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\modals\\manage-product\\select-tags.js":"104","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\utils.js":"105","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\purchase\\RefundPurchase.js":"106","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\purchase\\ClearPurchase.js":"107","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\getQuantity.js":"108"},{"size":281,"mtime":1671381363034,"results":"109","hashOfConfig":"110"},{"size":931,"mtime":1671381362022,"results":"111","hashOfConfig":"110"},{"size":383,"mtime":1671381363202,"results":"112","hashOfConfig":"110"},{"size":687,"mtime":1671381363205,"results":"113","hashOfConfig":"110"},{"size":2932,"mtime":1671381363046,"results":"114","hashOfConfig":"110"},{"size":527,"mtime":1671381363197,"results":"115","hashOfConfig":"110"},{"size":531,"mtime":1671381363209,"results":"116","hashOfConfig":"110"},{"size":547,"mtime":1671381363208,"results":"117","hashOfConfig":"110"},{"size":531,"mtime":1671381363210,"results":"118","hashOfConfig":"110"},{"size":543,"mtime":1671381363206,"results":"119","hashOfConfig":"110"},{"size":539,"mtime":1671381363205,"results":"120","hashOfConfig":"110"},{"size":549,"mtime":1671381363200,"results":"121","hashOfConfig":"110"},{"size":555,"mtime":1671381363204,"results":"122","hashOfConfig":"110"},{"size":547,"mtime":1671381363199,"results":"123","hashOfConfig":"110"},{"size":543,"mtime":1671381363202,"results":"124","hashOfConfig":"110"},{"size":92,"mtime":1671381363043,"results":"125","hashOfConfig":"110"},{"size":7049,"mtime":1671381363055,"results":"126","hashOfConfig":"110"},{"size":5890,"mtime":1671381363055,"results":"127","hashOfConfig":"110"},{"size":3410,"mtime":1671381363067,"results":"128","hashOfConfig":"110"},{"size":825,"mtime":1671381363053,"results":"129","hashOfConfig":"110"},{"size":1918,"mtime":1671381363049,"results":"130","hashOfConfig":"110"},{"size":43,"mtime":1671381363071,"results":"131","hashOfConfig":"110"},{"size":10748,"mtime":1671381363093,"results":"132","hashOfConfig":"110"},{"size":69,"mtime":1671381363061,"results":"133","hashOfConfig":"110"},{"size":67,"mtime":1671381363072,"results":"134","hashOfConfig":"110"},{"size":45,"mtime":1671381363061,"results":"135","hashOfConfig":"110"},{"size":7249,"mtime":1671381363059,"results":"136","hashOfConfig":"110"},{"size":2736,"mtime":1671381363086,"results":"137","hashOfConfig":"110"},{"size":39,"mtime":1671381363084,"results":"138","hashOfConfig":"110"},{"size":9724,"mtime":1671381363068,"results":"139","hashOfConfig":"110"},{"size":64,"mtime":1671381363197,"results":"140","hashOfConfig":"110"},{"size":110,"mtime":1671381363210,"results":"141","hashOfConfig":"110"},{"size":110,"mtime":1671381363208,"results":"142","hashOfConfig":"110"},{"size":126,"mtime":1671381363207,"results":"143","hashOfConfig":"110"},{"size":128,"mtime":1671381363199,"results":"144","hashOfConfig":"110"},{"size":122,"mtime":1671381363206,"results":"145","hashOfConfig":"110"},{"size":134,"mtime":1671381363203,"results":"146","hashOfConfig":"110"},{"size":118,"mtime":1671381363204,"results":"147","hashOfConfig":"110"},{"size":126,"mtime":1671381363198,"results":"148","hashOfConfig":"110"},{"size":122,"mtime":1671381363201,"results":"149","hashOfConfig":"110"},{"size":322,"mtime":1671381363197,"results":"150","hashOfConfig":"110"},{"size":520,"mtime":1671381363048,"results":"151","hashOfConfig":"110"},{"size":8378,"mtime":1671381363074,"results":"152","hashOfConfig":"110"},{"size":2358,"mtime":1671381363081,"results":"153","hashOfConfig":"110"},{"size":8154,"mtime":1671381363060,"results":"154","hashOfConfig":"110"},{"size":3785,"mtime":1671981436171,"results":"155","hashOfConfig":"110"},{"size":366,"mtime":1671381363196,"results":"156","hashOfConfig":"110"},{"size":481,"mtime":1671381363041,"results":"157","hashOfConfig":"110"},{"size":1117,"mtime":1671381363037,"results":"158","hashOfConfig":"110"},{"size":1953,"mtime":1671381363040,"results":"159","hashOfConfig":"110"},{"size":1716,"mtime":1671381363041,"results":"160","hashOfConfig":"110"},{"size":85,"mtime":1671381363043,"results":"161","hashOfConfig":"110"},{"size":9569,"mtime":1671381363087,"results":"162","hashOfConfig":"110"},{"size":3498,"mtime":1671381363082,"results":"163","hashOfConfig":"110"},{"size":11760,"mtime":1671381363082,"results":"164","hashOfConfig":"110"},{"size":827,"mtime":1671381363051,"results":"165","hashOfConfig":"110"},{"size":908,"mtime":1671381363036,"results":"166","hashOfConfig":"110"},{"size":52,"mtime":1671381363062,"results":"167","hashOfConfig":"110"},{"size":3967,"mtime":1671381363041,"results":"168","hashOfConfig":"110"},{"size":51,"mtime":1671381363072,"results":"169","hashOfConfig":"110"},{"size":7463,"mtime":1671381363080,"results":"170","hashOfConfig":"110"},{"size":484,"mtime":1671381363049,"results":"171","hashOfConfig":"110"},{"size":8974,"mtime":1671381363066,"results":"172","hashOfConfig":"110"},{"size":902,"mtime":1671381363043,"results":"173","hashOfConfig":"110"},{"size":6146,"mtime":1671980560408,"results":"174","hashOfConfig":"110"},{"size":998,"mtime":1671381363087,"results":"175","hashOfConfig":"110"},{"size":3226,"mtime":1671381363085,"results":"176","hashOfConfig":"110"},{"size":301,"mtime":1671381363203,"results":"177","hashOfConfig":"110"},{"size":283,"mtime":1671381363201,"results":"178","hashOfConfig":"110"},{"size":283,"mtime":1671381363206,"results":"179","hashOfConfig":"110"},{"size":289,"mtime":1671381363198,"results":"180","hashOfConfig":"110"},{"size":289,"mtime":1671381363207,"results":"181","hashOfConfig":"110"},{"size":291,"mtime":1671381363200,"results":"182","hashOfConfig":"110"},{"size":279,"mtime":1671381363204,"results":"183","hashOfConfig":"110"},{"size":265,"mtime":1671381363209,"results":"184","hashOfConfig":"110"},{"size":265,"mtime":1671381363210,"results":"185","hashOfConfig":"110"},{"size":8516,"mtime":1671381363084,"results":"186","hashOfConfig":"110"},{"size":141,"mtime":1671381363093,"results":"187","hashOfConfig":"110"},{"size":160,"mtime":1671381363064,"results":"188","hashOfConfig":"110"},{"size":158,"mtime":1671381363075,"results":"189","hashOfConfig":"110"},{"size":12609,"mtime":1671381363078,"results":"190","hashOfConfig":"110"},{"size":417,"mtime":1671381363045,"results":"191","hashOfConfig":"110"},{"size":1961,"mtime":1671381363044,"results":"192","hashOfConfig":"110"},{"size":2652,"mtime":1671381363045,"results":"193","hashOfConfig":"110"},{"size":312,"mtime":1671381363086,"results":"194","hashOfConfig":"110"},{"size":4979,"mtime":1671381363051,"results":"195","hashOfConfig":"110"},{"size":1123,"mtime":1671381363050,"results":"196","hashOfConfig":"110"},{"size":1730,"mtime":1671381363047,"results":"197","hashOfConfig":"110"},{"size":4181,"mtime":1671381363050,"results":"198","hashOfConfig":"110"},{"size":3440,"mtime":1671381363063,"results":"199","hashOfConfig":"110"},{"size":3468,"mtime":1671381363073,"results":"200","hashOfConfig":"110"},{"size":1184,"mtime":1671381363044,"results":"201","hashOfConfig":"110"},{"size":389,"mtime":1671381363038,"results":"202","hashOfConfig":"110"},{"size":396,"mtime":1671381363038,"results":"203","hashOfConfig":"110"},{"size":777,"mtime":1671381363039,"results":"204","hashOfConfig":"110"},{"size":102,"mtime":1671381363087,"results":"205","hashOfConfig":"110"},{"size":452,"mtime":1671381363042,"results":"206","hashOfConfig":"110"},{"size":1583,"mtime":1671381363039,"results":"207","hashOfConfig":"110"},{"size":505,"mtime":1671381363076,"results":"208","hashOfConfig":"110"},{"size":1755,"mtime":1671381363073,"results":"209","hashOfConfig":"110"},{"size":463,"mtime":1671381363065,"results":"210","hashOfConfig":"110"},{"size":512,"mtime":1671381363063,"results":"211","hashOfConfig":"110"},{"size":597,"mtime":1671381363039,"results":"212","hashOfConfig":"110"},{"size":3210,"mtime":1671381363074,"results":"213","hashOfConfig":"110"},{"size":86,"mtime":1671381363075,"results":"214","hashOfConfig":"110"},{"size":7186,"mtime":1671381363079,"results":"215","hashOfConfig":"110"},{"size":2394,"mtime":1671381363077,"results":"216","hashOfConfig":"110"},{"size":251,"mtime":1671381363043,"results":"217","hashOfConfig":"110"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},"184mzwl",{"filePath":"221","messages":"222","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":9,"source":"223","usedDeprecatedRules":"220"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"220"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"220"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"220"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"220"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"220"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"220"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"220"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"220"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"220"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"220"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"220"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"220"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"220"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"220"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"220"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"220"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"220"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"220"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"220"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"220"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"220"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"220"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"220"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"220"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"220"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"220"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"220"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"220"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"220"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"220"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"220"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"220"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"220"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"220"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"220"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"220"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"220"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"220"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"220"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"220"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"220"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"220"},"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\index.js",[],["478","479","480","481","482"],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\App.js",["483","484","485","486","487","488","489","490","491"],"import React from 'react';\r\nimport { withResizeDetector } from 'react-resize-detector';\r\nimport { QueryClient, QueryClientProvider } from 'react-query';\r\n\r\n/// Components\r\nimport Markup from './jsx';\r\n\r\n/// Style\r\nimport './vendor/bootstrap-select/dist/css/bootstrap-select.min.css';\r\nimport './css/tailwind.build.css';\r\nimport './css/style.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nconst App = ({ width }) => {\r\n    const body = document.querySelector('body');\r\n\r\n    if (width >= 1300) body.setAttribute('data-sidebar-style', 'full');\r\n    else if (width <= 1299 && width >= 767) body.setAttribute('data-sidebar-style', 'mini');\r\n    else body.setAttribute('data-sidebar-style', 'overlay');\r\n\r\n    return (\r\n        <QueryClientProvider client={queryClient}>\r\n            <Markup />\r\n        </QueryClientProvider>\r\n    );\r\n};\r\n\r\nexport default withResizeDetector(App);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\index.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\reducers.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\index.js",["492","493","494","495","496"],"import React, { lazy, Suspense, useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\n/// React router dom\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport './chart.css';\r\nimport { userRoles } from './helpers/enums';\r\n/// Css\r\nimport './index.css';\r\nimport Layout from './layouts';\r\n\r\nimport { ManageProductModal } from './pages/products/modals';\r\nimport { ManageEmployeeModal } from './pages/employees/modals';\r\nimport AddNewExpense from './pages/expenses/AddNewExpense';\r\n/// Pages\r\n// import Registration from './pages/Registration';\r\n// import Login from './pages/Login';\r\n\r\nconst Registration = lazy(() => import('./pages/Registration'));\r\nconst Login = lazy(() => import('./pages/Login'));\r\n\r\nconst Users = lazy(() => import('./pages/users'));\r\nconst Products = lazy(() => import('./pages/products'));\r\nconst Employees = lazy(() => import('./pages/employees'));\r\nconst Dashboard = lazy(() => import('./pages/dashboard'));\r\nconst Error404 = lazy(() => import('./pages/Error404'));\r\nconst Expenses = lazy(() => import('./pages/expenses'));\r\n\r\nconst Sale = lazy(() => import('./pages/sale'));\r\nconst AddSale = lazy(() => import('./pages/sale/add-sale'));\r\n\r\nconst protectedRoutes = [];\r\n\r\nconst DefaultPage = () => <Redirect to=\"/page-login\" />;\r\n\r\nconst routes = [\r\n   /// Deshborad\r\n   { url: '', component: DefaultPage },\r\n   { url: 'page-register', component: Registration, isPublic: true },\r\n   { url: 'page-login', component: Login, isPublic: true },\r\n   { url: 'users', component: Users },\r\n   { url: 'products', component: Products },\r\n   { url: 'sale', component: Sale },\r\n   { url: 'sale/add', component: AddSale },\r\n   { url: 'dashboard', component: Dashboard },\r\n];\r\n\r\nconst Markup = (props) => {\r\n   const isCashier = props.user?.role === userRoles.CASHIER;\r\n\r\n   return (\r\n      <Suspense fallback={<p>Loading</p>}>\r\n         <ToastContainer />\r\n         <ManageProductModal />\r\n         <ManageEmployeeModal />\r\n         {/* <AddNewType />\r\n         <AddNewUnit />\r\n         <AddNewSupplier />\r\n         <AddNewCustomer />\r\n         <AddNewSalary /> */}\r\n         {/* <AddNewEmployee /> */}\r\n         {/* <AddNewInventory /> */}\r\n         <AddNewExpense />\r\n\r\n         <Router>\r\n            <Switch>\r\n               {[...routes, ...protectedRoutes].map((data, i) => (\r\n                  <Route key={i} exact path={`/${data.url}`}>\r\n                     <Layout isPublic={data.isPublic}>\r\n                        <data.component />\r\n                     </Layout>\r\n                  </Route>\r\n               ))}\r\n               <Route component={Error404} />\r\n            </Switch>\r\n         </Router>\r\n      </Suspense>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Markup);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\auth\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\types\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\suppliers\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\units\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\salaries\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\products\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\employees\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\inventories\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\customers\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\expenses\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\enums.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\Login.js",["497","498","499","500"],"import { api, get, post, useAlert } from 'jsx/helpers';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { connect } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setLogin } from '../../store/auth/actions';\r\n\r\nconst Login = (props) => {\r\n   const history = useHistory();\r\n   const [loginData, setLoginData] = useState({});\r\n   const [isLoading, setIsLoading] = useState(false);\r\n\r\n   const alert = useAlert();\r\n\r\n   const handleBlur = (e) => {\r\n      const newLoginData = { ...loginData };\r\n      newLoginData[e.target.name] = e.target.value;\r\n      setLoginData(newLoginData);\r\n   };\r\n\r\n   useEffect(() => {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem('auth_token');\r\n      if (token) {\r\n         get(`auth/decode/${token}`)\r\n            .then((decode) => {\r\n               props.setLogin({ ...decode, auth_token: token });\r\n               localStorage.setItem('auth_token', token);\r\n               setIsLoading(false);\r\n               if (decode?.isConfirmed) {\r\n                  // if (decode?.role === userRoles.CASHIER) {\r\n                  //    history.push('/purchase');\r\n                  // } else if (decode?.role === userRoles.ADMINISTRATOR) {\r\n                  //    history.push('/dashboard');\r\n                  // } else {\r\n                  //    alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n                  // }\r\n                  history.push('/sale');\r\n               } else {\r\n                  localStorage.clear();\r\n                  props.setLogin({});\r\n                  alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n               }\r\n            })\r\n            .catch((err) => setIsLoading(false));\r\n      } else setIsLoading(false);\r\n   }, []);\r\n\r\n   const handleLogin = async (e) => {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n         const res = await api.post('/auth/login', loginData);\r\n         setIsLoading(false);\r\n         const decode = await get(`auth/decode/${res.data}`);\r\n         props.setLogin({ ...decode, auth_token: res.data });\r\n         localStorage.setItem('auth_token', res.data);\r\n         if (decode?.isConfirmed) {\r\n            // if (decode?.role === userRoles.CASHIER) {\r\n            //    history.push('/purchase');\r\n            // } else if (decode?.role === userRoles.ADMINISTRATOR) {\r\n            //    history.push('/dashboard');\r\n            // } else {\r\n            //    alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n            // }\r\n            window.location.reload();\r\n            // history.push('/purchase');\r\n         } else {\r\n            localStorage.clear();\r\n            props.setLogin({});\r\n            alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n         }\r\n      } catch (err) {\r\n         setIsLoading(false);\r\n         alert.setErrorAlert({ message: 'Unable to login', err });\r\n      }\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <When condition={isLoading}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <div className=\"authincation\">\r\n            <div className=\"container p-0\">\r\n               <div className=\"row justify-content-center align-items-center tw-h-screen\">\r\n                  <div className=\"col-lg-6 col-md-9\">\r\n                     <div className=\"authincation-content\">\r\n                        <div className=\"row no-gutters\">\r\n                           <div className=\"col-xl-12\">\r\n                              <div className=\"auth-form\">\r\n                                 {alert.getAlert()}\r\n                                 <h4 className=\"text-center mb-4\">Sign in your account</h4>\r\n                                 <form action=\"\" onSubmit={handleLogin}>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"login-name\">\r\n                                          <strong>Name</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"login-name\"\r\n                                          type=\"text\"\r\n                                          className=\"form-control\"\r\n                                          name=\"name\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"login-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"login-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"password\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-row d-flex justify-content-between mt-4 mb-2\">\r\n                                       <div className=\"form-group\">\r\n                                          <Link to=\"/page-forgot-password\">Forgot Password?</Link>\r\n                                       </div>\r\n                                    </div>\r\n                                    <div className=\"text-center\">\r\n                                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                          Sign Me In\r\n                                       </button>\r\n                                    </div>\r\n                                 </form>\r\n                                 <div className=\"new-account mt-3\">\r\n                                    <p>\r\n                                       Don't have an account?{' '}\r\n                                       <Link className=\"text-primary\" to=\"/page-register\">\r\n                                          Sign up\r\n                                       </Link>\r\n                                    </p>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setLogin: (payload) => dispatch(setLogin(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\Registration.js",["501"],"import { post } from 'jsx/helpers';\r\nimport React, { useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst Register = () => {\r\n   const history = useHistory();\r\n\r\n   const [registrationData, setRegistrationData] = useState({});\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   const handleBlur = (e) => {\r\n      const newRegistrationData = { ...registrationData };\r\n      newRegistrationData[e.target.name] = e.target.value;\r\n      setRegistrationData(newRegistrationData);\r\n   };\r\n   const handleRegister = async (e) => {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n         const res = await post('/auth/register', registrationData);\r\n         setIsLoading(false);\r\n         // localStorage.setItem('auth_token', res.token);\r\n         history.push('/page-login');\r\n      } catch (err) {\r\n         setIsLoading(false);\r\n         alert(err.response?.data?.data ?? err.message);\r\n      }\r\n   };\r\n   return (\r\n      <>\r\n         <When condition={isLoading}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <div className=\"authincation\">\r\n            <div className=\"container p-0\">\r\n               <div className=\"row justify-content-center align-items-center tw-h-screen\">\r\n                  <div className=\"col-lg-6 col-md-9\">\r\n                     <div className=\"authincation-content\">\r\n                        <div className=\"row no-gutters\">\r\n                           <div className=\"col-xl-12\">\r\n                              <div className=\"auth-form\">\r\n                                 <h4 className=\"text-center mb-4\">Sign up your account</h4>\r\n                                 <form action=\"\" onSubmit={handleRegister}>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-username\">\r\n                                          <strong>Username</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-username\"\r\n                                          type=\"text\"\r\n                                          className=\"form-control\"\r\n                                          name=\"name\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    {/* <div className=\"form-group\">\r\n                                    <label className=\"mb-1\" htmlFor=\"registration-email\">\r\n                                       <strong>Email</strong>\r\n                                    </label>\r\n                                    <input\r\n                                       id=\"registration-email\"\r\n                                       type=\"email\"\r\n                                       className=\"form-control\"\r\n                                       placeholder=\"hello@example.com\"\r\n                                       name=\"Email\"\r\n                                       onChange={handleBlur}\r\n                                    />\r\n                                 </div> */}\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"password\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-confirm-password\">\r\n                                          <strong>Confirm Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-confirm-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"passwordConfirm\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"text-center mt-4\">\r\n                                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                          Sign me up\r\n                                       </button>\r\n                                    </div>\r\n                                 </form>\r\n                                 <div className=\"new-account mt-3\">\r\n                                    <p>\r\n                                       Already have an account?{' '}\r\n                                       <Link className=\"text-primary\" to=\"/page-login\">\r\n                                          Sign in\r\n                                       </Link>\r\n                                    </p>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\expenses\\AddNewExpense.js",["502","503","504","505","506","507"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport Select from 'jsx/components/Select';\r\nimport { setExpensesData, setExpensesVisibility } from 'store/actions';\r\nimport { useFormik } from 'formik';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst AddNewExpense = () => {\r\n   const state = useSelector((s) => s.expenses);\r\n   const dispatch = useDispatch();\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const titleRef = useRef();\r\n\r\n   const mutation = useMutation((payload) => post('/expenses', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('expenses');\r\n         dispatch(setExpensesVisibility(false));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add expense', err });\r\n      },\r\n   });\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         title: state.data.title ?? '',\r\n         amount: state.data.amount ?? '',\r\n      },\r\n      onSubmit: (values, form) => {\r\n         mutation.mutate(values);\r\n         form.resetForm();\r\n         dispatch(setExpensesData({}));\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (state.visible) titleRef.current.focus();\r\n      if (state.data.title) formik.setFieldValue('title', state.data.title);\r\n      if (state.data.amount) formik.setFieldValue('amount', state.data.amount);\r\n   }, [state.visible]);\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={state.visible}\r\n            onHide={() => {\r\n               dispatch(setExpensesVisibility(false));\r\n            }}\r\n            title=\"Add New Expense\"\r\n            isLoading={mutation.isLoading}\r\n            size=\"md\"\r\n            onSubmit={formik.handleSubmit}\r\n            submitButtonText=\"Save\"\r\n         >\r\n            <When condition={mutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alert.getAlert()}\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Title</label>\r\n                     <input\r\n                        ref={titleRef}\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        value={formik.values.title}\r\n                     />\r\n                  </div>\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Amount</label>\r\n                     <input\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"amount\"\r\n                        value={formik.values.amount}\r\n                     />\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AddNewExpense;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\Error404.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\index.js",["508","509","510","511"],"import React, { memo, useEffect } from 'react';\r\nimport { setLogin, setLogout } from 'store/auth/actions';\r\nimport { connect } from 'react-redux';\r\nimport Nav from './nav';\r\nimport Footer from './Footer';\r\nimport { get } from '../helpers';\r\n\r\nconst Layout = ({ children: Children, isPublic, setUser, logout }) => {\r\n   const token = localStorage.getItem('auth_token');\r\n   const getUserProfile = async () => {\r\n      try {\r\n         const res = await get(`/auth/decode/${token}`);\r\n         if (!res?.isConfirmed) {\r\n            logout();\r\n            localStorage.clear();\r\n            window.location = 'page-login';\r\n         } else {\r\n            setUser({ ...res, auth_token: token });\r\n         }\r\n      } catch (error) {\r\n         logout();\r\n         setUser({});\r\n         localStorage.clear();\r\n         window.location = 'page-login';\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (token) {\r\n         getUserProfile();\r\n      }\r\n   }, [token]);\r\n\r\n   if (isPublic)\r\n      return (\r\n         <>\r\n            <div id=\"main-wrapper\" className=\"show\">\r\n               <div className=\"container-fluid\">\r\n                  {/* <Children /> */}\r\n                  {Children}\r\n               </div>\r\n            </div>\r\n         </>\r\n      );\r\n\r\n   return (\r\n      <>\r\n         <div id=\"main-wrapper\" className=\"show\" style={{ minHeight: '100vh' }}>\r\n            <Nav />\r\n            <div className=\"content-body\">\r\n               <div className=\"container-fluid\">\r\n                  {/* <Children /> */}\r\n                  {Children}\r\n               </div>\r\n            </div>\r\n            {/* <Footer /> */}\r\n         </div>\r\n      </>\r\n   );\r\n};\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setUser: (payload) => dispatch(setLogin(payload)),\r\n   logout: () => dispatch(setLogout()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\index.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\users\\index.js",["512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527"],"import Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, getV2, put, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, Row, Table, Popover, OverlayTrigger } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { useHistory } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport swal from 'sweetalert';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { useDebounce } from 'ahooks';\r\nimport { connect } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport cls from 'classnames';\r\nimport Select from 'jsx/components/Select';\r\nimport ClearSale from '../sale/ClearSale';\r\n\r\ndayjs.extend(relativeTime);\r\nconst Users = (props) => {\r\n   const history = useHistory();\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: 1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n   const [roles, setRoles] = useState({});\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['auth', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\r\n      getV2('/auth', { page, limit, search: debouncedSearchValue })\r\n   );\r\n   const rejectMutation = useMutation((id) => del(`/auth/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('auth');\r\n         alert.setAlert({\r\n            message: 'User rejected successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to reject user', err });\r\n      },\r\n   });\r\n\r\n   const acceptMutation = useMutation(({ id, role }) => put(`/auth/confirm/${id}/${role}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('auth');\r\n         alert.setAlert({\r\n            message: 'User accepted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to accepted user', err });\r\n      },\r\n   });\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            rejectMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleAcceptUser = (id) => {\r\n      console.log(id, roles, roles[id]);\r\n      acceptMutation.mutate({ id, role: roles[id] });\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Users\" motherMenu=\"Manage\" />\r\n         <div className=\"row tw-mb-8\">\r\n            <div className=\"col-xl-6\" />\r\n\r\n            <div className=\"col-xl-6\">\r\n               <ButtonGroup className=\"tw-float-right\">\r\n                  <input\r\n                     type=\"text\"\r\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\r\n                     placeholder=\"Search Users...\"\r\n                     disabled={rejectMutation.isLoading}\r\n                     onChange={(e) => setSearch(e.target.value)}\r\n                  />\r\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\r\n                     Search\r\n                  </Button>\r\n               </ButtonGroup>\r\n            </div>\r\n         </div>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading || rejectMutation.isLoading || acceptMutation.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Users</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\">Name</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\">Role</strong>\r\n                                    </th>\r\n                                    <th />\r\n                                 </tr>\r\n                              </thead>\r\n\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => {\r\n                                    if (e.name === 'dev') return null;\r\n\r\n                                    const DeleteButton = (p) => (\r\n                                       <Button\r\n                                          variant=\"danger\"\r\n                                          size=\"sm\"\r\n                                          icon={AiFillDelete}\r\n                                          onClick={() => handleOnClickDelete(e._id)}\r\n                                       >\r\n                                          {p.children}\r\n                                       </Button>\r\n                                    );\r\n                                    return (\r\n                                       <tr key={`${e._id}`}>\r\n                                          <td>\r\n                                             <b>{query.data.pagingCounter + index}</b>\r\n                                          </td>\r\n                                          <td className=\"tw-capitalize\">{e.name}</td>\r\n                                          <td className=\"tw-capitalize\">{e.role?.toLowerCase()}</td>\r\n                                          <td className=\"tw-flex tw-items-center tw-gap-4\">\r\n                                             <If condition={!e.isConfirmed}>\r\n                                                <Then>\r\n                                                   <Select\r\n                                                      width=\"tw-w-[200px]\"\r\n                                                      placeholder=\"Assign Role\"\r\n                                                      options={[\r\n                                                         { label: 'Administrator', value: 'Administrator' },\r\n                                                         { label: 'Cashier', value: 'Cashier' },\r\n                                                      ]}\r\n                                                      onChange={(role) =>\r\n                                                         setRoles((prev) => ({ ...prev, [e._id]: role.value }))\r\n                                                      }\r\n                                                   />\r\n                                                   <ButtonGroup>\r\n                                                      <DeleteButton>Reject</DeleteButton>\r\n                                                      <Button\r\n                                                         variant=\"secondary\"\r\n                                                         size=\"sm\"\r\n                                                         icon={AiFillEdit}\r\n                                                         disabled={!roles[e._id]}\r\n                                                         onClick={() => handleAcceptUser(e._id)}\r\n                                                      >\r\n                                                         Accept\r\n                                                      </Button>\r\n                                                   </ButtonGroup>\r\n                                                </Then>\r\n                                                <Else>\r\n                                                   <When condition={props.user._id !== e._id}>\r\n                                                      <DeleteButton>Delete</DeleteButton>\r\n                                                   </When>\r\n                                                </Else>\r\n                                             </If>\r\n                                          </td>\r\n                                       </tr>\r\n                                    );\r\n                                 })}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No customers created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || rejectMutation.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\modals\\index.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\modals\\index.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\index.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\dashboard\\index.js",["528","529","530","531","532","533","534"],"import React, { useState } from 'react';\r\nimport { Dropdown, Table, ButtonGroup, Card } from 'react-bootstrap';\r\nimport Button from 'jsx/components/Button';\r\n\r\nimport { AiFillEye, AiOutlinePlus } from 'react-icons/ai';\r\nimport { connect } from 'formik';\r\nimport { useSelector } from 'react-redux';\r\nimport dayjs from 'dayjs';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport '../../../css/react-datepicker.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getV2, useQuery } from 'jsx/helpers';\r\nimport { currencyFormatter } from 'jsx/helpers/misc';\r\nimport ManagePurchase from '../purchase/ManagePurchase';\r\nimport ManageSales from '../sale/MangeSales';\r\nimport SaleGrid from '../sale/sale-grid';\r\n\r\nconst today = new Date();\r\n\r\nconst Dashboard = () => {\r\n   const [startDate, setStartDate] = useState(new Date());\r\n   const [endDate, setEndDate] = useState(new Date());\r\n   const history = useHistory();\r\n\r\n   const user = useSelector((s) => s.auth.user);\r\n\r\n   // const purchase = useQuery(['dashboard-purchases', startDate, endDate], () =>\r\n   //    getV2('/dashboard/purchases', { startDate, endDate })\r\n   // );\r\n   const sale = useQuery(['dashboard-sales', startDate, endDate], () =>\r\n      getV2('/dashboard/sales', { startDate, endDate })\r\n   );\r\n   // const revenue = useQuery(['dashboard-revenue', startDate, endDate], () =>\r\n   //    getV2('/dashboard/revenue', { startDate, endDate })\r\n   // );\r\n   // const expense = useQuery(['dashboard-expenses', startDate, endDate], () =>\r\n   //    getV2('/dashboard/expenses', { startDate, endDate })\r\n   // );\r\n   // const profit = useQuery(['dashboard-profit', startDate, endDate], () =>\r\n   //    getV2('/dashboard/profit', { startDate, endDate })\r\n   // );\r\n\r\n   return (\r\n      <>\r\n         <div className=\"row tw-mb-[30px]\">\r\n            <div className=\"col-xl-12 tw-flex tw-justify-end tw-items-center\">\r\n               <DatePicker selected={startDate} onChange={(d) => setStartDate(d)} dateFormat=\"dd MMMM yyyy\" />\r\n               <span className=\"mx-4\">to</span>\r\n               <DatePicker selected={endDate} onChange={(d) => setEndDate(d)} dateFormat=\"dd MMMM yyyy\" />\r\n            </div>\r\n         </div>\r\n         <div className=\"row\">\r\n            <div className=\"col-lg-4 col-md-12\">\r\n               <Card className=\"tw-h-[205px]\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">\r\n                        Hey <span className=\"tw-capitalize\">{user.name?.toLowerCase() ?? 'Loading...'}</span>!\r\n                     </h3>\r\n                     <h4>{dayjs(today).format('dddd[,] DD MMMM YYYY')}</h4>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div>\r\n            {/* <div className=\"col-lg-4 col-md-6\">\r\n               <Card className=\"\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">Purchase</h3>\r\n                     <h4>\r\n                        {purchase.data\r\n                           ? `${purchase.data.count} - ${new Intl.NumberFormat('en-IN', {\r\n                                maximumSignificantDigits: 3,\r\n                             }).format(purchase.data.sum)} PKR`\r\n                           : '...'}\r\n                     </h4>\r\n                     <h6 className=\"tw-text-xs\">Total purchases made</h6>\r\n                     <Button\r\n                        variant=\"secondary\"\r\n                        className=\"btn-block\"\r\n                        icon={AiOutlinePlus}\r\n                        onClick={() => history.push('/purchase/add')}\r\n                     >\r\n                        New Purchase\r\n                     </Button>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div> */}\r\n            <div className=\"col-lg-8 col-md-12\">\r\n               <Card className=\"\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">Sale</h3>\r\n                     <h4>{sale.data ? `${sale.data.count} - ${currencyFormatter.format(sale.data.sum)}` : '...'}</h4>\r\n                     <h6 className=\"tw-text-xs\">Total sale made</h6>\r\n                     <Button\r\n                        variant=\"primary\"\r\n                        className=\"btn-block\"\r\n                        icon={AiOutlinePlus}\r\n                        onClick={() => history.push('/sale/add')}\r\n                     >\r\n                        New Sale\r\n                     </Button>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div>\r\n            {/* <div className=\"col-lg-4 col-md-6\">\r\n               <Card className=\"tw-h-[205px]\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">Revenue</h3>\r\n                     <h4>\r\n                        {revenue.data !== undefined && revenue.data !== null\r\n                           ? `${new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(\r\n                                revenue.data\r\n                             )} PKR`\r\n                           : '...'}\r\n                     </h4>\r\n                     <h6 className=\"tw-text-xs\">Profit made from the sales</h6>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div> */}\r\n            {/* <div className=\"col-lg-4 col-md-6\">\r\n               <Card className=\"tw-h-[205px]\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">Expenses</h3>\r\n                     <h4>\r\n                        {expense.data !== undefined && expense.data !== null\r\n                           ? `${new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(\r\n                                expense.data\r\n                             )} PKR`\r\n                           : '...'}\r\n                     </h4>\r\n\r\n                     <h6 className=\"tw-text-xs\">Salaries and expenses</h6>\r\n                     <Button\r\n                        variant=\"secondary\"\r\n                        className=\"btn-block\"\r\n                        icon={AiOutlinePlus}\r\n                        onClick={() => history.push('/expenses/add')}\r\n                     >\r\n                        New Expense\r\n                     </Button>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div> */}\r\n            {/* <div className=\"col-lg-4 col-md-6\">\r\n               <Card className=\"tw-h-[205px]\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">Profit</h3>\r\n                     <h4>\r\n                        {profit.data !== undefined && profit.data !== null\r\n                           ? `${new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(\r\n                                profit.data.profit\r\n                             )} PKR`\r\n                           : '...'}\r\n                     </h4>\r\n                     <h6 className=\"tw-text-xs\">Take home money</h6>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div> */}\r\n            <div className=\"col-12\">\r\n               <SaleGrid startDate={startDate} endDate={endDate} />\r\n            </div>\r\n            {/* <div className=\"col-12\">\r\n               <ManagePurchase />\r\n            </div> */}\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\index.js",["535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573"],"import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport produce from 'immer';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, getV2, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _, { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\nimport ClearSale from './ClearSale';\r\nimport RefundSale from './RefundSale';\r\nimport ManageSales from './MangeSales';\r\nimport SaleGrid from './sale-grid';\r\n\r\nconst Sale = (props) => {\r\n   const history = useHistory();\r\n\r\n   const [startDate, setStartDate] = useState(new Date());\r\n   const [endDate, setEndDate] = useState(new Date());\r\n\r\n   const handleOnClickAdd = () => {\r\n      history.push('/sale/add');\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Sale\" motherMenu=\"Frosty Bites\" />\r\n\r\n         <div className=\"row tw-mb-8\">\r\n            <div className=\"col-xl-6\">\r\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                  Add New Sale\r\n               </Button>\r\n            </div>\r\n            <div className=\"col-xl-6 tw-flex tw-justify-end tw-items-center\">\r\n               <ReactDatePicker selected={startDate} onChange={(d) => setStartDate(d)} dateFormat=\"dd MMMM yyyy\" />\r\n               <span className=\"mx-4\">to</span>\r\n               <ReactDatePicker selected={endDate} onChange={(d) => setEndDate(d)} dateFormat=\"dd MMMM yyyy\" />\r\n            </div>\r\n         </div>\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               {/* <ManageSales startDate={startDate} endDate={endDate} /> */}\r\n               <SaleGrid startDate={startDate} endDate={endDate} />\r\n            </Col>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sale);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\add-sale\\index.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\expenses\\index.js",["574","575","576","577","578","579","580"],"import { useDebounce } from 'ahooks';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { setExpensesVisibility } from 'store/actions';\r\nimport swal from 'sweetalert';\r\nimport ExpenseTypes from '../expenseTypes';\r\nimport Salaries from '../salaries';\r\n\r\nconst Expenses = (props) => {\r\n   dayjs.extend(relativeTime);\r\n   const history = useHistory();\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const dispatch = useDispatch();\r\n\r\n   const query = useQuery(['expenses', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\r\n      get('/expenses', page, limit, sort.field, sort.order, debouncedSearchValue)\r\n   );\r\n   const deleteMutation = useMutation((id) => del(`/expenses/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('expenses');\r\n         alert.setAlert({\r\n            message: 'Sale deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete sale', err });\r\n      },\r\n   });\r\n\r\n   // const handleOnClickView = (obj) => {\r\n   //    history.push({ pathname: `/expenses/${obj._id}`, search: `?type=view` });\r\n   // };\r\n   const handleOnClickAdd = () => {\r\n      history.push('/expenses/add');\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Expenses\" motherMenu=\"Diamond Tiles\" />\r\n\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <div className=\"row\">\r\n            <div className=\"col-xl-12 mb-4\">\r\n               <Salaries />\r\n            </div>\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Expenses</Card.Title>\r\n                     <ButtonGroup className=\"tw-float-right\">\r\n                        <input\r\n                           type=\"text\"\r\n                           className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\r\n                           placeholder=\"Search Expenses...\"\r\n                           disabled={deleteMutation.isLoading}\r\n                           onChange={(e) => setSearch(e.target.value)}\r\n                        />\r\n                        <Button\r\n                           size=\"sm\"\r\n                           variant=\"primary\"\r\n                           icon={AiFillPlusCircle}\r\n                           onClick={() => dispatch(setExpensesVisibility(true))}\r\n                        >\r\n                           Add New Expense\r\n                        </Button>\r\n                     </ButtonGroup>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>{getSortingIcon({ label: 'Title' })}</th>\r\n\r\n                                    <th>\r\n                                       {getSortingIcon({ label: 'Amount', key: 'amount', onSort: handleSort, sort })}\r\n                                    </th>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{query.data.pagingCounter + index}</strong>\r\n                                       </td>\r\n                                       <td>{e.title}</td>\r\n                                       <td>\r\n                                          {new Intl.NumberFormat('en-IN', {\r\n                                             maximumSignificantDigits: 3,\r\n                                          }).format(e.amount)}{' '}\r\n                                          PKR\r\n                                       </td>\r\n                                       <td>\r\n                                          <div className=\"tw-flex tw-items-center tw-gap-4\">\r\n                                             <OverlayTrigger\r\n                                                trigger={['hover', 'hover']}\r\n                                                placement=\"top\"\r\n                                                overlay={\r\n                                                   <Popover className=\"tw-border-gray-500\">\r\n                                                      <Popover.Content>\r\n                                                         {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\r\n                                                      </Popover.Content>\r\n                                                   </Popover>\r\n                                                }\r\n                                             >\r\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                             </OverlayTrigger>\r\n                                             <ButtonGroup>\r\n                                                <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                                   <Button\r\n                                                      variant=\"danger\"\r\n                                                      size=\"sm\"\r\n                                                      icon={AiFillDelete}\r\n                                                      onClick={() => handleOnClickDelete(e._id)}\r\n                                                   >\r\n                                                      Delete\r\n                                                   </Button>\r\n                                                </When>\r\n                                             </ButtonGroup>\r\n                                          </div>\r\n                                       </td>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No Expenses created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Expenses);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\auth\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\units\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\types\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\suppliers\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\employees\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\salaries\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\inventories\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\products\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\customers\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\expenses\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\auth\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\Footer.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\product-grid.js",["581","582"],"import { useDebounce } from 'ahooks';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { api, del, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Badge, ButtonGroup, Card, Col, Table } from 'react-bootstrap';\r\nimport { AiFillPlusCircle } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport swal from 'sweetalert';\r\nimport { batch, connect, useDispatch } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setProductsData, setProductsVisibility } from 'store/actions';\r\nimport TableSearch from 'jsx/components/TableSearch';\r\nimport GenericTableHeadingSorter from 'jsx/components/GenericTableHeadingSorter';\r\nimport DeleteButton from 'jsx/components/DeleteButton';\r\nimport EditButton from 'jsx/components/EditButton';\r\nimport { toast } from 'react-toastify';\r\nimport { handleToastError, initialSort } from 'jsx/helpers/misc';\r\nimport { GET_PRODUCTS } from './queries';\r\nimport { DELETE_ENTITY } from '../../../queries';\r\n\r\nconst ProductGrid = (props) => {\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState(initialSort);\r\n\r\n   const [search, setSearch] = useState('');\r\n\r\n   const dispatch = useDispatch();\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['products', { page, sort, limit, search: debouncedSearchValue }], GET_PRODUCTS, {\r\n      onSuccess: (data) => {\r\n         if (page > data.totalPages) setPage((prev) => prev - 1);\r\n      },\r\n   });\r\n\r\n   const deleteMutation = useMutation(DELETE_ENTITY('Product'));\r\n\r\n   const handleOnClickAdd = () => {\r\n      dispatch(setProductsVisibility(true));\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete)\r\n            deleteMutation.mutate(id, {\r\n               onSuccess: async () => {\r\n                  toast.success('Product deleted successfully');\r\n                  return queryClient.invalidateQueries('products');\r\n               },\r\n               onError: handleToastError,\r\n            });\r\n      });\r\n   };\r\n\r\n   const handleSort = (field) => {\r\n      setSort((prev) => {\r\n         if (prev.field && prev.order === -1) return initialSort;\r\n         return { field, order: prev.order * -1 };\r\n      });\r\n   };\r\n\r\n   const TableHeadingSorter = useCallback(\r\n      ({ field, children }) => (\r\n         <GenericTableHeadingSorter sort={sort} field={field} onClick={() => handleSort(field)}>\r\n            {children}\r\n         </GenericTableHeadingSorter>\r\n      ),\r\n      [sort]\r\n   );\r\n\r\n   const handleEdit = (row) => {\r\n      const tagIds = row.tags.map((_tag) => _tag._id);\r\n      batch(() => {\r\n         dispatch(setProductsData({ ...row, tags: tagIds }));\r\n         dispatch(setProductsVisibility(true));\r\n      });\r\n   };\r\n\r\n   // eslint-disable-next-line react/destructuring-assignment\r\n   const isCashier = props.user?.role === userRoles.CASHIER;\r\n\r\n   const shouldShowSpinner = query.isLoading || deleteMutation.isLoading;\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Products\" motherMenu=\"Manage\" />\r\n\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={shouldShowSpinner}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Products</Card.Title>\r\n                     <ButtonGroup className=\"tw-float-right\">\r\n                        <TableSearch\r\n                           placeholder=\"Search products\"\r\n                           disabled={shouldShowSpinner}\r\n                           changeHandler={setSearch}\r\n                        />\r\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                           Add New Product\r\n                        </Button>\r\n                     </ButtonGroup>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <TableHeadingSorter field=\"name\">Name</TableHeadingSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                       <TableHeadingSorter field=\"price\">Price</TableHeadingSorter>\r\n                                    </th>\r\n                                    <When condition={!isCashier}>\r\n                                       <th>\r\n                                          <strong>Actions</strong>\r\n                                       </th>\r\n                                    </When>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{query.data.pagingCounter + index}</strong>\r\n                                       </td>\r\n                                       <td>\r\n                                          {e.name}{' '}\r\n                                          {e.tags.map((_tag) => (\r\n                                             <Badge key={_tag._id} variant=\"primary\">\r\n                                                {_tag.name}\r\n                                             </Badge>\r\n                                          ))}\r\n                                       </td>\r\n                                       <td>{e.price}</td>\r\n                                       <When condition={!isCashier}>\r\n                                          <td>\r\n                                             <ButtonGroup>\r\n                                                <EditButton onClick={() => handleEdit(e)} />\r\n                                                <DeleteButton onClick={() => handleOnClickDelete(e._id)} />\r\n                                             </ButtonGroup>\r\n                                          </td>\r\n                                       </When>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No products created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={shouldShowSpinner}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ProductGrid);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\ClearSale.js",["583","584","585","586","587"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport Select from 'jsx/components/Select';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, post, put, useAlert, useQuery } from 'jsx/helpers';\r\nimport { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\n\r\nconst ClearSale = ({ initialAmount, clearSale, toggle, onClose, onOpen, ...props }) => {\r\n   const [amount, setAmount] = useState(0);\r\n\r\n   useEffect(() => setAmount(initialAmount), [initialAmount]);\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const alert = useAlert();\r\n\r\n   const clearMutation = useMutation((payload) => post(`/sales/pay/id/${clearSale}/amount/${payload}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('sales');\r\n         onClose();\r\n         setAmount(0);\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to clear sale', err });\r\n      },\r\n   });\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={clearSale}\r\n            onHide={() => {\r\n               onClose();\r\n               setAmount(0);\r\n            }}\r\n            isLoading={clearMutation.isLoading}\r\n            title=\"Clear Sale\"\r\n            onSubmit={() => {\r\n               clearMutation.mutate(amount);\r\n            }}\r\n            submitButtonText=\"Clear\"\r\n            size=\"xl\"\r\n            {...props}\r\n         >\r\n            <When condition={clearMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alertMarkup ? (\r\n               <Row>\r\n                  <Col lg={12}>{alertMarkup}</Col>\r\n               </Row>\r\n            ) : null}\r\n            <Form onSubmit={() => clearMutation.mutate(amount)}>\r\n               <Form.Group>\r\n                  <Form.Label>Amount</Form.Label>\r\n                  <Form.Control type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\r\n               </Form.Group>\r\n            </Form>\r\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default ClearSale;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\employees-grid.js",["588"],"import { useDebounce } from 'ahooks';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Badge, ButtonGroup, Card, Col, Table } from 'react-bootstrap';\r\nimport { AiFillPlusCircle } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport swal from 'sweetalert';\r\nimport { batch, connect, useDispatch } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setEmployeesData, setEmployeesVisibility } from 'store/actions';\r\nimport TableSearch from 'jsx/components/TableSearch';\r\nimport GenericTableHeadingSorter from 'jsx/components/GenericTableHeadingSorter';\r\nimport DeleteButton from 'jsx/components/DeleteButton';\r\nimport EditButton from 'jsx/components/EditButton';\r\nimport { toast } from 'react-toastify';\r\nimport { handleToastError, initialSort } from 'jsx/helpers/misc';\r\nimport { GET_EMPLOYEES } from './queries';\r\nimport { DELETE_ENTITY } from '../../../queries';\r\n\r\nconst EmployeesGrid = (props) => {\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState(initialSort);\r\n\r\n   const [search, setSearch] = useState('');\r\n\r\n   const dispatch = useDispatch();\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['employees', { page, sort, limit, search: debouncedSearchValue }], GET_EMPLOYEES, {\r\n      onSuccess: (data) => {\r\n         if (page > data.totalPages) setPage((prev) => prev - 1);\r\n      },\r\n   });\r\n\r\n   const deleteMutation = useMutation(DELETE_ENTITY('Employee'));\r\n\r\n   const handleOnClickAdd = () => {\r\n      dispatch(setEmployeesVisibility(true));\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete)\r\n            deleteMutation.mutate(id, {\r\n               onSuccess: async () => {\r\n                  toast.success('Employee deleted successfully');\r\n                  return queryClient.invalidateQueries('employees');\r\n               },\r\n               onError: handleToastError,\r\n            });\r\n      });\r\n   };\r\n\r\n   const handleSort = (field) => {\r\n      setSort((prev) => {\r\n         if (prev.field && prev.order === -1) return initialSort;\r\n         return { field, order: prev.order * -1 };\r\n      });\r\n   };\r\n\r\n   const TableHeadingSorter = useCallback(\r\n      ({ field, children }) => (\r\n         <GenericTableHeadingSorter sort={sort} field={field} onClick={() => handleSort(field)}>\r\n            {children}\r\n         </GenericTableHeadingSorter>\r\n      ),\r\n      [sort]\r\n   );\r\n\r\n   const handleEdit = (row) => {\r\n      batch(() => {\r\n         dispatch(setEmployeesData(row));\r\n         dispatch(setEmployeesVisibility(true));\r\n      });\r\n   };\r\n\r\n   // eslint-disable-next-line react/destructuring-assignment\r\n   const isCashier = props.user?.role === userRoles.CASHIER;\r\n\r\n   const shouldShowSpinner = query.isLoading || deleteMutation.isLoading;\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Employees\" motherMenu=\"Manage\" />\r\n\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={shouldShowSpinner}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Employees</Card.Title>\r\n                     <ButtonGroup className=\"tw-float-right\">\r\n                        <TableSearch\r\n                           placeholder=\"Search employee name\"\r\n                           disabled={shouldShowSpinner}\r\n                           changeHandler={setSearch}\r\n                        />\r\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                           Add New Employee\r\n                        </Button>\r\n                     </ButtonGroup>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <TableHeadingSorter field=\"name\">Name</TableHeadingSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                       <TableHeadingSorter field=\"phone\">Phone</TableHeadingSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                       <TableHeadingSorter field=\"salary\">Salary</TableHeadingSorter>\r\n                                    </th>\r\n                                    <When condition={!isCashier}>\r\n                                       <th>\r\n                                          <strong>Actions</strong>\r\n                                       </th>\r\n                                    </When>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{query.data.pagingCounter + index}</strong>\r\n                                       </td>\r\n                                       <td>{e.name}</td>\r\n                                       <td>{e.phone}</td>\r\n                                       <td>{e.salary}</td>\r\n                                       <When condition={!isCashier}>\r\n                                          <td>\r\n                                             <ButtonGroup>\r\n                                                <EditButton onClick={() => handleEdit(e)} />\r\n                                                <DeleteButton onClick={() => handleOnClickDelete(e._id)} />\r\n                                             </ButtonGroup>\r\n                                          </td>\r\n                                       </When>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No employees added</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={shouldShowSpinner}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(EmployeesGrid);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\add-sale\\add-sale.js",["589","590","591","592","593"],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\SpinnerOverlay.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\CreatableSelect.js",["594","595"],"import Creatable from 'react-select/creatable';\r\n\r\nconst selectStyles = {\r\n   control: (provided, state) => {\r\n      provided.borderColor = state.menuIsOpen ? '#44bdec' : 'hsl(0, 0%, 80%)';\r\n      provided.boxShadow = state.menuIsOpen ? '0 0 0 1px #44bdec' : '';\r\n      provided['&:hover'] = { borderColor: '#44bdec' };\r\n      provided.justifyContent = 'center';\r\n      provided.paddingTop = '0.2rem';\r\n      provided.paddingBottom = '0.2rem';\r\n\r\n      return provided;\r\n   },\r\n   valueContainer: (provided, state) => {\r\n      provided.justifyContent = 'center';\r\n      return provided;\r\n   },\r\n   menu: (provided, state) => {\r\n      provided.textAlign = 'center';\r\n      return provided;\r\n   },\r\n   option: (provided, state) => {\r\n      provided.backgroundColor = state.isSelected || state.isFocused ? '#44bdec' : 'transparent';\r\n\r\n      if (state.isFocused) provided.color = 'white';\r\n      return provided;\r\n   },\r\n};\r\n\r\nconst Select = ({ className = '', ...props }) => (\r\n   <Creatable menuPlacement=\"auto\" className={`tw-w-[auto] ${className}`} styles={selectStyles} {...props} />\r\n);\r\n\r\nexport default Select;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\ModalWrapper.js",["596"],"import { Form, useFormikContext } from 'formik';\r\nimport React, { useEffect } from 'react';\r\n\r\nimport { Button, Modal, Container, Spinner, ButtonGroup } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\n\r\nconst ModalWrapper = ({\r\n   show,\r\n   onHide,\r\n   isLoading,\r\n   title,\r\n   submitButtonText = 'Save',\r\n   children,\r\n   isDisabled,\r\n   onShow,\r\n   ...rest\r\n}) => {\r\n   useEffect(() => {\r\n      if (show) onShow?.();\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [show]);\r\n\r\n   return (\r\n      <Modal\r\n         className=\"fade\"\r\n         show={show}\r\n         onHide={() => {\r\n            if (!isLoading) onHide();\r\n         }}\r\n         size=\"md\"\r\n         {...rest}\r\n      >\r\n         <Form>\r\n            <Modal.Header>\r\n               <Modal.Title>{title}</Modal.Title>\r\n               <Button variant=\"\" className=\"close\" onClick={onHide}>\r\n                  <span>&times;</span>\r\n               </Button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n               <Container>{children}</Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n               <ButtonGroup>\r\n                  <Button variant=\"warning light\" disabled={isLoading} onClick={onHide}>\r\n                     Close\r\n                  </Button>\r\n                  <Button\r\n                     variant=\"primary\"\r\n                     type=\"submit\"\r\n                     // onClick={formikProps?.handleSubmit}\r\n                     disabled={isLoading || isDisabled}\r\n                  >\r\n                     <When condition={isLoading}>\r\n                        <Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n                     </When>\r\n                     <span className=\"ml-1\">{submitButtonText}</span>\r\n                  </Button>\r\n               </ButtonGroup>\r\n            </Modal.Footer>\r\n         </Form>\r\n      </Modal>\r\n   );\r\n};\r\n\r\nexport default ModalWrapper;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\Select.js",["597","598","599"],"import ReactSelect from 'react-select';\r\n\r\nexport const defaultSelectStyles = {\r\n   control: (baseStyles, state) => {\r\n      delete baseStyles['&:hover'];\r\n      delete baseStyles.boxShadow;\r\n\r\n      const borderColor = state.isFocused ? '#44bdec' : '#f0f1f5';\r\n\r\n      return {\r\n         ...baseStyles,\r\n         borderRadius: 0,\r\n         height: 56,\r\n         cursor: 'pointer',\r\n         padding: '6px 12px',\r\n         border: `1px solid ${borderColor}`,\r\n      };\r\n   },\r\n};\r\n\r\nconst selectStyles = (height) => ({\r\n   control: (provided, state) => {\r\n      provided.borderColor = state.menuIsOpen ? '#44bdec' : 'hsl(0, 0%, 80%)';\r\n      provided.boxShadow = state.menuIsOpen ? '0 0 0 1px #44bdec' : '';\r\n      provided['&:hover'] = { borderColor: '#44bdec' };\r\n      provided.justifyContent = 'center';\r\n      provided.paddingTop = '0.2rem';\r\n      provided.paddingBottom = '0.2rem';\r\n      provided.height = height;\r\n\r\n      console.log(provided);\r\n\r\n      return provided;\r\n   },\r\n   valueContainer: (provided, state) => {\r\n      provided.justifyContent = 'center';\r\n\r\n      return provided;\r\n   },\r\n   menu: (provided, state) => {\r\n      provided.textAlign = 'center';\r\n      return provided;\r\n   },\r\n   option: (provided, state) => {\r\n      provided.backgroundColor = state.isSelected || state.isFocused ? '#44bdec' : 'transparent';\r\n\r\n      if (state.isFocused) provided.color = 'white';\r\n      return provided;\r\n   },\r\n});\r\n\r\nconst Select = ({ width = 'tw-w-[100px]', className = '', height = '36px', ...props }) => (\r\n   <ReactSelect\r\n      menuPlacement=\"auto\"\r\n      className={`${width} ${className}`}\r\n      styles={() => selectStyles(height)}\r\n      {...props}\r\n   />\r\n);\r\n\r\nexport default Select;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\index.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\sale-grid.js",["600","601","602","603","604","605","606","607","608","609","610"],"import { useDebounce } from 'ahooks';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { api, del, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Badge, ButtonGroup, Card, Col, Table } from 'react-bootstrap';\r\nimport { AiFillPlusCircle } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport swal from 'sweetalert';\r\nimport { batch, connect, useDispatch } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setProductsData, setProductsVisibility } from 'store/actions';\r\nimport TableSearch from 'jsx/components/TableSearch';\r\nimport GenericTableHeadingSorter from 'jsx/components/GenericTableHeadingSorter';\r\nimport DeleteButton from 'jsx/components/DeleteButton';\r\nimport EditButton from 'jsx/components/EditButton';\r\nimport { toast } from 'react-toastify';\r\nimport { currencyFormatter, handleToastError, initialSort } from 'jsx/helpers/misc';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { DELETE_ENTITY } from '../../../queries';\r\nimport { GET_SALE } from './queries';\r\n\r\nconst SaleGrid = ({ startDate, endDate, ...props }) => {\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState(initialSort);\r\n\r\n   const [search, setSearch] = useState('');\r\n\r\n   const dispatch = useDispatch();\r\n   const history = useHistory();\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['sale', { page, sort, limit, search: debouncedSearchValue, startDate, endDate }], GET_SALE, {\r\n      onSuccess: (data) => {\r\n         if (page > data.totalPages) setPage((prev) => prev - 1);\r\n      },\r\n   });\r\n\r\n   const deleteMutation = useMutation(DELETE_ENTITY('Sale'));\r\n\r\n   const handleDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete)\r\n            deleteMutation.mutate(id, {\r\n               onSuccess: async () => {\r\n                  toast.success('Sale deleted successfully');\r\n                  return queryClient.invalidateQueries('sale');\r\n               },\r\n               onError: handleToastError,\r\n            });\r\n      });\r\n   };\r\n\r\n   const handleOnClickAdd = () => history.push('/sale/add');\r\n\r\n   // eslint-disable-next-line react/destructuring-assignment\r\n   const isCashier = props.user?.role === userRoles.CASHIER;\r\n\r\n   const shouldShowSpinner = query.isLoading || deleteMutation.isLoading;\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Products\" motherMenu=\"Manage\" />\r\n\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={shouldShowSpinner}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Sale</Card.Title>\r\n                     <ButtonGroup className=\"tw-float-right\">\r\n                        <TableSearch\r\n                           placeholder=\"Search by Sale ID\"\r\n                           disabled={shouldShowSpinner}\r\n                           changeHandler={setSearch}\r\n                        />\r\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                           Add New Sale\r\n                        </Button>\r\n                     </ButtonGroup>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>ID</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong>Products</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong>Subtotal</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong>Discount</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong>Total</strong>\r\n                                    </th>\r\n                                    <When condition={!isCashier}>\r\n                                       <th>\r\n                                          <strong>Actions</strong>\r\n                                       </th>\r\n                                    </When>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{e.saleId}</strong>\r\n                                       </td>\r\n                                       <td>\r\n                                          {e.products.map((_cartRow, i, _array) => {\r\n                                             const isLastIteration = i >= _array.length - 1;\r\n                                             return (\r\n                                                <>\r\n                                                   <div key={`${e._id}-product-${i}`}>\r\n                                                      <span>{`${_cartRow.product.name}`}</span>\r\n                                                      <br />\r\n                                                      <span>{`${_cartRow.quantity}x ${currencyFormatter.format(\r\n                                                         _cartRow.product.price\r\n                                                      )} = `}</span>\r\n                                                      <strong>{currencyFormatter.format(_cartRow.subtotal)}</strong>\r\n                                                   </div>\r\n                                                   {!isLastIteration && <br />}\r\n                                                </>\r\n                                             );\r\n                                          })}\r\n                                          {e.saleType === 'Delivery' && e.deliveryCharges > 0 && (\r\n                                             <div className=\"text-primary\">\r\n                                                <br />\r\n                                                <span>\r\n                                                   Delivery charges ={' '}\r\n                                                   <b>{currencyFormatter.format(e.deliveryCharges)}</b>\r\n                                                </span>\r\n                                             </div>\r\n                                          )}\r\n                                       </td>\r\n                                       <td>\r\n                                          {(e.saleType === 'Delivery' || e.discount > 0) &&\r\n                                             currencyFormatter.format(e.subtotal)}\r\n                                       </td>\r\n                                       <td>{e.discount > 0 && `${e.discount}%`}</td>\r\n                                       <td>{e.total > 0 && currencyFormatter.format(e.total)}</td>\r\n                                       <When condition={!isCashier}>\r\n                                          <td>\r\n                                             <DeleteButton onClick={() => handleDelete(e._id)} />\r\n                                          </td>\r\n                                       </When>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No products created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={shouldShowSpinner}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(SaleGrid);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\RefundSale.js",["611","612","613","614","615","616","617","618"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport Select from 'jsx/components/Select';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, put, useAlert, useQuery } from 'jsx/helpers';\r\nimport { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst initialValues = {\r\n   quantity: '',\r\n   total: '',\r\n   unit: '',\r\n};\r\n\r\nconst RefundSale = ({ refundSale, toggle, onClose, onOpen, ...props }) => {\r\n   const [isError, setIsError] = useState(false);\r\n\r\n   const [quantity, setQuantity] = useState('');\r\n   const [total, setTotal] = useState('');\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const alert = useAlert();\r\n\r\n   const handleChangeTotal = (t) => {\r\n      setTotal(t);\r\n   };\r\n\r\n   const handleChangeQuantity = (q, i = null) => {\r\n      setQuantity(q);\r\n      console.log('handle', i);\r\n      console.log('q:%s,retailPrice:%s,quantity:%s', q, i?.retailPrice, i?.quantity);\r\n      handleChangeTotal(q * (i?.retailPrice ?? 0 / i?.quantity ?? 0));\r\n   };\r\n\r\n   const inventory = useQuery(['sale', refundSale], () => get(`/sales/id/${refundSale}`), {\r\n      enabled: false,\r\n      onSuccess: (data) => {\r\n         handleChangeQuantity(1, data);\r\n      },\r\n   });\r\n\r\n   const refundMutation = useMutation((payload) => put(`/sales/${refundSale}/refund/${payload}`), {\r\n      onSuccess: () => {\r\n         onClose();\r\n         handleChangeQuantity(0, inventory.data);\r\n         queryClient.invalidateQueries('sales');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to refund sale', err });\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (refundSale) inventory.refetch();\r\n   }, [refundSale]);\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={refundSale}\r\n            onHide={() => {\r\n               onClose();\r\n               handleChangeQuantity(0);\r\n            }}\r\n            isLoading={refundMutation.isLoading}\r\n            title=\"Refund Sale\"\r\n            onSubmit={() => {\r\n               refundMutation.mutate(quantity);\r\n            }}\r\n            submitButtonText=\"Refund\"\r\n            size=\"xl\"\r\n            isDisabled={isError}\r\n            {...props}\r\n         >\r\n            <When condition={inventory.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alertMarkup ? (\r\n               <Row>\r\n                  <Col lg={12}>{alertMarkup}</Col>\r\n               </Row>\r\n            ) : null}\r\n            <Form>\r\n               <Form.Group>\r\n                  <Form.Label>Quantity</Form.Label>\r\n                  <Form.Control\r\n                     type=\"number\"\r\n                     value={quantity}\r\n                     onChange={(e) => handleChangeQuantity(e.target.value, inventory.data)}\r\n                  />\r\n               </Form.Group>\r\n\r\n               <Form.Group>\r\n                  <Form.Label>Total</Form.Label>\r\n                  <Form.Control type=\"number\" value={total} onChange={(e) => handleChangeTotal(e.target.value)} />\r\n               </Form.Group>\r\n            </Form>\r\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default RefundSale;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\MangeSales.js",["619","620","621","622","623","624","625","626","627","628","629","630","631","632"],"import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport produce from 'immer';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, getV2, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _, { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\nimport ClearSale from './ClearSale';\r\nimport RefundSale from './RefundSale';\r\n\r\ndayjs.extend(relativeTime);\r\n\r\nconst getQuantity = (array) => {\r\n   if (array[0] > 0) return `${array[0]} Units`;\r\n   return `${array[1]} ${array[1] > 0 ? 'Singles' : ''}`;\r\n};\r\n\r\nconst MangeSales = ({ startDate, endDate, ...props }) => {\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n\r\n   const [refundPurchase, setRefundPurchase] = useState(null);\r\n\r\n   const [clearSale, setClearSale] = useState({ id: null, amount: null });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const history = useHistory();\r\n\r\n   const alert = useAlert();\r\n\r\n   const query = useQuery(['sales', page, limit, sort.field, sort.order, startDate, endDate], () =>\r\n      getV2('/sales', { page, limit, sort: { [sort.field]: sort.order }, startDate, endDate })\r\n   );\r\n\r\n   const deleteMutation = useMutation((id) => del(`/sales/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('sales');\r\n         alert.setAlert({\r\n            message: 'Sale deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete sale', err });\r\n      },\r\n   });\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const handleEdit = (id) => {\r\n      history.push({ pathname: `/sale/add`, state: { saleId: id } });\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   return (\r\n      <>\r\n         <Card>\r\n            <When condition={query.isLoading || deleteMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <Card.Header>\r\n               <Card.Title>Manage Sale</Card.Title>\r\n            </Card.Header>\r\n            <Card.Body>\r\n               <If condition={query.data?.totalDocs > 0}>\r\n                  <Then>\r\n                     <Table className=\"tw-relative\" responsive>\r\n                        <thead>\r\n                           <tr>\r\n                              <th className=\"width80\">\r\n                                 <strong>#</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong>Supplier</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong>Products</strong>\r\n                              </th>\r\n                              <th>\r\n                                 {getSortingIcon({\r\n                                    label: 'Price',\r\n                                    key: 'totalRetailPrice',\r\n                                    onSort: handleSort,\r\n                                    sort,\r\n                                 })}\r\n                              </th>\r\n                              <th>\r\n                                 {getSortingIcon({\r\n                                    label: 'Paid',\r\n                                    key: 'paid',\r\n                                    onSort: handleSort,\r\n                                    sort,\r\n                                 })}\r\n                              </th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {query.data?.docs.map((e, index) => {\r\n                              const getId = () => {\r\n                                 const id = e._id;\r\n                                 return id.slice(id.length - 4);\r\n                              };\r\n\r\n                              const getProducts = () => {\r\n                                 const products = [];\r\n\r\n                                 e.products.forEach((d, i) => {\r\n                                    products.push(\r\n                                       <>\r\n                                          <b>{`${d.product.modelNumber}`}</b>\r\n                                          <br />\r\n                                          <span className=\"tw-mr-4\">{`BUY: ${d.sourcePrice} PKR`}</span>\r\n                                          <span>{`SELL: ${d.retailPrice} PKR`}</span>\r\n\r\n                                          {d.variants ? (\r\n                                             <>\r\n                                                <br />\r\n                                                {Object.entries(d.variants).map(([key, value]) => (\r\n                                                   <span className=\"tw-mr-4\">{`${key.toUpperCase()}: ${getQuantity(\r\n                                                      value\r\n                                                   )}`}</span>\r\n                                                ))}\r\n                                             </>\r\n                                          ) : (\r\n                                             <>\r\n                                                <br />\r\n                                                {getQuantity(d.quantity)}\r\n                                             </>\r\n                                          )}\r\n                                       </>\r\n                                    );\r\n                                    if (i < e.products.length - 1) products.push(<br />);\r\n                                 });\r\n\r\n                                 return products;\r\n                              };\r\n\r\n                              // getProducts();\r\n\r\n                              return (\r\n                                 <tr key={`${e._id}`} className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}>\r\n                                    <td>\r\n                                       <strong className={e.isRemaining && 'tw-text-gray-50'}>{getId()}</strong>\r\n                                    </td>\r\n                                    <td>{e.customer?.name}</td>\r\n                                    <td>{getProducts()}</td>\r\n                                    <td>{`${new Intl.NumberFormat('en-IN', {\r\n                                       maximumSignificantDigits: 3,\r\n                                    }).format(e.totalRetailPrice)} PKR`}</td>\r\n                                    <td>{`${new Intl.NumberFormat('en-IN', {\r\n                                       maximumSignificantDigits: 3,\r\n                                    }).format(e.paid)} PKR`}</td>\r\n\r\n                                    <td>\r\n                                       <div className=\"tw-flex tw-items-center tw-gap-4\">\r\n                                          <OverlayTrigger\r\n                                             trigger={['hover', 'hover']}\r\n                                             placement=\"top\"\r\n                                             overlay={\r\n                                                <Popover className=\"tw-border-gray-500\">\r\n                                                   <Popover.Content>\r\n                                                      {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\r\n                                                   </Popover.Content>\r\n                                                </Popover>\r\n                                             }\r\n                                          >\r\n                                             <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                          </OverlayTrigger>\r\n                                          <ButtonGroup>\r\n                                             <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                                <Button\r\n                                                   variant=\"light\"\r\n                                                   size=\"sm\"\r\n                                                   icon={AiFillEdit}\r\n                                                   onClick={() => handleEdit(e._id)}\r\n                                                >\r\n                                                   Edit\r\n                                                </Button>\r\n                                                <Button\r\n                                                   variant=\"danger\"\r\n                                                   size=\"sm\"\r\n                                                   icon={AiFillDelete}\r\n                                                   onClick={() => handleOnClickDelete(e._id)}\r\n                                                >\r\n                                                   Delete\r\n                                                </Button>\r\n                                             </When>\r\n                                          </ButtonGroup>\r\n                                       </div>\r\n                                    </td>\r\n                                 </tr>\r\n                              );\r\n                           })}\r\n                        </tbody>\r\n                     </Table>\r\n                  </Then>\r\n                  <Else>\r\n                     <When condition={!query.isLoading}>\r\n                        <p className=\"tw-m-0\">No sales created</p>\r\n                     </When>\r\n                  </Else>\r\n               </If>\r\n            </Card.Body>\r\n         </Card>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\r\n            />\r\n         </When>\r\n         <RefundSale refundPurchase={refundPurchase} onClose={() => setRefundPurchase(null)} size=\"md\" />\r\n         <ClearSale\r\n            clearSale={clearSale.id}\r\n            initialAmount={clearSale.amount}\r\n            onClose={() => setClearSale((prev) => ({ ...prev, id: null }))}\r\n            size=\"md\"\r\n         />\r\n      </>\r\n   );\r\n};\r\n\r\nexport default MangeSales;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\nav\\index.js",["633"],"import React, { Fragment, useState } from 'react';\r\nimport SideBar from './SideBar';\r\nimport NavHader from './NavHader';\r\nimport Header from './Header';\r\nimport ChatBox from '../ChatBox';\r\n\r\nconst JobieNav = ({ title }) => {\r\n   const [toggle, setToggle] = useState('');\r\n   const onClick = (name) => setToggle(toggle === name ? '' : name);\r\n   return (\r\n      <>\r\n         <NavHader />\r\n         <SideBar />\r\n         <Header\r\n            onNote={() => onClick('chatbox')}\r\n            onNotification={() => onClick('notification')}\r\n            onProfile={() => onClick('profile')}\r\n            toggle={toggle}\r\n            title={title}\r\n            onBox={() => onClick('box')}\r\n         />\r\n         {/* <ChatBox onClick={() => onClick('chatbox')} toggle={toggle} /> */}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default JobieNav;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\Button.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\modals\\manage-employee\\index.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\Pagination.js",["634","635"],"import cls from 'classnames';\r\nimport { useState } from 'react';\r\nimport { AiOutlineDoubleLeft, AiOutlineDoubleRight, AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\r\nimport Select from './Select';\r\n\r\nconst getOption = (v) => ({ value: v, label: v });\r\nconst options = [getOption(5), getOption(10), getOption(25)];\r\n\r\nconst PaginationItem = ({\r\n   children,\r\n   className = '',\r\n   disabled,\r\n   first = false,\r\n   last = false,\r\n   active = false,\r\n   ...props\r\n}) => (\r\n   <li\r\n      {...props}\r\n      className={cls(\r\n         'tw-transition-all tw-cursor-pointer tw-flex tw-items-center tw-text-[#7E7E7E] tw-px-[12px] tw-py-[6px] tw-bg-white tw-border tw-border-solid',\r\n         className,\r\n         { 'tw-border-[#44bdec] tw-bg-[#44bdec] tw-text-white': active },\r\n         { 'tw-cursor-not-allowed': disabled },\r\n         { 'hover:tw-border-[#44bdec] hover:tw-bg-[#44bdec] hover:tw-text-white': !disabled },\r\n         { 'tw-rounded-l-md': first },\r\n         { 'tw-rounded-r-md': last }\r\n      )}\r\n   >\r\n      {children}\r\n   </li>\r\n);\r\n\r\nconst FirstPage = (props) => (\r\n   <PaginationItem first {...props}>\r\n      <AiOutlineDoubleLeft />\r\n   </PaginationItem>\r\n);\r\n\r\nconst PrevPage = (props) => (\r\n   <PaginationItem {...props}>\r\n      <AiOutlineLeft />\r\n   </PaginationItem>\r\n);\r\n\r\nconst EllipsisPage = (props) => (\r\n   <PaginationItem disabled {...props}>\r\n      ...\r\n   </PaginationItem>\r\n);\r\n\r\nconst NextPage = (props) => (\r\n   <PaginationItem {...props}>\r\n      <AiOutlineRight />\r\n   </PaginationItem>\r\n);\r\n\r\nconst LastPage = (props) => (\r\n   <PaginationItem last {...props}>\r\n      <AiOutlineDoubleRight />\r\n   </PaginationItem>\r\n);\r\n\r\nconst Page = ({ children, ...props }) => <PaginationItem {...props}>{children}</PaginationItem>;\r\n\r\nconst Pagination = ({\r\n   isDisabled = false,\r\n   page,\r\n   onPageChange,\r\n   onLimitChange,\r\n   totalPages,\r\n   hasNextPage,\r\n   hasPrevPage,\r\n   totalDocs,\r\n}) => {\r\n   const [option, setOption] = useState(getOption(5));\r\n\r\n   const renderPagination = () => {\r\n      const pages = [];\r\n\r\n      const handleFirstPage = () => {\r\n         if (page > 1) onPageChange(1);\r\n      };\r\n\r\n      const handlePrevPage = () => {\r\n         if (page > 1) onPageChange((prev) => prev - 1);\r\n      };\r\n\r\n      const handleNextPage = () => {\r\n         if (page < totalPages) onPageChange((prev) => prev + 1);\r\n      };\r\n\r\n      const handleLastPage = () => {\r\n         if (page < totalPages) onPageChange(totalPages);\r\n      };\r\n\r\n      pages.push(<FirstPage disabled={page === 1 || isDisabled} onClick={handleFirstPage} />);\r\n      pages.push(<PrevPage disabled={page === 1 || isDisabled} onClick={handlePrevPage} />);\r\n\r\n      for (let currPage = 0; currPage < totalPages; currPage++) {\r\n         pages.push(\r\n            <Page active={page === currPage + 1} disabled={isDisabled} onClick={() => onPageChange(currPage + 1)}>\r\n               {currPage + 1}\r\n            </Page>\r\n         );\r\n      }\r\n\r\n      pages.push(<NextPage disabled={!hasNextPage || isDisabled} onClick={handleNextPage} />);\r\n      pages.push(<LastPage disabled={!hasNextPage || isDisabled} onClick={handleLastPage} />);\r\n\r\n      return pages;\r\n   };\r\n\r\n   return (\r\n      <div className=\"tw-flex tw-flex-col tw-items-center tw-gap-3 tw-overflow-visible\">\r\n         <p className=\"tw-m-0\">{`Showing ${\r\n            // eslint-disable-next-line no-nested-ternary\r\n            totalPages === page ? totalDocs : page * option.value > totalDocs ? totalDocs : page * option.value\r\n         } of ${totalDocs}`}</p>\r\n         <ul className=\"tw-flex \">{renderPagination()}</ul>\r\n         <Select\r\n            isDisabled={isDisabled}\r\n            className=\"tw-mb-6\"\r\n            options={options}\r\n            placeholder=\"Select Page Size\"\r\n            value={option}\r\n            onChange={(opt) => {\r\n               setOption(opt);\r\n               onLimitChange(opt.value);\r\n            }}\r\n         />\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Pagination;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\modals\\manage-product\\index.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\salaries\\index.js",["636","637","638","639","640"],"import dayjs from 'dayjs';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, useAlert, useQuery } from 'jsx/helpers';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport _ from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, OverlayTrigger, Table, Popover } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setSalariesVisibility } from 'store/actions';\r\nimport swal from 'sweetalert';\r\n\r\nconst Salaries = () => {\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const alert = useAlert();\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const query = useQuery(['salaries', page, limit, sort.field, sort.order], () =>\r\n      get('/salaries', page, limit, sort.field, sort.order)\r\n   );\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   const deleteMutation = useMutation((id) => del(`/salaries/id/${id}`), {\r\n      onSuccess: async () => {\r\n         console.log('updating');\r\n         await queryClient.invalidateQueries('salaries');\r\n         console.log('updated');\r\n         alert.setAlert({\r\n            message: 'Salary deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete salary', err });\r\n      },\r\n   });\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <Card className=\"h-100\">\r\n            <When condition={query.isLoading || deleteMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <Card.Header>\r\n               <Card.Title>Salaries</Card.Title>\r\n               <ButtonGroup className=\"tw-float-right\">\r\n                  <input\r\n                     type=\"text\"\r\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\r\n                     placeholder=\"Search Salaries by Employee...\"\r\n                     // disabled={deleteMutation.isLoading}\r\n                     // onChange={(e) => setSearch(e.target.value)}\r\n                  />\r\n                  <Button\r\n                     size=\"sm\"\r\n                     variant=\"primary\"\r\n                     icon={AiFillPlusCircle}\r\n                     onClick={() => dispatch(setSalariesVisibility(true))}\r\n                  >\r\n                     Add New Salary\r\n                  </Button>\r\n               </ButtonGroup>\r\n            </Card.Header>\r\n            <Card.Body>\r\n               <If condition={query.data?.totalDocs > 0}>\r\n                  <Then>\r\n                     <Table className=\"tw-relative\" responsive>\r\n                        <thead>\r\n                           <tr>\r\n                              <th className=\"width80\">\r\n                                 <strong>#</strong>\r\n                              </th>\r\n                              <th>{getSortingIcon({ label: 'Employee' })}</th>\r\n                              <th>{getSortingIcon({ label: 'Salary', key: 'amount', onSort: handleSort, sort })}</th>\r\n                              <th>{getSortingIcon({ label: 'Date', key: 'createdAt', onSort: handleSort, sort })}</th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {query.data?.docs.map((e, index) => (\r\n                              <tr key={`${e._id}`}>\r\n                                 <td>\r\n                                    <strong>{query.data.pagingCounter + index}</strong>\r\n                                 </td>\r\n                                 <td>{e.employee.name}</td>\r\n                                 <td>\r\n                                    {new Intl.NumberFormat('en-IN', {\r\n                                       maximumSignificantDigits: 3,\r\n                                    }).format(e.amount)}{' '}\r\n                                    PKR\r\n                                 </td>\r\n                                 <td>{dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}</td>\r\n                                 <td>\r\n                                    <div className=\"tw-flex tw-items-center tw-gap-4\">\r\n                                       <OverlayTrigger\r\n                                          trigger={['hover', 'hover']}\r\n                                          placement=\"top\"\r\n                                          overlay={\r\n                                             <Popover className=\"tw-border-gray-500\">\r\n                                                <Popover.Content>\r\n                                                   {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\r\n                                                </Popover.Content>\r\n                                             </Popover>\r\n                                          }\r\n                                       >\r\n                                          <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                       </OverlayTrigger>\r\n                                       <Button\r\n                                          variant=\"danger\"\r\n                                          size=\"sm\"\r\n                                          icon={AiFillDelete}\r\n                                          onClick={() => handleOnClickDelete(e._id)}\r\n                                       >\r\n                                          Delete\r\n                                       </Button>\r\n                                    </div>\r\n                                 </td>\r\n                              </tr>\r\n                           ))}\r\n                        </tbody>\r\n                     </Table>\r\n                  </Then>\r\n                  <Else>\r\n                     <When condition={!query.isLoading}>\r\n                        <p className=\"tw-m-0\">No salaries found</p>\r\n                     </When>\r\n                  </Else>\r\n               </If>\r\n            </Card.Body>\r\n         </Card>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default React.memo(Salaries);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\PageTitle.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\expenseTypes\\index.js",["641","642"],"import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport { useFormik } from 'formik';\r\nimport Button from 'jsx/components/Button';\r\nimport ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport React, { useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport swal from 'sweetalert';\r\n\r\nconst ExpenseTypes = (props) => {\r\n   dayjs.extend(relativeTime);\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n\r\n   const [showModal, setShowModal] = useState(false);\r\n\r\n   const alert = useAlert();\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['expenses/types', page, limit, sort.field, sort.order], () =>\r\n      get('/expenses/types', page, limit, sort.field, sort.order)\r\n   );\r\n   const deleteMutation = useMutation((id) => del(`/expenses/types/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('expenses/types');\r\n         alert.setAlert({\r\n            message: 'Expense type deleted successfully.',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete Expense type.', err });\r\n      },\r\n   });\r\n\r\n   const postMutation = useMutation((payload) => post('/expenses/types', payload), {\r\n      onSuccess: () => {\r\n         setShowModal(false);\r\n         query.refetch();\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add Expense type.', err });\r\n      },\r\n   });\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         title: '',\r\n      },\r\n      validateOnChange: false,\r\n      validateOnBlur: false,\r\n      onSubmit: (values) => {\r\n         postMutation.mutate(values);\r\n      },\r\n   });\r\n\r\n   const handleOnClickAdd = () => {\r\n      setShowModal(true);\r\n      formik.setFieldValue('title', '');\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   return (\r\n      <>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <Card className=\"h-100\">\r\n            <When condition={query.isLoading || deleteMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <Card.Header>\r\n               <Card.Title>Manage Types</Card.Title>\r\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                  Add New Expense Type\r\n               </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n               <If condition={query.data?.length > 0}>\r\n                  <Then>\r\n                     <Table className=\"tw-relative\" responsive>\r\n                        <thead>\r\n                           <tr>\r\n                              <th className=\"width80\">\r\n                                 <strong>#</strong>\r\n                              </th>\r\n                              <th className=\"tw-cursor-pointer\" onClick={() => handleSort('title')}>\r\n                                 <strong className=\"tw-cursor-pointer\">\r\n                                    TITLE\r\n                                    <span>\r\n                                       <When condition={sort.field !== 'title'}>\r\n                                          <FaSort className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                       <When condition={sort.field === 'title' && sort.order === -1}>\r\n                                          <FaSortDown className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                       <When condition={sort.field === 'title' && sort.order === 1}>\r\n                                          <FaSortUp className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                    </span>\r\n                                 </strong>\r\n                              </th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {query.data?.map((e, index) => (\r\n                              <tr key={`${e._id}`}>\r\n                                 <td>\r\n                                    <strong>{index + 1}</strong>\r\n                                 </td>\r\n                                 <td>{e.title}</td>\r\n                                 <td>\r\n                                    <OverlayTrigger\r\n                                       trigger={['hover', 'hover']}\r\n                                       placement=\"top\"\r\n                                       overlay={\r\n                                          <Popover className=\"tw-border-gray-500\">\r\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                   : dayjs(e.createdAt).fromNow()\r\n                                             }.`}</Popover.Content>\r\n                                          </Popover>\r\n                                       }\r\n                                    >\r\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                    </OverlayTrigger>\r\n                                 </td>\r\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                    <td>\r\n                                       <ButtonGroup>\r\n                                          <Button\r\n                                             variant=\"danger\"\r\n                                             size=\"sm\"\r\n                                             icon={AiFillDelete}\r\n                                             onClick={() => handleOnClickDelete(e._id)}\r\n                                          />\r\n                                       </ButtonGroup>\r\n                                    </td>\r\n                                 </When>\r\n                              </tr>\r\n                           ))}\r\n                        </tbody>\r\n                     </Table>\r\n                  </Then>\r\n                  <Else>\r\n                     <When condition={!query.isLoading}>\r\n                        <p className=\"tw-m-0\">No types found</p>\r\n                     </When>\r\n                  </Else>\r\n               </If>\r\n            </Card.Body>\r\n         </Card>\r\n\r\n         {/* ADD Modal */}\r\n         <ModalWrapper\r\n            show={showModal}\r\n            onHide={() => {\r\n               setShowModal(false);\r\n            }}\r\n            title=\"Add New Expense Type\"\r\n            isLoading={query.isLoading || postMutation.isLoading}\r\n            size=\"md\"\r\n            onSubmit={formik.handleSubmit}\r\n            submitButtonText=\"Confirm\"\r\n         >\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-6\">\r\n                     <label className=\"col-form-label\">Title</label>\r\n                     <input\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        value={formik.values.title}\r\n                     />\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(ExpenseTypes));\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\getSortingIcon.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\add-sale\\receipt.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\validations.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\add-sale\\sale-info.js",["643","644","645","646"],"import FormField from 'jsx/components/FormField';\r\nimport React, { useEffect } from 'react';\r\nimport { defaultSelectStyles } from 'jsx/components/Select';\r\nimport Select from 'react-select';\r\n\r\nimport { api, useQuery } from 'jsx/helpers';\r\nimport { useFormikContext } from 'formik';\r\nimport _cloneDeep from 'lodash/cloneDeep';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { GET_ALL_PRODUCTS } from '../queries';\r\nimport { createSelectProductOption } from '../utils';\r\n\r\nconst selectTypeOptions = ['Dine-in', 'Takeaway', 'Delivery'].map((_type) => ({ label: _type, value: _type }));\r\n\r\nconst SaleInfo = () => {\r\n   const products = useQuery('ALL-PRODUCTS', GET_ALL_PRODUCTS);\r\n   const { values, setFieldValue } = useFormikContext();\r\n   const selectedProducts = values.products;\r\n\r\n   useEffect(() => {\r\n      if (values.discount > 100) setFieldValue('discount', 100);\r\n   }, [values.discount]);\r\n\r\n   const handleSelectProduct = (product) => {\r\n      const productId = product._id;\r\n\r\n      const _selectedProducts = _cloneDeep(selectedProducts);\r\n\r\n      const existingProductIndexInCart = _selectedProducts.findIndex((_product) => _product._id === productId);\r\n      if (existingProductIndexInCart !== -1) _selectedProducts[existingProductIndexInCart].quantity++;\r\n      else _selectedProducts.push({ _id: productId, quantity: 1 });\r\n\r\n      localStorage.setItem('cartProducts', JSON.stringify(_selectedProducts));\r\n      setFieldValue('products', _selectedProducts);\r\n   };\r\n\r\n   const handleSelectSaleType = (opt) => {\r\n      const _isDelivery = opt.value === 'Delivery';\r\n      if (_isDelivery) setFieldValue('deliveryCharges', 100);\r\n      else if (values.deliveryCharges) setFieldValue('deliveryCharges', undefined);\r\n      setFieldValue('saleType', opt.value);\r\n   };\r\n\r\n   const isDelivery = values.saleType === 'Delivery';\r\n\r\n   return (\r\n      <>\r\n         <Row>\r\n            <FormField column={6} name=\"saleType\" label=\"Type\">\r\n               {() => (\r\n                  <Select\r\n                     styles={defaultSelectStyles}\r\n                     value={selectTypeOptions.find((opt) => opt.value === values.saleType)}\r\n                     onChange={handleSelectSaleType}\r\n                     options={selectTypeOptions}\r\n                  />\r\n               )}\r\n            </FormField>\r\n            {isDelivery && (\r\n               <FormField type=\"number\" column={6} name=\"deliveryCharges\" label=\"Delivery Charges\" isRequired />\r\n            )}\r\n         </Row>\r\n         <Row>\r\n            <FormField column={6} name=\"products\" label=\"Search Products\" isRequired>\r\n               {() => (\r\n                  <Select\r\n                     styles={defaultSelectStyles}\r\n                     value={null}\r\n                     onChange={handleSelectProduct}\r\n                     options={products.data?.docs || []}\r\n                     getOptionLabel={(_product) => _product.name}\r\n                     getOptionValue={(_product) => _product._id}\r\n                  />\r\n               )}\r\n            </FormField>\r\n            <FormField type=\"number\" min={0} max={100} column={6} name=\"discount\" label=\"Discount\" isRequired />\r\n         </Row>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default SaleInfo;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\inventories\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\expenses\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\salaries\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\customers\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\suppliers\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\employees\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\products\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\types\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\store\\units\\actions.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\add-sale\\cart-grid.js",["647","648"],"import { useFormikContext } from 'formik';\r\nimport Button from 'jsx/components/Button';\r\nimport { useQuery } from 'jsx/helpers';\r\nimport React, { forwardRef, useEffect, useMemo, useState } from 'react';\r\nimport { ButtonGroup, Table } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport _cloneDeep from 'lodash/cloneDeep';\r\nimport { currencyFormatter } from 'jsx/helpers/misc';\r\nimport { GET_ALL_PRODUCTS } from '../queries';\r\nimport Receipt from './receipt';\r\n\r\nconst ResultRow = ({ subtotal, isDelivery, deliveryCharges, discountPercentage, absoluteDiscount, total }) => {\r\n   const getDiscount = () => {\r\n      if (!discountPercentage) return 'NONE';\r\n      if (discountPercentage >= 100) return 'FULL';\r\n      return `${discountPercentage}% - ${currencyFormatter.format(absoluteDiscount)}`;\r\n   };\r\n   const getTotal = () => {\r\n      if (discountPercentage >= 100) return 'FREE';\r\n      return currencyFormatter.format(total);\r\n   };\r\n   const getDeliveryCharges = () => {\r\n      if (!deliveryCharges) return 'NONE';\r\n      return currencyFormatter.format(deliveryCharges);\r\n   };\r\n   return (\r\n      <>\r\n         <tr>\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td>\r\n               <strong>SUBTOTAL</strong>\r\n            </td>\r\n            <td>\r\n               <strong>{currencyFormatter.format(subtotal)}</strong>\r\n            </td>\r\n            <td />\r\n         </tr>\r\n         <tr>\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td>\r\n               <strong>DISCOUNT</strong>\r\n            </td>\r\n            <td>\r\n               <strong>{getDiscount()}</strong>\r\n            </td>\r\n            <td />\r\n         </tr>\r\n         {isDelivery && (\r\n            <tr>\r\n               <td />\r\n               <td />\r\n               <td />\r\n               <td>\r\n                  <strong>DELIVERY CHARGES</strong>\r\n               </td>\r\n               <td>\r\n                  <strong>{getDeliveryCharges()}</strong>\r\n               </td>\r\n               <td />\r\n            </tr>\r\n         )}\r\n         <tr>\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td>\r\n               <strong>TOTAL</strong>\r\n            </td>\r\n            <td>\r\n               <strong>{getTotal()}</strong>\r\n            </td>\r\n            <td />\r\n         </tr>\r\n      </>\r\n   );\r\n};\r\n\r\nconst _CartGrid = ({ generatedSaleId }, ref) => {\r\n   const { values, setFieldValue } = useFormikContext();\r\n\r\n   const products = useQuery('ALL-PRODUCTS', GET_ALL_PRODUCTS);\r\n\r\n   const selectedProducts = useMemo(() => {\r\n      const cartProducts = values.products;\r\n      return cartProducts.map((elm) => {\r\n         const _cartProduct = _cloneDeep(elm);\r\n         const populatedProduct = (products.data?.docs || []).find((_product) => _product._id === _cartProduct._id);\r\n         if (!populatedProduct) return undefined;\r\n\r\n         delete _cartProduct._id;\r\n\r\n         // eslint-disable-next-line no-shadow\r\n         const subtotal = _cartProduct.quantity * populatedProduct.price;\r\n         return { ..._cartProduct, product: populatedProduct, subtotal };\r\n      });\r\n   }, [products.data?.docs, values.products]);\r\n\r\n   const { subtotal, absoluteDiscount, total } = useMemo(() => {\r\n      const subtotals = [0, 0, ...selectedProducts.filter(Boolean).map((_product) => _product.subtotal)];\r\n      // eslint-disable-next-line no-shadow\r\n      const subtotal = subtotals.reduce((a, b) => a + b, 0);\r\n      const discountPercentage = values.discount;\r\n\r\n      const deliveryCharges = values.deliveryCharges || 0;\r\n\r\n      // eslint-disable-next-line no-shadow\r\n      let total = subtotal + deliveryCharges;\r\n      // eslint-disable-next-line no-shadow\r\n      let absoluteDiscount = 0;\r\n      if (discountPercentage) {\r\n         absoluteDiscount = Math.floor(subtotal * (discountPercentage / 100));\r\n         total -= absoluteDiscount;\r\n      }\r\n      return { subtotal, absoluteDiscount, total: Math.floor(total) };\r\n   }, [selectedProducts, values.deliveryCharges, values.discount]);\r\n\r\n   const draftAndSave = (productId, callback) => {\r\n      const _cartProducts = _cloneDeep(values.products);\r\n      const productIndex = _cartProducts.findIndex((_product) => _product._id === productId);\r\n      if (productIndex === -1) return;\r\n      callback(_cartProducts, { productIndex });\r\n\r\n      localStorage.setItem('cartProducts', JSON.stringify(_cartProducts));\r\n      setFieldValue('products', _cartProducts);\r\n   };\r\n\r\n   const deleteProduct = (_products, index) => _products.splice(index, 1);\r\n\r\n   const handleDecrement = (productId) => {\r\n      draftAndSave(productId, (_cartProducts, { productIndex }) => {\r\n         const product = _cartProducts[productIndex];\r\n         if (product.quantity <= 1) return deleteProduct(_cartProducts, productIndex);\r\n         product.quantity--;\r\n      });\r\n   };\r\n\r\n   const handleIncrement = (productId) => {\r\n      draftAndSave(productId, (_cartProducts, { productIndex }) => {\r\n         const product = _cartProducts[productIndex];\r\n         product.quantity++;\r\n      });\r\n   };\r\n\r\n   const handleDiscard = (productId) => {\r\n      draftAndSave(productId, (_cartProducts, { productIndex }) => deleteProduct(_cartProducts, productIndex));\r\n   };\r\n\r\n   useEffect(() => {\r\n      const existingCartProducts = JSON.parse(localStorage.getItem('cartProducts') || '[]');\r\n      if (existingCartProducts.length > 0) setFieldValue('products', existingCartProducts);\r\n   }, []);\r\n\r\n   const isCartEmpty = selectedProducts.filter(Boolean).length <= 0;\r\n\r\n   return (\r\n      <>\r\n         <Table className=\"tw-relative\" responsive>\r\n            <thead>\r\n               <tr>\r\n                  <th className=\"width80\">\r\n                     <strong>#</strong>\r\n                  </th>\r\n                  <th>Product</th>\r\n                  <th>Price</th>\r\n                  <th>Quantity</th>\r\n                  <th>Subtotal</th>\r\n                  <th>\r\n                     <strong>Actions</strong>\r\n                  </th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               {(selectedProducts || []).filter(Boolean).map((e, index) => (\r\n                  <tr key={`selected-product-${e.product._id}`}>\r\n                     <td>\r\n                        <strong>{index + 1}</strong>\r\n                     </td>\r\n                     <td>{e.product.name}</td>\r\n                     <td>{currencyFormatter.format(e.product.price)}</td>\r\n                     <td>{e.quantity}</td>\r\n                     <td>{currencyFormatter.format(e.subtotal)}</td>\r\n                     <td>\r\n                        <div className=\"tw-flex tw-gap-3\">\r\n                           <ButtonGroup>\r\n                              <Button size=\"sm\" variant=\"light\" onClick={() => handleDecrement(e.product._id)}>\r\n                                 -\r\n                              </Button>\r\n                              <Button size=\"sm\" variant=\"light\" onClick={() => handleIncrement(e.product._id)}>\r\n                                 +\r\n                              </Button>\r\n                           </ButtonGroup>\r\n                           <Button size=\"sm\" variant=\"danger\" onClick={() => handleDiscard(e.product._id)}>\r\n                              Discard\r\n                           </Button>\r\n                        </div>\r\n                     </td>\r\n                  </tr>\r\n               ))}\r\n               <When condition={!isCartEmpty}>\r\n                  <ResultRow\r\n                     subtotal={subtotal}\r\n                     discountPercentage={values.discount}\r\n                     absoluteDiscount={absoluteDiscount}\r\n                     isDelivery={values.saleType === 'Delivery'}\r\n                     deliveryCharges={values.deliveryCharges}\r\n                     total={total}\r\n                  />\r\n               </When>\r\n            </tbody>\r\n         </Table>\r\n         <When condition={isCartEmpty}>\r\n            <p className=\"tw-m-0\">Cart is empty</p>\r\n         </When>\r\n         <Receipt\r\n            saleId={generatedSaleId}\r\n            saleType={values.saleType}\r\n            subtotal={subtotal}\r\n            discountPercentage={values.discount}\r\n            absoluteDiscount={absoluteDiscount}\r\n            deliveryCharges={values.deliveryCharges}\r\n            total={total}\r\n            products={(selectedProducts || []).filter(Boolean)}\r\n            ref={ref}\r\n         />\r\n      </>\r\n   );\r\n};\r\n\r\nconst CartGrid = forwardRef(_CartGrid);\r\n\r\nexport default CartGrid;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\queries.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\queries.js",["649"],"import { api } from 'jsx/helpers';\r\n\r\nexport const GET_EMPLOYEES = ({ queryKey: [key, params] }) => api.get('/employees', { params }).then((res) => res.data);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\queries.js",["650"],"import { api } from 'jsx/helpers';\r\n\r\nexport const GET_PRODUCTS = ({ queryKey: [key, params] }) => api.get('/products', { params }).then((res) => res.data);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\purchase\\ManagePurchase.js",["651","652","653","654","655","656","657","658","659","660"],"import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport produce from 'immer';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, getV2, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport getQuantity from 'jsx/helpers/getQuantity';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _, { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport ClearPurchase from './ClearPurchase';\r\nimport RefundPurchase from './RefundPurchase';\r\n\r\nconst ManagePurchase = ({ startDate, endDate, ...props }) => {\r\n   const [refundPurchase, setRefundPurchase] = useState(null);\r\n   const [clearPurchase, setClearPurchase] = useState({ id: null, amount: null });\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const history = useHistory();\r\n\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n\r\n   const query = useQuery(['purchases', page, limit, sort.field, sort.order, startDate, endDate], () =>\r\n      getV2('/purchases', { page, limit, sort: { [sort.field]: sort.order }, startDate, endDate })\r\n   );\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   const deleteMutation = useMutation((id) => del(`/purchases/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('purchases');\r\n         alert.setAlert({\r\n            message: 'Purchase deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete purchase', err });\r\n      },\r\n   });\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const handleEdit = (id) => {\r\n      history.push({ pathname: `/purchase/add`, state: { purchaseId: id } });\r\n   };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   return (\r\n      <>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Purchase</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>{getSortingIcon({ label: 'Supplier' })}</th>\r\n                                    <th>{getSortingIcon({ label: 'Products' })}</th>\r\n                                    <th>\r\n                                       {getSortingIcon({\r\n                                          label: 'Price',\r\n                                          key: 'totalSourcePrice',\r\n                                          onSort: handleSort,\r\n                                          sort,\r\n                                       })}\r\n                                    </th>\r\n                                    <th>\r\n                                       {getSortingIcon({\r\n                                          label: 'Paid',\r\n                                          key: 'paid',\r\n                                          onSort: handleSort,\r\n                                          sort,\r\n                                       })}\r\n                                    </th>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e) => {\r\n                                    const getId = () => {\r\n                                       const id = e._id;\r\n                                       return id.slice(id.length - 4);\r\n                                    };\r\n\r\n                                    const getProducts = () => {\r\n                                       const products = [];\r\n\r\n                                       e.products.forEach((d, i) => {\r\n                                          products.push(\r\n                                             <>\r\n                                                <b>{`${d.product.modelNumber} - ${d.sourcePrice} PKR`}</b>\r\n                                                {d.variants ? (\r\n                                                   <>\r\n                                                      <br />\r\n                                                      {Object.entries(d.variants).map(([key, value]) => (\r\n                                                         <span className=\"tw-mr-4\">{`${key.toUpperCase()}: ${getQuantity(\r\n                                                            value\r\n                                                         )}`}</span>\r\n                                                      ))}\r\n                                                   </>\r\n                                                ) : (\r\n                                                   <>\r\n                                                      <br />\r\n                                                      {getQuantity(d.quantity)}\r\n                                                   </>\r\n                                                )}\r\n                                             </>\r\n                                          );\r\n                                          if (i < e.products.length - 1) products.push(<br />);\r\n                                       });\r\n\r\n                                       return products;\r\n                                    };\r\n\r\n                                    return (\r\n                                       <tr\r\n                                          key={`${e._id}`}\r\n                                          className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\r\n                                       >\r\n                                          <td>\r\n                                             <strong className={e.isRemaining && 'tw-text-gray-50'}>{getId()}</strong>\r\n                                          </td>\r\n                                          <td>{e.supplier?.name}</td>\r\n                                          <td>{getProducts()}</td>\r\n                                          <td>{`${new Intl.NumberFormat('en-IN', {\r\n                                             maximumSignificantDigits: 3,\r\n                                          }).format(e.totalSourcePrice)} PKR`}</td>\r\n                                          <td>{`${new Intl.NumberFormat('en-IN', {\r\n                                             maximumSignificantDigits: 3,\r\n                                          }).format(e.paid)} PKR`}</td>\r\n                                          <td>\r\n                                             <div className=\"tw-flex tw-items-center tw-gap-4\">\r\n                                                <OverlayTrigger\r\n                                                   trigger={['hover', 'hover']}\r\n                                                   placement=\"top\"\r\n                                                   overlay={\r\n                                                      <Popover className=\"tw-border-gray-500\">\r\n                                                         <Popover.Content>\r\n                                                            {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\r\n                                                         </Popover.Content>\r\n                                                      </Popover>\r\n                                                   }\r\n                                                >\r\n                                                   <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                                </OverlayTrigger>\r\n                                                <ButtonGroup>\r\n                                                   <Button\r\n                                                      variant=\"light\"\r\n                                                      size=\"sm\"\r\n                                                      icon={AiFillEdit}\r\n                                                      onClick={() => handleEdit(e._id)}\r\n                                                   >\r\n                                                      Edit\r\n                                                   </Button>\r\n                                                   <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                                      <Button\r\n                                                         variant=\"danger\"\r\n                                                         size=\"sm\"\r\n                                                         icon={AiFillDelete}\r\n                                                         onClick={() => handleOnClickDelete(e._id)}\r\n                                                      >\r\n                                                         Delete\r\n                                                      </Button>\r\n                                                   </When>\r\n                                                </ButtonGroup>\r\n                                             </div>\r\n                                          </td>\r\n                                       </tr>\r\n                                    );\r\n                                 })}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading}>\r\n                              <p className=\"tw-m-0\">No purchases created</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\r\n            />\r\n         </When>\r\n         <RefundPurchase refundPurchase={refundPurchase} onClose={() => setRefundPurchase(null)} size=\"md\" />\r\n         <ClearPurchase\r\n            clearPurchase={clearPurchase.id}\r\n            initialAmount={clearPurchase.amount}\r\n            onClose={() => setClearPurchase((prev) => ({ ...prev, id: null }))}\r\n            size=\"md\"\r\n         />\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePurchase);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\useQuery.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\server.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\useAlert.js",["661"],"import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport cls from 'classnames';\r\nimport { getError } from './server';\r\n\r\nexport const useAlert = () => {\r\n   const [isShowing, setIsShowing] = useState(false);\r\n   const [message, setMessage] = useState('');\r\n   const [variant, setVariant] = useState('success');\r\n\r\n   const callback = useRef(null);\r\n   const timeout = useRef(null);\r\n\r\n   // eslint-disable-next-line arrow-body-style\r\n   useEffect(() => {\r\n      return () => {\r\n         if (timeout.current) clearTimeout(timeout.current);\r\n      };\r\n   }, []);\r\n\r\n   const resetTimeout = useCallback((duration) => {\r\n      if (timeout.current) clearTimeout(timeout.current);\r\n      timeout.current = setTimeout(() => {\r\n         setIsShowing(false);\r\n         timeout.current = null;\r\n         if (callback.current) callback.current();\r\n      }, duration);\r\n   }, []);\r\n\r\n   const getAlert = useCallback(\r\n      () =>\r\n         isShowing ? (\r\n            <Alert\r\n               className=\"alert-dismissible fade show\"\r\n               variant={variant}\r\n               dismissible\r\n               onClose={() => setIsShowing(false)}\r\n            >\r\n               <p className={cls(`tw-m-0 tw-opacity-60`, { 'tw-text-black': variant === 'success' })}>{message}</p>\r\n            </Alert>\r\n         ) : null,\r\n      [isShowing, message, variant]\r\n   );\r\n\r\n   const setAlert = useCallback(\r\n      ({ message: msg = '', variant: v = 'success', callback: cb = null, duration: d = 3000 }) => {\r\n         callback.current = cb;\r\n         resetTimeout(d);\r\n         setIsShowing(true);\r\n         setMessage(msg);\r\n         setVariant(v);\r\n      },\r\n      [resetTimeout]\r\n   );\r\n\r\n   const setErrorAlert = useCallback(\r\n      ({ message: msg = 'Unable to dispatch action', err, callback: cb = null, duration: d = 6000 }) => {\r\n         resetTimeout(d);\r\n         const m = (\r\n            <>\r\n               <strong>{msg}</strong>\r\n               <br />\r\n               {getError(err).map((e, i, a) => (\r\n                  <React.Fragment key={`error-${i}`}>\r\n                     <p className=\"tw-m-0\">{e}</p>\r\n                     {i < a.length - 2 ? <br /> : null}\r\n                  </React.Fragment>\r\n               ))}\r\n            </>\r\n         );\r\n\r\n         callback.current = cb;\r\n         setIsShowing(true);\r\n         setMessage(m);\r\n         setVariant('danger');\r\n      },\r\n      [resetTimeout]\r\n   );\r\n\r\n   const alert = useMemo(() => ({ getAlert, setAlert, setErrorAlert }), [getAlert, setAlert, setErrorAlert]);\r\n\r\n   return alert;\r\n};\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\queries.js",["662"],"import { api } from 'jsx/helpers';\r\n\r\nexport const GET_ALL_PRODUCTS = () =>\r\n   api.get('/products', { params: { page: 1, limit: 10000, sort: { _id: -1 }, search: '' } }).then((res) => res.data);\r\n\r\nexport const GET_SALE = ({ queryKey: [key, params] }) => api.get('/sales', { params }).then((res) => res.data);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\nav\\SideBar.js",["663","664","665","666"],"/// Menu\r\nimport MetisMenu from 'metismenujs';\r\nimport React, { Component, useEffect, memo } from 'react';\r\n/// Scroll\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n/// Link\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\n\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { setLogin } from 'store/auth/actions';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\n\r\n/// Active menu\r\nconst manage = ['/employees', '/customers', '/products', '/users', '/types', '/units'];\r\n\r\nclass MM extends Component {\r\n   componentDidMount() {\r\n      this.$el = this.el;\r\n      this.mm = new MetisMenu(this.$el);\r\n   }\r\n\r\n   componentWillUnmount() {\r\n      this.mm.dispose();\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"mm-wrapper\">\r\n            <ul className=\"metismenu\" ref={(el) => (this.el = el)}>\r\n               {this.props.children}\r\n            </ul>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nconst SideBar = (props) => {\r\n   const { pathname: path } = useLocation();\r\n   const isCashier = useSelector((state) => state.auth.user.role === 'CASHIER');\r\n\r\n   useEffect(() => {\r\n      const btn = document.querySelector('.nav-control');\r\n      const aaa = document.querySelector('#main-wrapper');\r\n\r\n      function toggleFunc() {\r\n         return aaa.classList.toggle('menu-toggle');\r\n      }\r\n\r\n      btn.addEventListener('click', toggleFunc);\r\n   }, []);\r\n\r\n   return (\r\n      <div className=\"deznav\">\r\n         <PerfectScrollbar className=\"deznav-scroll\">\r\n            <MM className=\"metismenu\" id=\"menu\">\r\n               <When condition={!isCashier}>\r\n                  <li className={path === '/dashboard' ? 'mm-active' : ''}>\r\n                     <Link className=\"\" to=\"/dashboard\" aria-expanded=\"false\">\r\n                        <i className=\"flaticon-381-networking\" />\r\n                        <span className=\"nav-text\">Dashboard</span>\r\n                     </Link>\r\n                  </li>\r\n               </When>\r\n               <li className={path === '/products' ? 'mm-active' : ''}>\r\n                  <Link className=\"\" to=\"/products\" aria-expanded=\"false\">\r\n                     <i className=\"flaticon-381-box\" />\r\n                     <span className=\"nav-text\">Products</span>\r\n                  </Link>\r\n               </li>\r\n               {/* <li className={`${manage.includes(path.slice(1)) ? 'mm-active' : ''}`}>\r\n                  <Link className=\"has-arrow ai-icon color\" aria-expanded=\"false\">\r\n                     <i className=\"flaticon-381-notepad\" />\r\n                     <span className=\"nav-text\">Manage</span>\r\n                  </Link>\r\n                  <ul aria-expanded=\"false\">\r\n                     <li className={path === '/products' ? 'mm-active' : ''}>\r\n                        <Link to=\"/products\">Products</Link>\r\n                     </li>\r\n                     <li>\r\n                        <Link to=\"/suppliers\">Suppliers</Link>\r\n                     </li>\r\n                     <li>\r\n                        <Link to=\"/customers\">Customers</Link>\r\n                     </li>\r\n                     <li>\r\n                        <Link to=\"/app-calender\">Users</Link>\r\n                     </li>\r\n                     <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                        <li>\r\n                           <Link to=\"/users\">Users</Link>\r\n                        </li>\r\n                        <li>\r\n                           <Link to=\"/employees\">Employees</Link>\r\n                        </li>\r\n                     </When>\r\n                  </ul>\r\n               </li> */}\r\n               {/* <li className={path === '/purchase' ? 'mm-active' : ''}>\r\n                  <Link className=\"\" to=\"/purchase\" aria-expanded=\"false\">\r\n                     <i className=\"flaticon-381-more\" />\r\n                     <span className=\"nav-text\">Purchase</span>\r\n                  </Link>\r\n               </li> */}\r\n               <li className={path === '/sale' ? 'mm-active' : ''}>\r\n                  <Link className=\"\" to=\"/sale\" aria-expanded=\"false\">\r\n                     <i className=\"flaticon-381-notepad\" />\r\n                     <span className=\"nav-text\">Sale</span>\r\n                  </Link>\r\n               </li>\r\n               {!isCashier && (\r\n                  <li className={path === '/users' ? 'mm-active' : ''}>\r\n                     <Link className=\"\" to=\"/users\" aria-expanded=\"false\">\r\n                        <i className=\"flaticon-381-user\" />\r\n                        <span className=\"nav-text\">Users</span>\r\n                     </Link>\r\n                  </li>\r\n               )}\r\n            </MM>\r\n         </PerfectScrollbar>\r\n      </div>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setLogin: (payload) => dispatch(setLogin(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(SideBar));\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\nav\\NavHader.js",["667","668"],"import React, { useState } from 'react';\r\n\r\n/// React router dom\r\nimport { Link } from 'react-router-dom';\r\n\r\n/// images\r\nimport logo from '../../../images/logo.png';\r\nimport logoText from '../../../images/logo-text.png';\r\n\r\nconst NavHader = () => {\r\n   const [toggle, setToggle] = useState(false);\r\n   return (\r\n      <div className=\"nav-header\">\r\n         <Link to=\"/\" className=\"brand-logo\">\r\n            {/* <img className=\"logo-abbr\" src={logo} alt=\"\" />\r\n            <img className=\"logo-compact\" src={logoText} alt=\"\" /> */}\r\n            {/* <img className=\"brand-title\" src={logoText} alt=\"\" /> */}\r\n            <h1 className=\"brand-title tw-text-2xl tw-text-black tw-font-bold\">Frosty Bites N Sips</h1>\r\n         </Link>\r\n\r\n         <div className=\"nav-control\" role=\"button\" tabIndex=\"0\" onClick={() => setToggle(!toggle)}>\r\n            <div className={`hamburger ${toggle ? 'is-active' : ''}`}>\r\n               <span className=\"line\" />\r\n               <span className=\"line\" />\r\n               <span className=\"line\" />\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default NavHader;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\ChatBox.js",["669"],"import React, { useState } from 'react';\r\n\r\n/// Scroll\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\nconst ChatBox = ({ onClick, toggle }) => {\r\n   const [toggleTab, settoggleTab] = useState(window.location.hash.slice(1) ? window.location.hash.slice(1) : 'chat');\r\n\r\n   const dataToggle = [\r\n      { href: '#notes', name: 'Notes' },\r\n      { href: '#alerts', name: 'Alerts' },\r\n      { href: '#chat', name: 'Chat' },\r\n   ];\r\n\r\n   return (\r\n      <div className={`chatbox ${toggle === 'chatbox' ? 'active' : ''}`}>\r\n         <div className=\"chatbox-close\" label=\"chatbox-close\" role=\"button\" tabIndex=\"0\" onClick={() => onClick()} />\r\n         <div className=\"custom-tab-1\">\r\n            <ul className=\"nav nav-tabs\">\r\n               {dataToggle.map((data, i) => (\r\n                  <li className=\"nav-item\" key={i}>\r\n                     <a\r\n                        className={`nav-link ${toggleTab === data.name.toLocaleLowerCase() ? 'active' : ''}`}\r\n                        data-toggle=\"tab\"\r\n                        href={data.href}\r\n                        onClick={() => settoggleTab(data.name.toLocaleLowerCase())}\r\n                     >\r\n                        {data.name}\r\n                     </a>\r\n                  </li>\r\n               ))}\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n               {/* <Chat PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} />\r\n               <Notes PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} />\r\n               <Alerts PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} /> */}\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default ChatBox;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\layouts\\nav\\Header.js",["670","671","672","673","674","675"],"import React from 'react';\r\n/// Image\r\nimport Avatar from 'react-avatar';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { setLogin, setLogout } from 'store/auth/actions';\r\n\r\nconst pages = [\r\n   { path: '/dashboard', label: 'Dashboard' },\r\n   { path: '/inventory', label: 'Inventory' },\r\n\r\n   { path: '/products', label: 'Products' },\r\n   { path: '/suppliers', label: 'Suppliers' },\r\n   { path: '/customers', label: 'Customers' },\r\n   { path: '/users', label: 'Users' },\r\n   { path: '/employees', label: 'Employees' },\r\n   { path: '/purchase', label: 'Purchase' },\r\n   { path: '/sale', label: 'Sale' },\r\n   { path: '/expenses', label: 'Expenses' },\r\n];\r\n\r\nconst Header = ({ onNote, toggle, onProfile, setUser, onNotification, onBox, logout }) => {\r\n   const history = useHistory();\r\n   const path = window.location.pathname;\r\n   const finalName = pages.find((p) => path.includes(p.path))?.label;\r\n   const dispatch = useDispatch();\r\n\r\n   const handleLogout = () => {\r\n      localStorage.clear();\r\n      logout();\r\n      setUser({});\r\n   };\r\n\r\n   React.useEffect(() => {\r\n      const token = localStorage.getItem('auth_token');\r\n      if (!token) {\r\n         logout();\r\n         localStorage.clear();\r\n         history.push('/page-login');\r\n      }\r\n   }, []);\r\n\r\n   return (\r\n      <div className=\"header\">\r\n         <div className=\"header-content\">\r\n            <nav className=\"navbar navbar-expand\">\r\n               <div className=\"collapse navbar-collapse justify-content-between\">\r\n                  <div className=\"header-left\">\r\n                     <div className=\"dashboard_bar\" style={{ textTransform: 'capitalize' }}>\r\n                        {finalName || 'Dashboard'}\r\n                     </div>\r\n                  </div>\r\n                  <ul className=\"navbar-nav header-right\">\r\n                     <li className=\"nav-item dropdown header-profile\">\r\n                        <Link\r\n                           to=\"#\"\r\n                           role=\"button\"\r\n                           data-toggle=\"dropdown\"\r\n                           className={`nav-item dropdown header-profile ${toggle === 'profile' ? 'show' : ''}`}\r\n                           onClick={() => onProfile()}\r\n                        >\r\n                           {/* <img alt=\"Profile\" src={profile} width={20} /> */}\r\n                           <Avatar name=\"Foo Bar\" size=\"38\" textSizeRatio={2.9} round />\r\n                        </Link>\r\n                        <div className={`dropdown-menu dropdown-menu-right ${toggle === 'profile' ? 'show' : ''}`}>\r\n                           <Link to=\"/\" className=\"dropdown-item ai-icon\" onClick={handleLogout}>\r\n                              <svg\r\n                                 id=\"icon-logout\"\r\n                                 xmlns=\"http://www.w3.org/2000/svg\"\r\n                                 className=\"text-danger\"\r\n                                 width={18}\r\n                                 height={18}\r\n                                 viewBox=\"0 0 24 24\"\r\n                                 fill=\"none\"\r\n                                 stroke=\"currentColor\"\r\n                                 strokeWidth={2}\r\n                                 strokeLinecap=\"round\"\r\n                                 strokeLinejoin=\"round\"\r\n                              >\r\n                                 <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\r\n                                 <polyline points=\"16 17 21 12 16 7\" />\r\n                                 <line x1={21} y1={12} x2={9} y2={12} />\r\n                              </svg>\r\n                              <span className=\"ml-2\">Logout </span>\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                  </ul>\r\n               </div>\r\n            </nav>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setUser: (payload) => dispatch(setLogin(payload)),\r\n   logout: () => dispatch(setLogout()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\modals\\manage-employee\\manage-employee.modal.js",["676","677","678","679","680","681","682"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useRef, useMemo } from 'react';\r\nimport { batch, useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { api, getV2, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport { setEmployeesData, setEmployeesVisibility, setProductsData, setProductsVisibility } from 'store/actions';\r\nimport { Formik } from 'formik';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { When } from 'react-if';\r\nimport { handleFormError } from 'jsx/helpers/misc';\r\nimport { toast } from 'react-toastify';\r\nimport ManageProductForm from './manage-employee-form';\r\nimport { employeeSchema } from '../../validations';\r\n\r\nconst ManageEmployeeModal = () => {\r\n   const state = useSelector((s) => s.employees);\r\n   const dispatch = useDispatch();\r\n\r\n   const nameInputRef = useRef();\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const editingProductId = state.data._id;\r\n   const isEditing = !!editingProductId;\r\n\r\n   const createMutation = useMutation((payload) => post('/employees', payload));\r\n   const editMutation = useMutation((payload) => api.patch(`/employees/id/${editingProductId}`, payload));\r\n\r\n   const mutation = useMemo(\r\n      () => (isEditing ? editMutation : createMutation),\r\n      [createMutation, editMutation, isEditing]\r\n   );\r\n\r\n   const handleSubmit = (values, { resetForm, setErrors }) => {\r\n      mutation.mutate(values, {\r\n         onSuccess: async () => {\r\n            dispatch(setEmployeesVisibility(false));\r\n            dispatch(setEmployeesData({}));\r\n            toast.success(`Employee has been ${isEditing ? 'edited' : 'created'} successfully`);\r\n            return queryClient.invalidateQueries('employees').then(resetForm);\r\n         },\r\n         onError: handleFormError(setErrors),\r\n      });\r\n   };\r\n\r\n   const handleShow = () => {\r\n      nameInputRef.current.focus();\r\n   };\r\n\r\n   const shouldShowSpinner = mutation.isLoading;\r\n\r\n   return (\r\n      <Formik\r\n         enableReinitialize\r\n         validateOnBlur={false}\r\n         validateOnChange={false}\r\n         validateOnMount={false}\r\n         validationSchema={employeeSchema}\r\n         onSubmit={handleSubmit}\r\n         initialValues={{\r\n            name: state.data.name ?? '',\r\n            mobile: state.data.mobile ?? '',\r\n            salary: state.data.salary ?? null,\r\n         }}\r\n      >\r\n         {({ resetForm }) => {\r\n            const handleHide = () => {\r\n               resetForm();\r\n               batch(() => {\r\n                  dispatch(setEmployeesData({}));\r\n                  dispatch(setEmployeesVisibility(false));\r\n               });\r\n            };\r\n\r\n            return (\r\n               <ModalWrapper\r\n                  show={state.visible}\r\n                  title={isEditing ? 'Edit Employee' : 'Add New Employee'}\r\n                  isLoading={shouldShowSpinner}\r\n                  onShow={handleShow}\r\n                  onHide={handleHide}\r\n                  includeFormikForm\r\n               >\r\n                  <When condition={shouldShowSpinner}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <ManageProductForm ref={nameInputRef} />\r\n               </ModalWrapper>\r\n            );\r\n         }}\r\n      </Formik>\r\n   );\r\n};\r\n\r\nexport default ManageEmployeeModal;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\modals\\manage-product\\manage-product.modal.js",["683","684","685","686","687","688","689","690","691"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useRef, useMemo } from 'react';\r\nimport { batch, useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { api, getV2, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport {\r\n   setProductsData,\r\n   setProductsVisibility,\r\n   setTypesData,\r\n   setTypesVisibility,\r\n   setUnitsData,\r\n   setUnitsVisibility,\r\n} from 'store/actions';\r\nimport { Formik } from 'formik';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { When } from 'react-if';\r\nimport { handleFormError } from 'jsx/helpers/misc';\r\nimport { toast } from 'react-toastify';\r\nimport ManageProductForm from './manage-product-form';\r\nimport { productShema } from '../../validations';\r\n\r\nconst ManageProductModal = () => {\r\n   const state = useSelector((s) => s.products);\r\n   const dispatch = useDispatch();\r\n\r\n   const nameInputRef = useRef();\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const editingProductId = state.data._id;\r\n   const isEditing = !!editingProductId;\r\n\r\n   const createMutation = useMutation((payload) => post('/products', payload));\r\n   const editMutation = useMutation((payload) => api.patch(`/products/id/${editingProductId}`, payload));\r\n\r\n   const mutation = useMemo(\r\n      () => (isEditing ? editMutation : createMutation),\r\n      [createMutation, editMutation, isEditing]\r\n   );\r\n\r\n   const handleSubmit = (values, { resetForm, setErrors }) => {\r\n      mutation.mutate(values, {\r\n         onSuccess: async () => {\r\n            dispatch(setProductsVisibility(false));\r\n            dispatch(setProductsData({}));\r\n            toast.success(`Product has been ${isEditing ? 'edited' : 'created'} successfully`);\r\n            return queryClient.invalidateQueries('products').then(resetForm);\r\n         },\r\n         onError: handleFormError(setErrors),\r\n      });\r\n   };\r\n\r\n   const handleShow = () => {\r\n      nameInputRef.current.focus();\r\n   };\r\n\r\n   const shouldShowSpinner = mutation.isLoading;\r\n\r\n   return (\r\n      <Formik\r\n         enableReinitialize\r\n         validateOnBlur={false}\r\n         validateOnChange={false}\r\n         validateOnMount={false}\r\n         validationSchema={productShema}\r\n         onSubmit={handleSubmit}\r\n         initialValues={{\r\n            name: state.data.name ?? '',\r\n            price: state.data.price ?? null,\r\n            tags: state.data.tags || [],\r\n         }}\r\n      >\r\n         {({ resetForm }) => {\r\n            const handleHide = () => {\r\n               resetForm();\r\n               batch(() => {\r\n                  dispatch(setProductsData({}));\r\n                  dispatch(setProductsVisibility(false));\r\n               });\r\n            };\r\n\r\n            return (\r\n               <ModalWrapper\r\n                  show={state.visible}\r\n                  title={isEditing ? 'Edit Product' : 'Add New Product'}\r\n                  isLoading={shouldShowSpinner}\r\n                  onShow={handleShow}\r\n                  onHide={handleHide}\r\n                  includeFormikForm\r\n               >\r\n                  <When condition={shouldShowSpinner}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <ManageProductForm ref={nameInputRef} />\r\n               </ModalWrapper>\r\n            );\r\n         }}\r\n      </Formik>\r\n   );\r\n};\r\n\r\nexport default ManageProductModal;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\misc.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\DeleteButton.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\EditButton.js",["692"],"import React from 'react';\r\nimport { AiFillDelete, AiFillEdit } from 'react-icons/ai';\r\n// eslint-disable-next-line import/no-named-as-default\r\nimport Button from './Button';\r\n\r\nconst EditButton = ({ size = 'sm', children = 'Edit', onClick }) => (\r\n   <Button variant=\"secondary\" size={size} icon={AiFillEdit} onClick={onClick}>\r\n      {children}\r\n   </Button>\r\n);\r\n\r\nexport default EditButton;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\GenericTableHeadingSorter.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\sale\\utils.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\TableSearch.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\FormField.js",["693"],"/* eslint-disable react/display-name */\r\nimport { ErrorMessage, Field, useFormikContext } from 'formik';\r\nimport React, { forwardRef } from 'react';\r\nimport cls from 'classnames';\r\nimport { When } from 'react-if';\r\nimport FormikField from './FormikField';\r\n\r\nconst FormField = forwardRef(\r\n   (\r\n      {\r\n         containerClassName = '',\r\n         labelClassName = '',\r\n         inputClassName = '',\r\n         label = '',\r\n         name = '',\r\n         children,\r\n         isRequired = false,\r\n         column = 12,\r\n         ...restProps\r\n      },\r\n      ref\r\n   ) => {\r\n      const { errors } = useFormikContext();\r\n      const fieldError = errors[name];\r\n\r\n      return (\r\n         <div className={cls(`form-group col-xl-${column}`, containerClassName)}>\r\n            <label htmlFor={name} className={cls('col-form-label', labelClassName)}>\r\n               {label}{' '}\r\n               <When condition={isRequired}>\r\n                  <span className=\"text-danger\">*</span>\r\n               </When>\r\n            </label>\r\n            {children ? (\r\n               <Field name={name}>{children}</Field>\r\n            ) : (\r\n               <FormikField\r\n                  ref={ref}\r\n                  name={name}\r\n                  className={cls('form-control', inputClassName, { 'is-invalid': !!fieldError })}\r\n                  {...restProps}\r\n               />\r\n            )}\r\n            <When condition={!!fieldError}>\r\n               <div className=\"invalid-feedback\">{fieldError}</div>\r\n            </When>\r\n         </div>\r\n      );\r\n   }\r\n);\r\n\r\nexport default FormField;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\validations.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\modals\\manage-product\\manage-product-form.js",["694","695"],"import { Field } from 'formik';\r\nimport FormField from 'jsx/components/FormField';\r\nimport React, { forwardRef } from 'react';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport SelectTags from './select-tags';\r\n\r\nconst _ManageProductForm = ({ ...restProps }, ref) => (\r\n   <div className=\"row\">\r\n      <FormField ref={ref} label=\"Name\" name=\"name\" isRequired />\r\n      <FormField type=\"number\" label=\"Price\" name=\"price\" isRequired />\r\n      <SelectTags />\r\n      {/* <div className=\"form-group col-xl-12\">\r\n         <label className=\"col-form-label\">Type</label>\r\n         {!types.isLoading && !types.isError && (\r\n            <CreatableSelect\r\n               onChange={(type) => formik.setFieldValue('type', type.value)}\r\n               options={types.data?.map((type) => ({ label: type.title, value: type }))}\r\n               onCreateOption={(title) => {\r\n                  dispatch(setTypesData({ title }));\r\n                  dispatch(setTypesVisibility(true));\r\n               }}\r\n            />\r\n         )}\r\n      </div>\r\n      <div className=\"form-group col-xl-12\">\r\n         <label className=\"col-form-label\">Unit</label>\r\n         <CreatableSelect\r\n            width=\"tw-w-full\"\r\n            onChange={(unit) => formik.setFieldValue('unit', unit.value)}\r\n            options={units.data?.map((unit) => ({ label: unit.title, value: unit }))}\r\n            onCreateOption={(title) => {\r\n               dispatch(setUnitsData({ title }));\r\n               dispatch(setUnitsVisibility(true));\r\n            }}\r\n            //    options={units.data?.map((e) => ({ label: e.title, value: e }))}\r\n         />\r\n      </div> */}\r\n   </div>\r\n);\r\n\r\nconst ManageProductForm = forwardRef(_ManageProductForm);\r\n\r\nexport default ManageProductForm;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\validations.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\employees\\modals\\manage-employee\\manage-employee-form.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\components\\FormikField.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\modals\\manage-product\\select-tags.js",["696","697","698"],"import { useFormikContext } from 'formik';\r\nimport FormField from 'jsx/components/FormField';\r\nimport { api, get, useAlert, useQuery } from 'jsx/helpers';\r\nimport React, { useState } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { useSelector } from 'react-redux';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport _cloneDeep from 'lodash/cloneDeep';\r\nimport { defaultSelectStyles } from 'jsx/components/Select';\r\nimport { createSelectTagOption } from '../../utils';\r\n\r\nconst SelectTags = (props) => {\r\n   const { setFieldValue, values } = useFormikContext();\r\n   const fieldValue = values.tags || [];\r\n\r\n   const alert = useAlert();\r\n   const alertMarkup = alert.getAlert();\r\n   const [createdTag, setCreatedTag] = useState(null);\r\n\r\n   const queryClient = useQueryClient();\r\n   const isModalVisible = useSelector((s) => s.products.visible);\r\n\r\n   const tagsQuery = useQuery(['TAGS'], () => api.get('/tags').then((res) => res.data), {\r\n      enabled: !!isModalVisible,\r\n      onSuccess: () => {\r\n         console.log('onSuccess tags', createdTag, fieldValue);\r\n         if (createdTag) {\r\n            const _selectedTags = _cloneDeep(fieldValue);\r\n            _selectedTags.push(createdTag._id);\r\n\r\n            setFieldValue('tags', _selectedTags);\r\n            setCreatedTag(null);\r\n         }\r\n      },\r\n   });\r\n\r\n   const createTagMutation = useMutation((payload) => api.post('/tags', payload).then((res) => res.data));\r\n\r\n   const selectOptions = (tagsQuery.data || []).map(createSelectTagOption);\r\n\r\n   const handleChange = (tags) => {\r\n      if (!tags || tags.length <= 0) return setFieldValue('tags', []);\r\n      const correspondingTagIds = tags.map((_tag) => _tag.value);\r\n      setFieldValue('tags', correspondingTagIds);\r\n   };\r\n\r\n   const getSelectedTags = () => {\r\n      if (tagsQuery.isLoading || tagsQuery.data?.length <= 0 || fieldValue.length <= 0) return [];\r\n      return tagsQuery.data.filter((_tag) => fieldValue.includes(_tag._id)).map(createSelectTagOption);\r\n   };\r\n\r\n   const selectedTags = getSelectedTags();\r\n\r\n   const handleCreateTag = (tagName) => {\r\n      createTagMutation.mutate(\r\n         { name: tagName },\r\n         {\r\n            onSuccess: (_createdTag) => {\r\n               setCreatedTag(_createdTag);\r\n               return queryClient.invalidateQueries('TAGS');\r\n            },\r\n            onError: (err) => alert.setErrorAlert({ message: 'Unable to add tag', err }),\r\n         }\r\n      );\r\n   };\r\n\r\n   return (\r\n      <>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <FormField label=\"Tags\" name=\"tags\">\r\n            {() => (\r\n               <CreatableSelect\r\n                  isMulti\r\n                  styles={defaultSelectStyles}\r\n                  value={selectedTags}\r\n                  isLoading={tagsQuery.isLoading}\r\n                  options={selectOptions}\r\n                  onChange={handleChange}\r\n                  onCreateOption={handleCreateTag}\r\n               />\r\n            )}\r\n         </FormField>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default SelectTags;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\products\\utils.js",[],"C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\purchase\\RefundPurchase.js",["699","700","701","702","703","704","705","706","707"],"import produce from 'immer';\r\nimport ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport Select from 'jsx/components/Select';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, getV2, put, useAlert, useQuery } from 'jsx/helpers';\r\nimport _, { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst RefundPurchase = ({ refundPurchase, toggle, onClose, onOpen, ...props }) => {\r\n   const queryClient = useQueryClient();\r\n\r\n   const alert = useAlert();\r\n\r\n   const [refund, setRefund] = useState([]);\r\n\r\n   const purchase = useQuery(\r\n      ['refund-purchase', refundPurchase],\r\n      () => getV2(`/purchases/id/${refundPurchase}`, { page: 1, limit: 1000 }),\r\n      {\r\n         enabled: false,\r\n         onSuccess: (data) => {\r\n            const refunds = data.products.map(({ product }) => {\r\n               const returned = {};\r\n               returned.product = product._id;\r\n\r\n               if (product.type.title.toLowerCase() === 'tile') returned.variants = { a: '', b: '', c: '', d: '' };\r\n               else returned.quantity = '';\r\n\r\n               return returned;\r\n            });\r\n            if (!refund.length) setRefund(refunds);\r\n         },\r\n      }\r\n   );\r\n\r\n   const mutation = useMutation((payload) => put(`/purchases/${refundPurchase}/refund`, payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('purchases');\r\n         onClose();\r\n         setRefund([]);\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to refund purchase', err });\r\n      },\r\n   });\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleChangeQuantity = (index, q) => {\r\n      const updatedRefund = produce(refund, (draft) => {\r\n         draft[index].quantity = q;\r\n      });\r\n      setRefund(updatedRefund);\r\n   };\r\n\r\n   const handleChangeVariantQuantity = (index, variant, q) => {\r\n      const updatedRefund = produce(refund, (draft) => {\r\n         draft[index].variants[variant] = q;\r\n      });\r\n      setRefund(updatedRefund);\r\n   };\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n\r\n      const referenceRefund = _.cloneDeep(refund);\r\n\r\n      const payload = [];\r\n\r\n      referenceRefund.forEach((r) => {\r\n         if (r.quantity) payload.push(r);\r\n         if (r.variants) {\r\n            const variants = _.cloneDeep(r.variants);\r\n            Object.entries(variants).forEach(([key, value]) => {\r\n               if (!value) delete variants[key];\r\n            });\r\n\r\n            if (Object.keys(variants).length) {\r\n               r.variants = variants;\r\n               payload.push(r);\r\n            }\r\n         }\r\n      });\r\n\r\n      mutation.mutate(payload);\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (refundPurchase) {\r\n         console.log('hitting get one purchase');\r\n         purchase.refetch();\r\n      }\r\n   }, [refundPurchase]);\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={refundPurchase}\r\n            onHide={() => {\r\n               if (!mutation.isLoading || !purchase.isLoading) {\r\n                  onClose();\r\n                  setRefund([]);\r\n               }\r\n            }}\r\n            isLoading={mutation.isLoading || purchase.isLoading}\r\n            isDisabled={mutation.isLoading || purchase.isLoading}\r\n            title=\"Refund Purchase\"\r\n            onSubmit={handleSubmit}\r\n            submitButtonText=\"Refund\"\r\n            size=\"xl\"\r\n            {...props}\r\n         >\r\n            {alertMarkup ? (\r\n               <Row>\r\n                  <Col lg={12}>{alertMarkup}</Col>\r\n               </Row>\r\n            ) : null}\r\n            <form onSubmit={handleSubmit}>\r\n               {purchase.data?.products.map((product, index) => {\r\n                  const isVarianted = product.variants;\r\n                  return (\r\n                     <div className=\"form-group\" key={`product-${index}`}>\r\n                        <label className=\"col-form-label\">Product</label>\r\n                        <div className=\"tw-flex\">\r\n                           <input\r\n                              className=\"form-control\"\r\n                              type=\"text\"\r\n                              value={product.product.modelNumber}\r\n                              style={{ flex: isVarianted ? 1 : 2 }}\r\n                              disabled\r\n                           />\r\n                           {isVarianted ? (\r\n                              <div className=\"tw-flex\" style={{ flex: 3 }}>\r\n                                 <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"A\"\r\n                                    value={refund[index]?.variants.a}\r\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'a', e.target.value)}\r\n                                 />\r\n                                 <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"B\"\r\n                                    value={refund[index]?.variants.b}\r\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'b', e.target.value)}\r\n                                 />\r\n                                 <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"C\"\r\n                                    value={refund[index]?.variants.c}\r\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'c', e.target.value)}\r\n                                 />\r\n                                 <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"D\"\r\n                                    value={refund[index]?.variants.d}\r\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'd', e.target.value)}\r\n                                 />\r\n                              </div>\r\n                           ) : (\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 style={{ flex: 1 }}\r\n                                 type=\"text\"\r\n                                 name=\"modelNumber\"\r\n                                 placeholder=\"Quantity\"\r\n                                 value={refund[index]?.quantity}\r\n                                 onChange={(e) => handleChangeQuantity(index, e.target.value)}\r\n                              />\r\n                           )}\r\n                        </div>\r\n                     </div>\r\n                  );\r\n               })}\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default RefundPurchase;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\pages\\purchase\\ClearPurchase.js",["708","709","710","711","712"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport Select from 'jsx/components/Select';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, post, put, useAlert, useQuery } from 'jsx/helpers';\r\nimport { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\n\r\nconst ClearPurchase = ({ initialAmount, clearPurchase, toggle, onClose, onOpen, ...props }) => {\r\n   const [amount, setAmount] = useState(0);\r\n\r\n   useEffect(() => setAmount(initialAmount), [initialAmount]);\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const alert = useAlert();\r\n\r\n   const clearMutation = useMutation((payload) => post(`/purchases/pay/id/${clearPurchase}/amount/${payload}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('purchases');\r\n         onClose();\r\n         setAmount(0);\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to clear purchase', err });\r\n      },\r\n   });\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={clearPurchase}\r\n            onHide={() => {\r\n               onClose();\r\n               setAmount(0);\r\n            }}\r\n            isLoading={clearMutation.isLoading}\r\n            title=\"Clear Purchase\"\r\n            onSubmit={() => {\r\n               clearMutation.mutate(amount);\r\n            }}\r\n            submitButtonText=\"Clear\"\r\n            size=\"xl\"\r\n            {...props}\r\n         >\r\n            <When condition={clearMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alertMarkup ? (\r\n               <Row>\r\n                  <Col lg={12}>{alertMarkup}</Col>\r\n               </Row>\r\n            ) : null}\r\n            <Form onSubmit={() => clearMutation.mutate(amount)}>\r\n               <Form.Group>\r\n                  <Form.Label>Amount</Form.Label>\r\n                  <Form.Control type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\r\n               </Form.Group>\r\n            </Form>\r\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default ClearPurchase;\r\n","C:\\Users\\Muneeb\\dev\\frosty-bites-v2\\app\\src\\jsx\\helpers\\getQuantity.js",["713"],"import { Fragment } from 'react';\r\n\r\n/* eslint-disable prefer-destructuring */\r\nexport default (array) => {\r\n   if (!array) return null;\r\n   if (array[0] > 0) return `${array[0]} Units`;\r\n   return `${array[1]} ${array[1] > 0 ? 'Singles' : ''}`;\r\n};\r\n",{"ruleId":"714","replacedBy":"715"},{"ruleId":"716","replacedBy":"717"},{"ruleId":"718","replacedBy":"719"},{"ruleId":"720","replacedBy":"721"},{"ruleId":"722","replacedBy":"723"},{"ruleId":"724","severity":1,"message":"725","line":17,"column":4,"nodeType":null,"messageId":"726","endLine":17,"endColumn":5,"fix":"727"},{"ruleId":"724","severity":1,"message":"725","line":19,"column":1,"nodeType":null,"messageId":"726","endLine":19,"endColumn":2,"fix":"728"},{"ruleId":"724","severity":1,"message":"725","line":20,"column":4,"nodeType":null,"messageId":"726","endLine":20,"endColumn":5,"fix":"729"},{"ruleId":"724","severity":1,"message":"725","line":21,"column":1,"nodeType":null,"messageId":"726","endLine":21,"endColumn":2,"fix":"730"},{"ruleId":"724","severity":1,"message":"725","line":23,"column":4,"nodeType":null,"messageId":"726","endLine":23,"endColumn":5,"fix":"731"},{"ruleId":"724","severity":1,"message":"732","line":24,"column":1,"nodeType":null,"messageId":"726","endLine":24,"endColumn":3,"fix":"733"},{"ruleId":"724","severity":1,"message":"734","line":25,"column":10,"nodeType":null,"messageId":"726","endLine":25,"endColumn":13,"fix":"735"},{"ruleId":"724","severity":1,"message":"732","line":26,"column":1,"nodeType":null,"messageId":"726","endLine":26,"endColumn":3,"fix":"736"},{"ruleId":"724","severity":1,"message":"725","line":27,"column":1,"nodeType":null,"messageId":"726","endLine":27,"endColumn":2,"fix":"737"},{"ruleId":"738","severity":1,"message":"739","line":1,"column":33,"nodeType":"740","messageId":"741","endLine":1,"endColumn":40},{"ruleId":"738","severity":1,"message":"742","line":24,"column":7,"nodeType":"740","messageId":"741","endLine":24,"endColumn":16},{"ruleId":"738","severity":1,"message":"743","line":27,"column":7,"nodeType":"740","messageId":"741","endLine":27,"endColumn":15},{"ruleId":"738","severity":1,"message":"744","line":49,"column":10,"nodeType":"740","messageId":"741","endLine":49,"endColumn":19},{"ruleId":"745","severity":1,"message":"746","line":49,"column":22,"nodeType":"747","messageId":"748","endLine":49,"endColumn":32},{"ruleId":"738","severity":1,"message":"749","line":1,"column":20,"nodeType":"740","messageId":"741","endLine":1,"endColumn":24},{"ruleId":"738","severity":1,"message":"750","line":7,"column":10,"nodeType":"740","messageId":"741","endLine":7,"endColumn":19},{"ruleId":"751","severity":1,"message":"752","line":49,"column":7,"nodeType":"753","endLine":49,"endColumn":9,"suggestions":"754"},{"ruleId":"738","severity":1,"message":"755","line":152,"column":28,"nodeType":"740","messageId":"741","endLine":152,"endColumn":32},{"ruleId":"738","severity":1,"message":"756","line":21,"column":16,"nodeType":"740","messageId":"741","endLine":21,"endColumn":19},{"ruleId":"738","severity":1,"message":"757","line":4,"column":8,"nodeType":"740","messageId":"741","endLine":4,"endColumn":23},{"ruleId":"738","severity":1,"message":"758","line":5,"column":10,"nodeType":"740","messageId":"741","endLine":5,"endColumn":13},{"ruleId":"738","severity":1,"message":"759","line":5,"column":15,"nodeType":"740","messageId":"741","endLine":5,"endColumn":20},{"ruleId":"738","severity":1,"message":"760","line":5,"column":38,"nodeType":"740","messageId":"741","endLine":5,"endColumn":46},{"ruleId":"738","severity":1,"message":"761","line":6,"column":8,"nodeType":"740","messageId":"741","endLine":6,"endColumn":14},{"ruleId":"751","severity":1,"message":"762","line":46,"column":7,"nodeType":"753","endLine":46,"endColumn":22,"suggestions":"763"},{"ruleId":"738","severity":1,"message":"764","line":1,"column":17,"nodeType":"740","messageId":"741","endLine":1,"endColumn":21},{"ruleId":"738","severity":1,"message":"765","line":5,"column":8,"nodeType":"740","messageId":"741","endLine":5,"endColumn":14},{"ruleId":"751","severity":1,"message":"766","line":32,"column":7,"nodeType":"753","endLine":32,"endColumn":14,"suggestions":"767"},{"ruleId":"738","severity":1,"message":"768","line":61,"column":26,"nodeType":"740","messageId":"741","endLine":61,"endColumn":31},{"ruleId":"738","severity":1,"message":"758","line":4,"column":15,"nodeType":"740","messageId":"741","endLine":4,"endColumn":18},{"ruleId":"738","severity":1,"message":"769","line":8,"column":46,"nodeType":"740","messageId":"741","endLine":8,"endColumn":53},{"ruleId":"738","severity":1,"message":"770","line":8,"column":55,"nodeType":"740","messageId":"741","endLine":8,"endColumn":69},{"ruleId":"738","severity":1,"message":"771","line":9,"column":36,"nodeType":"740","messageId":"741","endLine":9,"endColumn":45},{"ruleId":"738","severity":1,"message":"772","line":9,"column":47,"nodeType":"740","messageId":"741","endLine":9,"endColumn":63},{"ruleId":"738","severity":1,"message":"773","line":9,"column":65,"nodeType":"740","messageId":"741","endLine":9,"endColumn":88},{"ruleId":"738","severity":1,"message":"774","line":16,"column":10,"nodeType":"740","messageId":"741","endLine":16,"endColumn":16},{"ruleId":"738","severity":1,"message":"775","line":16,"column":18,"nodeType":"740","messageId":"741","endLine":16,"endColumn":28},{"ruleId":"738","severity":1,"message":"776","line":16,"column":30,"nodeType":"740","messageId":"741","endLine":16,"endColumn":38},{"ruleId":"738","severity":1,"message":"750","line":19,"column":10,"nodeType":"740","messageId":"741","endLine":19,"endColumn":19},{"ruleId":"738","severity":1,"message":"777","line":20,"column":8,"nodeType":"740","messageId":"741","endLine":20,"endColumn":11},{"ruleId":"738","severity":1,"message":"778","line":22,"column":8,"nodeType":"740","messageId":"741","endLine":22,"endColumn":17},{"ruleId":"738","severity":1,"message":"779","line":26,"column":10,"nodeType":"740","messageId":"741","endLine":26,"endColumn":17},{"ruleId":"738","severity":1,"message":"780","line":29,"column":17,"nodeType":"740","messageId":"741","endLine":29,"endColumn":24},{"ruleId":"781","severity":1,"message":"782","line":83,"column":7,"nodeType":"747","messageId":"783","endLine":83,"endColumn":18},{"ruleId":"745","severity":1,"message":"784","line":158,"column":44,"nodeType":"747","messageId":"748","endLine":158,"endColumn":54},{"ruleId":"738","severity":1,"message":"785","line":2,"column":10,"nodeType":"740","messageId":"741","endLine":2,"endColumn":18},{"ruleId":"738","severity":1,"message":"786","line":2,"column":20,"nodeType":"740","messageId":"741","endLine":2,"endColumn":25},{"ruleId":"738","severity":1,"message":"787","line":2,"column":27,"nodeType":"740","messageId":"741","endLine":2,"endColumn":38},{"ruleId":"738","severity":1,"message":"771","line":5,"column":10,"nodeType":"740","messageId":"741","endLine":5,"endColumn":19},{"ruleId":"738","severity":1,"message":"788","line":6,"column":10,"nodeType":"740","messageId":"741","endLine":6,"endColumn":17},{"ruleId":"738","severity":1,"message":"789","line":15,"column":8,"nodeType":"740","messageId":"741","endLine":15,"endColumn":22},{"ruleId":"738","severity":1,"message":"790","line":16,"column":8,"nodeType":"740","messageId":"741","endLine":16,"endColumn":19},{"ruleId":"738","severity":1,"message":"791","line":1,"column":8,"nodeType":"740","messageId":"741","endLine":1,"endColumn":13},{"ruleId":"738","severity":1,"message":"792","line":2,"column":8,"nodeType":"740","messageId":"741","endLine":2,"endColumn":20},{"ruleId":"738","severity":1,"message":"793","line":3,"column":8,"nodeType":"740","messageId":"741","endLine":3,"endColumn":15},{"ruleId":"738","severity":1,"message":"794","line":5,"column":8,"nodeType":"740","messageId":"741","endLine":5,"endColumn":18},{"ruleId":"738","severity":1,"message":"795","line":6,"column":8,"nodeType":"740","messageId":"741","endLine":6,"endColumn":22},{"ruleId":"738","severity":1,"message":"796","line":7,"column":10,"nodeType":"740","messageId":"741","endLine":7,"endColumn":13},{"ruleId":"738","severity":1,"message":"758","line":7,"column":15,"nodeType":"740","messageId":"741","endLine":7,"endColumn":18},{"ruleId":"738","severity":1,"message":"759","line":7,"column":20,"nodeType":"740","messageId":"741","endLine":7,"endColumn":25},{"ruleId":"738","severity":1,"message":"797","line":7,"column":27,"nodeType":"740","messageId":"741","endLine":7,"endColumn":35},{"ruleId":"738","severity":1,"message":"798","line":7,"column":37,"nodeType":"740","messageId":"741","endLine":7,"endColumn":48},{"ruleId":"738","severity":1,"message":"760","line":7,"column":50,"nodeType":"740","messageId":"741","endLine":7,"endColumn":58},{"ruleId":"738","severity":1,"message":"750","line":8,"column":10,"nodeType":"740","messageId":"741","endLine":8,"endColumn":19},{"ruleId":"738","severity":1,"message":"799","line":9,"column":8,"nodeType":"740","messageId":"741","endLine":9,"endColumn":22},{"ruleId":"738","severity":1,"message":"800","line":11,"column":8,"nodeType":"740","messageId":"741","endLine":11,"endColumn":9},{"ruleId":"738","severity":1,"message":"801","line":11,"column":13,"nodeType":"740","messageId":"741","endLine":11,"endColumn":20},{"ruleId":"738","severity":1,"message":"802","line":12,"column":17,"nodeType":"740","messageId":"741","endLine":12,"endColumn":26},{"ruleId":"738","severity":1,"message":"787","line":13,"column":10,"nodeType":"740","messageId":"741","endLine":13,"endColumn":21},{"ruleId":"738","severity":1,"message":"803","line":13,"column":23,"nodeType":"740","messageId":"741","endLine":13,"endColumn":27},{"ruleId":"738","severity":1,"message":"770","line":13,"column":34,"nodeType":"740","messageId":"741","endLine":13,"endColumn":48},{"ruleId":"738","severity":1,"message":"769","line":13,"column":50,"nodeType":"740","messageId":"741","endLine":13,"endColumn":57},{"ruleId":"738","severity":1,"message":"804","line":13,"column":59,"nodeType":"740","messageId":"741","endLine":13,"endColumn":62},{"ruleId":"738","severity":1,"message":"786","line":13,"column":64,"nodeType":"740","messageId":"741","endLine":13,"endColumn":69},{"ruleId":"738","severity":1,"message":"805","line":15,"column":10,"nodeType":"740","messageId":"741","endLine":15,"endColumn":22},{"ruleId":"738","severity":1,"message":"806","line":15,"column":24,"nodeType":"740","messageId":"741","endLine":15,"endColumn":34},{"ruleId":"738","severity":1,"message":"771","line":15,"column":36,"nodeType":"740","messageId":"741","endLine":15,"endColumn":45},{"ruleId":"738","severity":1,"message":"773","line":15,"column":65,"nodeType":"740","messageId":"741","endLine":15,"endColumn":88},{"ruleId":"738","severity":1,"message":"774","line":16,"column":10,"nodeType":"740","messageId":"741","endLine":16,"endColumn":16},{"ruleId":"738","severity":1,"message":"775","line":16,"column":18,"nodeType":"740","messageId":"741","endLine":16,"endColumn":28},{"ruleId":"738","severity":1,"message":"776","line":16,"column":30,"nodeType":"740","messageId":"741","endLine":16,"endColumn":38},{"ruleId":"738","severity":1,"message":"807","line":17,"column":10,"nodeType":"740","messageId":"741","endLine":17,"endColumn":14},{"ruleId":"738","severity":1,"message":"808","line":17,"column":16,"nodeType":"740","messageId":"741","endLine":17,"endColumn":18},{"ruleId":"738","severity":1,"message":"809","line":17,"column":20,"nodeType":"740","messageId":"741","endLine":17,"endColumn":24},{"ruleId":"738","severity":1,"message":"810","line":17,"column":26,"nodeType":"740","messageId":"741","endLine":17,"endColumn":30},{"ruleId":"738","severity":1,"message":"811","line":18,"column":10,"nodeType":"740","messageId":"741","endLine":18,"endColumn":24},{"ruleId":"738","severity":1,"message":"812","line":21,"column":8,"nodeType":"740","messageId":"741","endLine":21,"endColumn":12},{"ruleId":"738","severity":1,"message":"778","line":22,"column":8,"nodeType":"740","messageId":"741","endLine":22,"endColumn":17},{"ruleId":"738","severity":1,"message":"813","line":23,"column":8,"nodeType":"740","messageId":"741","endLine":23,"endColumn":18},{"ruleId":"738","severity":1,"message":"790","line":24,"column":8,"nodeType":"740","messageId":"741","endLine":24,"endColumn":19},{"ruleId":"738","severity":1,"message":"814","line":27,"column":15,"nodeType":"740","messageId":"741","endLine":27,"endColumn":20},{"ruleId":"738","severity":1,"message":"806","line":14,"column":24,"nodeType":"740","messageId":"741","endLine":14,"endColumn":34},{"ruleId":"738","severity":1,"message":"771","line":14,"column":36,"nodeType":"740","messageId":"741","endLine":14,"endColumn":45},{"ruleId":"738","severity":1,"message":"774","line":15,"column":10,"nodeType":"740","messageId":"741","endLine":15,"endColumn":16},{"ruleId":"738","severity":1,"message":"775","line":15,"column":18,"nodeType":"740","messageId":"741","endLine":15,"endColumn":28},{"ruleId":"738","severity":1,"message":"776","line":15,"column":30,"nodeType":"740","messageId":"741","endLine":15,"endColumn":38},{"ruleId":"738","severity":1,"message":"815","line":22,"column":8,"nodeType":"740","messageId":"741","endLine":22,"endColumn":20},{"ruleId":"738","severity":1,"message":"816","line":57,"column":10,"nodeType":"740","messageId":"741","endLine":57,"endColumn":26},{"ruleId":"738","severity":1,"message":"817","line":5,"column":10,"nodeType":"740","messageId":"741","endLine":5,"endColumn":13},{"ruleId":"738","severity":1,"message":"796","line":5,"column":15,"nodeType":"740","messageId":"741","endLine":5,"endColumn":18},{"ruleId":"738","severity":1,"message":"761","line":2,"column":8,"nodeType":"740","messageId":"741","endLine":2,"endColumn":14},{"ruleId":"738","severity":1,"message":"758","line":4,"column":10,"nodeType":"740","messageId":"741","endLine":4,"endColumn":13},{"ruleId":"738","severity":1,"message":"818","line":4,"column":21,"nodeType":"740","messageId":"741","endLine":4,"endColumn":24},{"ruleId":"738","severity":1,"message":"760","line":4,"column":36,"nodeType":"740","messageId":"741","endLine":4,"endColumn":44},{"ruleId":"738","severity":1,"message":"801","line":5,"column":10,"nodeType":"740","messageId":"741","endLine":5,"endColumn":17},{"ruleId":"738","severity":1,"message":"819","line":9,"column":10,"nodeType":"740","messageId":"741","endLine":9,"endColumn":15},{"ruleId":"738","severity":1,"message":"820","line":3,"column":8,"nodeType":"740","messageId":"741","endLine":3,"endColumn":20},{"ruleId":"738","severity":1,"message":"797","line":5,"column":16,"nodeType":"740","messageId":"741","endLine":5,"endColumn":24},{"ruleId":"738","severity":1,"message":"760","line":5,"column":39,"nodeType":"740","messageId":"741","endLine":5,"endColumn":47},{"ruleId":"738","severity":1,"message":"821","line":14,"column":27,"nodeType":"740","messageId":"741","endLine":14,"endColumn":43},{"ruleId":"738","severity":1,"message":"822","line":20,"column":8,"nodeType":"740","messageId":"741","endLine":20,"endColumn":15},{"ruleId":"738","severity":1,"message":"768","line":14,"column":31,"nodeType":"740","messageId":"741","endLine":14,"endColumn":36},{"ruleId":"738","severity":1,"message":"768","line":18,"column":21,"nodeType":"740","messageId":"741","endLine":18,"endColumn":26},{"ruleId":"738","severity":1,"message":"823","line":1,"column":16,"nodeType":"740","messageId":"741","endLine":1,"endColumn":32},{"ruleId":"781","severity":1,"message":"782","line":31,"column":7,"nodeType":"747","messageId":"783","endLine":31,"endColumn":18},{"ruleId":"738","severity":1,"message":"768","line":35,"column":31,"nodeType":"740","messageId":"741","endLine":35,"endColumn":36},{"ruleId":"738","severity":1,"message":"768","line":40,"column":21,"nodeType":"740","messageId":"741","endLine":40,"endColumn":26},{"ruleId":"738","severity":1,"message":"817","line":5,"column":10,"nodeType":"740","messageId":"741","endLine":5,"endColumn":13},{"ruleId":"738","severity":1,"message":"796","line":5,"column":15,"nodeType":"740","messageId":"741","endLine":5,"endColumn":18},{"ruleId":"738","severity":1,"message":"824","line":8,"column":17,"nodeType":"740","messageId":"741","endLine":8,"endColumn":28},{"ruleId":"738","severity":1,"message":"819","line":9,"column":10,"nodeType":"740","messageId":"741","endLine":9,"endColumn":15},{"ruleId":"738","severity":1,"message":"825","line":14,"column":10,"nodeType":"740","messageId":"741","endLine":14,"endColumn":15},{"ruleId":"738","severity":1,"message":"826","line":16,"column":10,"nodeType":"740","messageId":"741","endLine":16,"endColumn":25},{"ruleId":"738","severity":1,"message":"827","line":16,"column":27,"nodeType":"740","messageId":"741","endLine":16,"endColumn":48},{"ruleId":"738","severity":1,"message":"828","line":18,"column":8,"nodeType":"740","messageId":"741","endLine":18,"endColumn":33},{"ruleId":"738","severity":1,"message":"829","line":20,"column":8,"nodeType":"740","messageId":"741","endLine":20,"endColumn":18},{"ruleId":"738","severity":1,"message":"780","line":30,"column":17,"nodeType":"740","messageId":"741","endLine":30,"endColumn":24},{"ruleId":"738","severity":1,"message":"830","line":34,"column":10,"nodeType":"740","messageId":"741","endLine":34,"endColumn":18},{"ruleId":"738","severity":1,"message":"761","line":2,"column":8,"nodeType":"740","messageId":"741","endLine":2,"endColumn":14},{"ruleId":"738","severity":1,"message":"801","line":5,"column":10,"nodeType":"740","messageId":"741","endLine":5,"endColumn":17},{"ruleId":"738","severity":1,"message":"831","line":10,"column":10,"nodeType":"740","messageId":"741","endLine":10,"endColumn":20},{"ruleId":"738","severity":1,"message":"832","line":12,"column":7,"nodeType":"740","messageId":"741","endLine":12,"endColumn":20},{"ruleId":"738","severity":1,"message":"833","line":19,"column":20,"nodeType":"740","messageId":"741","endLine":19,"endColumn":30},{"ruleId":"781","severity":1,"message":"782","line":34,"column":7,"nodeType":"747","messageId":"783","endLine":34,"endColumn":18},{"ruleId":"781","severity":1,"message":"782","line":35,"column":7,"nodeType":"747","messageId":"783","endLine":35,"endColumn":18},{"ruleId":"751","severity":1,"message":"834","line":59,"column":7,"nodeType":"753","endLine":59,"endColumn":19,"suggestions":"835"},{"ruleId":"738","severity":1,"message":"793","line":3,"column":8,"nodeType":"740","messageId":"741","endLine":3,"endColumn":15},{"ruleId":"738","severity":1,"message":"758","line":7,"column":15,"nodeType":"740","messageId":"741","endLine":7,"endColumn":18},{"ruleId":"738","severity":1,"message":"836","line":10,"column":8,"nodeType":"740","messageId":"741","endLine":10,"endColumn":17},{"ruleId":"738","severity":1,"message":"801","line":11,"column":13,"nodeType":"740","messageId":"741","endLine":11,"endColumn":20},{"ruleId":"738","severity":1,"message":"837","line":13,"column":29,"nodeType":"740","messageId":"741","endLine":13,"endColumn":32},{"ruleId":"738","severity":1,"message":"804","line":13,"column":59,"nodeType":"740","messageId":"741","endLine":13,"endColumn":62},{"ruleId":"738","severity":1,"message":"838","line":14,"column":8,"nodeType":"740","messageId":"741","endLine":14,"endColumn":23},{"ruleId":"738","severity":1,"message":"771","line":15,"column":36,"nodeType":"740","messageId":"741","endLine":15,"endColumn":45},{"ruleId":"738","severity":1,"message":"772","line":15,"column":47,"nodeType":"740","messageId":"741","endLine":15,"endColumn":63},{"ruleId":"738","severity":1,"message":"774","line":16,"column":10,"nodeType":"740","messageId":"741","endLine":16,"endColumn":16},{"ruleId":"738","severity":1,"message":"775","line":16,"column":18,"nodeType":"740","messageId":"741","endLine":16,"endColumn":28},{"ruleId":"738","severity":1,"message":"776","line":16,"column":30,"nodeType":"740","messageId":"741","endLine":16,"endColumn":38},{"ruleId":"738","severity":1,"message":"788","line":19,"column":10,"nodeType":"740","messageId":"741","endLine":19,"endColumn":17},{"ruleId":"738","severity":1,"message":"839","line":134,"column":54,"nodeType":"740","messageId":"741","endLine":134,"endColumn":59},{"ruleId":"738","severity":1,"message":"840","line":5,"column":8,"nodeType":"740","messageId":"741","endLine":5,"endColumn":15},{"ruleId":"738","severity":1,"message":"841","line":46,"column":7,"nodeType":"740","messageId":"741","endLine":46,"endColumn":19},{"ruleId":"738","severity":1,"message":"842","line":73,"column":4,"nodeType":"740","messageId":"741","endLine":73,"endColumn":15},{"ruleId":"738","severity":1,"message":"774","line":11,"column":10,"nodeType":"740","messageId":"741","endLine":11,"endColumn":16},{"ruleId":"738","severity":1,"message":"775","line":11,"column":18,"nodeType":"740","messageId":"741","endLine":11,"endColumn":28},{"ruleId":"738","severity":1,"message":"776","line":11,"column":30,"nodeType":"740","messageId":"741","endLine":11,"endColumn":38},{"ruleId":"781","severity":1,"message":"782","line":44,"column":10,"nodeType":"747","messageId":"783","endLine":44,"endColumn":21},{"ruleId":"781","severity":1,"message":"782","line":46,"column":10,"nodeType":"747","messageId":"783","endLine":46,"endColumn":21},{"ruleId":"738","severity":1,"message":"843","line":20,"column":17,"nodeType":"740","messageId":"741","endLine":20,"endColumn":24},{"ruleId":"738","severity":1,"message":"844","line":21,"column":18,"nodeType":"740","messageId":"741","endLine":21,"endColumn":26},{"ruleId":"738","severity":1,"message":"817","line":6,"column":10,"nodeType":"740","messageId":"741","endLine":6,"endColumn":13},{"ruleId":"738","severity":1,"message":"837","line":9,"column":10,"nodeType":"740","messageId":"741","endLine":9,"endColumn":13},{"ruleId":"738","severity":1,"message":"845","line":11,"column":10,"nodeType":"740","messageId":"741","endLine":11,"endColumn":35},{"ruleId":"751","severity":1,"message":"846","line":22,"column":7,"nodeType":"753","endLine":22,"endColumn":24,"suggestions":"847"},{"ruleId":"738","severity":1,"message":"848","line":4,"column":49,"nodeType":"740","messageId":"741","endLine":4,"endColumn":57},{"ruleId":"751","severity":1,"message":"846","line":155,"column":7,"nodeType":"753","endLine":155,"endColumn":9,"suggestions":"849"},{"ruleId":"738","severity":1,"message":"850","line":3,"column":44,"nodeType":"740","messageId":"741","endLine":3,"endColumn":47},{"ruleId":"738","severity":1,"message":"850","line":3,"column":43,"nodeType":"740","messageId":"741","endLine":3,"endColumn":46},{"ruleId":"738","severity":1,"message":"792","line":2,"column":8,"nodeType":"740","messageId":"741","endLine":2,"endColumn":20},{"ruleId":"738","severity":1,"message":"793","line":3,"column":8,"nodeType":"740","messageId":"741","endLine":3,"endColumn":15},{"ruleId":"738","severity":1,"message":"758","line":7,"column":15,"nodeType":"740","messageId":"741","endLine":7,"endColumn":18},{"ruleId":"738","severity":1,"message":"836","line":10,"column":8,"nodeType":"740","messageId":"741","endLine":10,"endColumn":17},{"ruleId":"738","severity":1,"message":"801","line":11,"column":13,"nodeType":"740","messageId":"741","endLine":11,"endColumn":20},{"ruleId":"738","severity":1,"message":"771","line":14,"column":36,"nodeType":"740","messageId":"741","endLine":14,"endColumn":45},{"ruleId":"738","severity":1,"message":"772","line":14,"column":47,"nodeType":"740","messageId":"741","endLine":14,"endColumn":63},{"ruleId":"738","severity":1,"message":"774","line":15,"column":10,"nodeType":"740","messageId":"741","endLine":15,"endColumn":16},{"ruleId":"738","severity":1,"message":"775","line":15,"column":18,"nodeType":"740","messageId":"741","endLine":15,"endColumn":28},{"ruleId":"738","severity":1,"message":"776","line":15,"column":30,"nodeType":"740","messageId":"741","endLine":15,"endColumn":38},{"ruleId":"738","severity":1,"message":"810","line":3,"column":10,"nodeType":"740","messageId":"741","endLine":3,"endColumn":14},{"ruleId":"738","severity":1,"message":"850","line":6,"column":39,"nodeType":"740","messageId":"741","endLine":6,"endColumn":42},{"ruleId":"738","severity":1,"message":"750","line":12,"column":10,"nodeType":"740","messageId":"741","endLine":12,"endColumn":19},{"ruleId":"738","severity":1,"message":"851","line":15,"column":7,"nodeType":"740","messageId":"741","endLine":15,"endColumn":13},{"ruleId":"745","severity":1,"message":"746","line":31,"column":17,"nodeType":"747","messageId":"748","endLine":31,"endColumn":36},{"ruleId":"738","severity":1,"message":"814","line":38,"column":18,"nodeType":"740","messageId":"741","endLine":38,"endColumn":23},{"ruleId":"738","severity":1,"message":"852","line":7,"column":8,"nodeType":"740","messageId":"741","endLine":7,"endColumn":12},{"ruleId":"738","severity":1,"message":"853","line":8,"column":8,"nodeType":"740","messageId":"741","endLine":8,"endColumn":16},{"ruleId":"738","severity":1,"message":"854","line":4,"column":8,"nodeType":"740","messageId":"741","endLine":4,"endColumn":24},{"ruleId":"738","severity":1,"message":"855","line":22,"column":19,"nodeType":"740","messageId":"741","endLine":22,"endColumn":25},{"ruleId":"738","severity":1,"message":"856","line":22,"column":55,"nodeType":"740","messageId":"741","endLine":22,"endColumn":69},{"ruleId":"738","severity":1,"message":"857","line":22,"column":71,"nodeType":"740","messageId":"741","endLine":22,"endColumn":76},{"ruleId":"738","severity":1,"message":"830","line":26,"column":10,"nodeType":"740","messageId":"741","endLine":26,"endColumn":18},{"ruleId":"751","severity":1,"message":"858","line":41,"column":7,"nodeType":"753","endLine":41,"endColumn":9,"suggestions":"859"},{"ruleId":"738","severity":1,"message":"768","line":96,"column":26,"nodeType":"740","messageId":"741","endLine":96,"endColumn":31},{"ruleId":"738","severity":1,"message":"802","line":2,"column":17,"nodeType":"740","messageId":"741","endLine":2,"endColumn":26},{"ruleId":"738","severity":1,"message":"757","line":4,"column":8,"nodeType":"740","messageId":"741","endLine":4,"endColumn":23},{"ruleId":"738","severity":1,"message":"759","line":5,"column":15,"nodeType":"740","messageId":"741","endLine":5,"endColumn":20},{"ruleId":"738","severity":1,"message":"797","line":5,"column":28,"nodeType":"740","messageId":"741","endLine":5,"endColumn":36},{"ruleId":"738","severity":1,"message":"760","line":5,"column":38,"nodeType":"740","messageId":"741","endLine":5,"endColumn":46},{"ruleId":"738","severity":1,"message":"826","line":6,"column":52,"nodeType":"740","messageId":"741","endLine":6,"endColumn":67},{"ruleId":"738","severity":1,"message":"827","line":6,"column":69,"nodeType":"740","messageId":"741","endLine":6,"endColumn":90},{"ruleId":"738","severity":1,"message":"802","line":2,"column":17,"nodeType":"740","messageId":"741","endLine":2,"endColumn":26},{"ruleId":"738","severity":1,"message":"757","line":4,"column":8,"nodeType":"740","messageId":"741","endLine":4,"endColumn":23},{"ruleId":"738","severity":1,"message":"759","line":5,"column":15,"nodeType":"740","messageId":"741","endLine":5,"endColumn":20},{"ruleId":"738","severity":1,"message":"797","line":5,"column":28,"nodeType":"740","messageId":"741","endLine":5,"endColumn":36},{"ruleId":"738","severity":1,"message":"760","line":5,"column":38,"nodeType":"740","messageId":"741","endLine":5,"endColumn":46},{"ruleId":"738","severity":1,"message":"860","line":9,"column":4,"nodeType":"740","messageId":"741","endLine":9,"endColumn":16},{"ruleId":"738","severity":1,"message":"861","line":10,"column":4,"nodeType":"740","messageId":"741","endLine":10,"endColumn":22},{"ruleId":"738","severity":1,"message":"862","line":11,"column":4,"nodeType":"740","messageId":"741","endLine":11,"endColumn":16},{"ruleId":"738","severity":1,"message":"863","line":12,"column":4,"nodeType":"740","messageId":"741","endLine":12,"endColumn":22},{"ruleId":"738","severity":1,"message":"805","line":2,"column":10,"nodeType":"740","messageId":"741","endLine":2,"endColumn":22},{"ruleId":"738","severity":1,"message":"864","line":2,"column":10,"nodeType":"740","messageId":"741","endLine":2,"endColumn":22},{"ruleId":"738","severity":1,"message":"865","line":1,"column":10,"nodeType":"740","messageId":"741","endLine":1,"endColumn":15},{"ruleId":"738","severity":1,"message":"757","line":4,"column":8,"nodeType":"740","messageId":"741","endLine":4,"endColumn":23},{"ruleId":"738","severity":1,"message":"758","line":3,"column":15,"nodeType":"740","messageId":"741","endLine":3,"endColumn":18},{"ruleId":"738","severity":1,"message":"814","line":13,"column":21,"nodeType":"740","messageId":"741","endLine":13,"endColumn":26},{"ruleId":"781","severity":1,"message":"782","line":27,"column":10,"nodeType":"747","messageId":"783","endLine":27,"endColumn":21},{"ruleId":"738","severity":1,"message":"761","line":3,"column":8,"nodeType":"740","messageId":"741","endLine":3,"endColumn":14},{"ruleId":"738","severity":1,"message":"795","line":4,"column":8,"nodeType":"740","messageId":"741","endLine":4,"endColumn":22},{"ruleId":"738","severity":1,"message":"758","line":5,"column":10,"nodeType":"740","messageId":"741","endLine":5,"endColumn":13},{"ruleId":"738","severity":1,"message":"801","line":6,"column":13,"nodeType":"740","messageId":"741","endLine":6,"endColumn":20},{"ruleId":"738","severity":1,"message":"866","line":8,"column":15,"nodeType":"740","messageId":"741","endLine":8,"endColumn":19},{"ruleId":"738","severity":1,"message":"810","line":9,"column":10,"nodeType":"740","messageId":"741","endLine":9,"endColumn":14},{"ruleId":"738","severity":1,"message":"831","line":11,"column":10,"nodeType":"740","messageId":"741","endLine":11,"endColumn":20},{"ruleId":"781","severity":1,"message":"782","line":94,"column":10,"nodeType":"747","messageId":"783","endLine":94,"endColumn":21},{"ruleId":"751","severity":1,"message":"867","line":97,"column":7,"nodeType":"753","endLine":97,"endColumn":23,"suggestions":"868"},{"ruleId":"738","severity":1,"message":"761","line":2,"column":8,"nodeType":"740","messageId":"741","endLine":2,"endColumn":14},{"ruleId":"738","severity":1,"message":"758","line":4,"column":10,"nodeType":"740","messageId":"741","endLine":4,"endColumn":13},{"ruleId":"738","severity":1,"message":"818","line":4,"column":21,"nodeType":"740","messageId":"741","endLine":4,"endColumn":24},{"ruleId":"738","severity":1,"message":"760","line":4,"column":36,"nodeType":"740","messageId":"741","endLine":4,"endColumn":44},{"ruleId":"738","severity":1,"message":"801","line":5,"column":10,"nodeType":"740","messageId":"741","endLine":5,"endColumn":17},{"ruleId":"738","severity":1,"message":"869","line":1,"column":10,"nodeType":"740","messageId":"741","endLine":1,"endColumn":18},"lines-around-directive",["870"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"prettier/prettier","Delete `·`","delete",{"range":"871","text":"872"},{"range":"873","text":"872"},{"range":"874","text":"872"},{"range":"875","text":"872"},{"range":"876","text":"872"},"Delete `··`",{"range":"877","text":"872"},"Delete `···`",{"range":"878","text":"872"},{"range":"879","text":"872"},{"range":"880","text":"872"},"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'Employees' is assigned a value but never used.","'Expenses' is assigned a value but never used.","'isCashier' is assigned a value but never used.","react/destructuring-assignment","Must use destructuring props assignment","MemberExpression","useDestructAssignment","'post' is defined but never used.","'userRoles' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'alert', 'history', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["881"],"'auth' is defined but never used. Allowed unused args must match /res|next|^err/u.","'res' is assigned a value but never used.","'CreatableSelect' is defined but never used.","'get' is defined but never used.","'getV2' is defined but never used.","'useQuery' is defined but never used.","'Select' is defined but never used.","React Hook useEffect has missing dependencies: 'formik', 'state.data.amount', and 'state.data.title'. Either include them or remove the dependency array.",["882"],"'memo' is defined but never used.","'Footer' is defined but never used.","React Hook useEffect has a missing dependency: 'getUserProfile'. Either include it or remove the dependency array.",["883"],"'state' is defined but never used. Allowed unused args must match /res|next|^err/u.","'Popover' is defined but never used.","'OverlayTrigger' is defined but never used.","'AiFillEye' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'AiOutlineQuestionCircle' is defined but never used.","'FaSort' is defined but never used.","'FaSortDown' is defined but never used.","'FaSortUp' is defined but never used.","'cls' is defined but never used.","'ClearSale' is defined but never used.","'history' is assigned a value but never used.","'setSort' is assigned a value but never used.","no-console","Unexpected console statement.","unexpected","Must use destructuring p assignment","'Dropdown' is defined but never used.","'Table' is defined but never used.","'ButtonGroup' is defined but never used.","'connect' is defined but never used.","'ManagePurchase' is defined but never used.","'ManageSales' is defined but never used.","'dayjs' is defined but never used.","'relativeTime' is defined but never used.","'produce' is defined but never used.","'Pagination' is defined but never used.","'SpinnerOverlay' is defined but never used.","'del' is defined but never used.","'useAlert' is defined but never used.","'useMutation' is defined but never used.","'getSortingIcon' is defined but never used.","'_' is defined but never used.","'isArray' is defined but never used.","'useEffect' is defined but never used.","'Card' is defined but never used.","'Row' is defined but never used.","'AiFillDelete' is defined but never used.","'AiFillEdit' is defined but never used.","'Else' is defined but never used.","'If' is defined but never used.","'Then' is defined but never used.","'When' is defined but never used.","'useQueryClient' is defined but never used.","'swal' is defined but never used.","'RefundSale' is defined but never used.","'props' is defined but never used. Allowed unused args must match /res|next|^err/u.","'ExpenseTypes' is defined but never used.","'handleOnClickAdd' is assigned a value but never used.","'api' is defined but never used.","'put' is defined but never used.","'Badge' is defined but never used.","'ModalWrapper' is defined but never used.","'handleToastError' is defined but never used.","'Receipt' is defined but never used.","'useFormikContext' is defined but never used.","'useCallback' is defined but never used.","'batch' is defined but never used.","'setProductsData' is defined but never used.","'setProductsVisibility' is defined but never used.","'GenericTableHeadingSorter' is defined but never used.","'EditButton' is defined but never used.","'dispatch' is assigned a value but never used.","'useHistory' is defined but never used.","'initialValues' is assigned a value but never used.","'setIsError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'inventory'. Either include it or remove the dependency array.",["884"],"'PageTItle' is defined but never used.","'Col' is defined but never used.","'ReactDatePicker' is defined but never used.","'index' is defined but never used. Allowed unused args must match /res|next|^err/u.","'ChatBox' is defined but never used.","'EllipsisPage' is assigned a value but never used.","'hasPrevPage' is defined but never used. Allowed unused args must match /res|next|^err/u.","'setPage' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'createSelectProductOption' is defined but never used.","React Hook useEffect has a missing dependency: 'setFieldValue'. Either include it or remove the dependency array.",["885"],"'useState' is defined but never used.",["886"],"'key' is defined but never used. Allowed unused args must match /res|next|^err/u.","'manage' is assigned a value but never used.","'logo' is defined but never used.","'logoText' is defined but never used.","'PerfectScrollbar' is defined but never used.","'onNote' is defined but never used. Allowed unused args must match /res|next|^err/u.","'onNotification' is defined but never used. Allowed unused args must match /res|next|^err/u.","'onBox' is defined but never used. Allowed unused args must match /res|next|^err/u.","React Hook React.useEffect has missing dependencies: 'history' and 'logout'. Either include them or remove the dependency array. If 'logout' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["887"],"'setTypesData' is defined but never used.","'setTypesVisibility' is defined but never used.","'setUnitsData' is defined but never used.","'setUnitsVisibility' is defined but never used.","'ErrorMessage' is defined but never used.","'Field' is defined but never used.","'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'purchase'. Either include it or remove the dependency array.",["888"],"'Fragment' is defined but never used.","padding-line-between-statements",[474,475],"",[523,524],[599,600],[690,691],[757,758],[768,770],[829,832],[844,846],[876,877],{"desc":"889","fix":"890"},{"desc":"891","fix":"892"},{"desc":"893","fix":"894"},{"desc":"895","fix":"896"},{"desc":"897","fix":"898"},{"desc":"899","fix":"900"},{"desc":"901","fix":"902"},{"desc":"903","fix":"904"},"Update the dependencies array to be: [alert, history, props]",{"range":"905","text":"906"},"Update the dependencies array to be: [formik, state.data.amount, state.data.title, state.visible]",{"range":"907","text":"908"},"Update the dependencies array to be: [getUserProfile, token]",{"range":"909","text":"910"},"Update the dependencies array to be: [inventory, refundSale]",{"range":"911","text":"912"},"Update the dependencies array to be: [setFieldValue, values.discount]",{"range":"913","text":"914"},"Update the dependencies array to be: [setFieldValue]",{"range":"915","text":"916"},"Update the dependencies array to be: [history, logout]",{"range":"917","text":"918"},"Update the dependencies array to be: [purchase, refundPurchase]",{"range":"919","text":"920"},[1969,1971],"[alert, history, props]",[1728,1743],"[formik, state.data.amount, state.data.title, state.visible]",[949,956],"[getUserProfile, token]",[1890,1902],"[inventory, refundSale]",[884,901],"[setFieldValue, values.discount]",[5465,5467],"[setFieldValue]",[1323,1325],"[history, logout]",[3065,3081],"[purchase, refundPurchase]"]