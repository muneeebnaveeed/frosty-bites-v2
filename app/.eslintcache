[{"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\index.js":"1","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\App.js":"2","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\index.js":"3","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\reducers.js":"4","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\index.js":"5","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\products\\reducer.js":"6","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\auth\\reducer.js":"7","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\units\\reducer.js":"8","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\types\\reducer.js":"9","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\salaries\\reducer.js":"10","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\customers\\reducer.js":"11","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\suppliers\\reducer.js":"12","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\employees\\reducer.js":"13","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\inventories\\reducer.js":"14","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\expenses\\reducer.js":"15","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\enums.js":"16","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\customers\\CustomerActions.js":"17","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\expenses\\AddNewExpense.js":"18","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\Error404.js":"19","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\expenses\\ExpenseActions.js":"20","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\customers\\AddNewCustomer.js":"21","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\Registration.js":"22","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\Login.js":"23","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\suppliers\\SupplierActions.js":"24","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\suppliers\\AddNewSupplier.js":"25","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\purchase\\AddPurchase.js":"26","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\ProductActions.js":"27","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\inventory\\AddNewInventory.js":"28","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\units\\AddNewUnit.js":"29","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\types\\TypeActions.js":"30","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\types\\AddNewType.js":"31","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\salaries\\AddNewSalary.js":"32","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\customers\\index.js":"33","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\index.js":"34","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\inventory\\index.js":"35","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\index.js":"36","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\expenses\\index.js":"37","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\dashboard\\index.js":"38","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\users\\index.js":"39","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\suppliers\\index.js":"40","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\purchase\\index.js":"41","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\index.js":"42","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\index.js":"43","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\auth\\actionTypes.js":"44","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\products\\actionTypes.js":"45","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\types\\actionTypes.js":"46","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\units\\actionTypes.js":"47","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\salaries\\actionTypes.js":"48","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\employees\\actionTypes.js":"49","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\customers\\actionTypes.js":"50","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\suppliers\\actionTypes.js":"51","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\inventories\\actionTypes.js":"52","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\expenses\\actionTypes.js":"53","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\khaata\\index.js":"54","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\auth\\actions.js":"55","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\CreatableSelect.js":"56","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\SpinnerOverlay.js":"57","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\ModalWrapper.js":"58","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\Select.js":"59","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\Button.js":"60","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\actions.js":"61","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\Pagination.js":"62","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\PageTitle.js":"63","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\purchase\\RefundPurchase.js":"64","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\purchase\\ManagePurchase.js":"65","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\MangeSales.js":"66","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\RefundSale.js":"67","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\ClearSale.js":"68","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\purchase\\ClearPurchase.js":"69","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\salaries\\index.js":"70","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\index.js":"71","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\expenseTypes\\index.js":"72","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\units\\index.js":"73","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\types\\index.js":"74","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\expenses\\actions.js":"75","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\employees\\actions.js":"76","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\inventories\\actions.js":"77","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\getSortingIcon.js":"78","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\getQuantity.js":"79","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\useAlert.js":"80","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\server.js":"81","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\useQuery.js":"82","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\salaries\\actions.js":"83","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\customers\\actions.js":"84","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\suppliers\\actions.js":"85","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\units\\actions.js":"86","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\types\\actions.js":"87","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\products\\actions.js":"88","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\Footer.js":"89","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\nav\\index.js":"90","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\nav\\SideBar.js":"91","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\nav\\Header.js":"92","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\nav\\NavHader.js":"93","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\ChatBox.js":"94","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\TableSearch.js":"95","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\GenericTableHeadingSorter.js":"96","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\DeleteButton.js":"97","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\modals\\index.js":"98","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\modals\\manage-product\\index.js":"99","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\modals\\manage-product\\manage-product.modal.js":"100","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\modals\\manage-product\\manage-product-form.js":"101","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\FormField.js":"102","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\FormikField.js":"103","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\modals\\manage-product\\select-tags.js":"104","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\misc.js":"105","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\utils.js":"106","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\validations.js":"107","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\EditButton.js":"108","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\product-grid.js":"109","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\queries.js":"110","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\queries.js":"111","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\employees-grid.js":"112","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\queries.js":"113","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\modals\\index.js":"114","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\modals\\manage-employee\\index.js":"115","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\modals\\manage-employee\\manage-employee.modal.js":"116","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\modals\\manage-employee\\manage-employee-form.js":"117","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\validations.js":"118","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\add-sale\\index.js":"119","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\add-sale\\add-sale.js":"120","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\add-sale\\cart-grid.js":"121","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\add-sale\\sale-info.js":"122","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\queries.js":"123","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\utils.js":"124","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\validations.js":"125","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\sale-grid.js":"126","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\add-sale\\receipt.js":"127"},{"size":281,"mtime":1661094125947,"results":"128","hashOfConfig":"129"},{"size":918,"mtime":1670679527959,"results":"130","hashOfConfig":"129"},{"size":383,"mtime":1661094126173,"results":"131","hashOfConfig":"129"},{"size":687,"mtime":1661094126176,"results":"132","hashOfConfig":"129"},{"size":2932,"mtime":1670768709839,"results":"133","hashOfConfig":"129"},{"size":539,"mtime":1661094126176,"results":"134","hashOfConfig":"129"},{"size":527,"mtime":1661094126168,"results":"135","hashOfConfig":"129"},{"size":531,"mtime":1661094126182,"results":"136","hashOfConfig":"129"},{"size":531,"mtime":1661094126180,"results":"137","hashOfConfig":"129"},{"size":543,"mtime":1661094126177,"results":"138","hashOfConfig":"129"},{"size":547,"mtime":1661094126170,"results":"139","hashOfConfig":"129"},{"size":547,"mtime":1661094126179,"results":"140","hashOfConfig":"129"},{"size":549,"mtime":1661094126171,"results":"141","hashOfConfig":"129"},{"size":555,"mtime":1661094126174,"results":"142","hashOfConfig":"129"},{"size":543,"mtime":1661094126173,"results":"143","hashOfConfig":"129"},{"size":92,"mtime":1661094125954,"results":"144","hashOfConfig":"129"},{"size":19512,"mtime":1661094125972,"results":"145","hashOfConfig":"129"},{"size":3410,"mtime":1661094125977,"results":"146","hashOfConfig":"129"},{"size":825,"mtime":1661094125966,"results":"147","hashOfConfig":"129"},{"size":10231,"mtime":1661094125978,"results":"148","hashOfConfig":"129"},{"size":4116,"mtime":1661094125971,"results":"149","hashOfConfig":"129"},{"size":5890,"mtime":1661094125969,"results":"150","hashOfConfig":"129"},{"size":7049,"mtime":1670767312982,"results":"151","hashOfConfig":"129"},{"size":20219,"mtime":1661094126001,"results":"152","hashOfConfig":"129"},{"size":4837,"mtime":1661094126000,"results":"153","hashOfConfig":"129"},{"size":18767,"mtime":1661094125984,"results":"154","hashOfConfig":"129"},{"size":23344,"mtime":1670509323229,"results":"155","hashOfConfig":"129"},{"size":8690,"mtime":1661094125979,"results":"156","hashOfConfig":"129"},{"size":4384,"mtime":1661094126004,"results":"157","hashOfConfig":"129"},{"size":13160,"mtime":1661094126003,"results":"158","hashOfConfig":"129"},{"size":2805,"mtime":1661094126002,"results":"159","hashOfConfig":"129"},{"size":3935,"mtime":1661094125988,"results":"160","hashOfConfig":"129"},{"size":12029,"mtime":1661094125973,"results":"161","hashOfConfig":"129"},{"size":45,"mtime":1670683070152,"results":"162","hashOfConfig":"129"},{"size":12136,"mtime":1661094125980,"results":"163","hashOfConfig":"129"},{"size":1918,"mtime":1670693318854,"results":"164","hashOfConfig":"129"},{"size":9724,"mtime":1661094125978,"results":"165","hashOfConfig":"129"},{"size":7249,"mtime":1670768800682,"results":"166","hashOfConfig":"129"},{"size":10748,"mtime":1661094126006,"results":"167","hashOfConfig":"129"},{"size":13243,"mtime":1661094126001,"results":"168","hashOfConfig":"129"},{"size":2636,"mtime":1661094125987,"results":"169","hashOfConfig":"129"},{"size":2736,"mtime":1670695284447,"results":"170","hashOfConfig":"129"},{"size":43,"mtime":1670682561622,"results":"171","hashOfConfig":"129"},{"size":64,"mtime":1661094126167,"results":"172","hashOfConfig":"129"},{"size":118,"mtime":1661094126175,"results":"173","hashOfConfig":"129"},{"size":110,"mtime":1661094126180,"results":"174","hashOfConfig":"129"},{"size":110,"mtime":1661094126181,"results":"175","hashOfConfig":"129"},{"size":122,"mtime":1661094126177,"results":"176","hashOfConfig":"129"},{"size":128,"mtime":1661094126170,"results":"177","hashOfConfig":"129"},{"size":126,"mtime":1661094126169,"results":"178","hashOfConfig":"129"},{"size":126,"mtime":1661094126178,"results":"179","hashOfConfig":"129"},{"size":134,"mtime":1661094126173,"results":"180","hashOfConfig":"129"},{"size":122,"mtime":1661094126172,"results":"181","hashOfConfig":"129"},{"size":14033,"mtime":1661094125981,"results":"182","hashOfConfig":"129"},{"size":322,"mtime":1661094126168,"results":"183","hashOfConfig":"129"},{"size":1117,"mtime":1661094125950,"results":"184","hashOfConfig":"129"},{"size":481,"mtime":1661094125953,"results":"185","hashOfConfig":"129"},{"size":1953,"mtime":1670682491065,"results":"186","hashOfConfig":"129"},{"size":1716,"mtime":1670669277781,"results":"187","hashOfConfig":"129"},{"size":908,"mtime":1661094125949,"results":"188","hashOfConfig":"129"},{"size":366,"mtime":1661094126167,"results":"189","hashOfConfig":"129"},{"size":3967,"mtime":1670681191848,"results":"190","hashOfConfig":"129"},{"size":484,"mtime":1661094125961,"results":"191","hashOfConfig":"129"},{"size":7186,"mtime":1661094125987,"results":"192","hashOfConfig":"129"},{"size":12609,"mtime":1661094125985,"results":"193","hashOfConfig":"129"},{"size":11760,"mtime":1661094125997,"results":"194","hashOfConfig":"129"},{"size":3498,"mtime":1661094125998,"results":"195","hashOfConfig":"129"},{"size":2358,"mtime":1661094125994,"results":"196","hashOfConfig":"129"},{"size":2394,"mtime":1661094125985,"results":"197","hashOfConfig":"129"},{"size":7463,"mtime":1661094125988,"results":"198","hashOfConfig":"129"},{"size":85,"mtime":1661094125955,"results":"199","hashOfConfig":"129"},{"size":8974,"mtime":1661094125976,"results":"200","hashOfConfig":"129"},{"size":6763,"mtime":1661094126005,"results":"201","hashOfConfig":"129"},{"size":6100,"mtime":1661094126003,"results":"202","hashOfConfig":"129"},{"size":283,"mtime":1661094126172,"results":"203","hashOfConfig":"129"},{"size":291,"mtime":1661094126171,"results":"204","hashOfConfig":"129"},{"size":301,"mtime":1661094126174,"results":"205","hashOfConfig":"129"},{"size":902,"mtime":1661094125955,"results":"206","hashOfConfig":"129"},{"size":251,"mtime":1661094125954,"results":"207","hashOfConfig":"129"},{"size":2652,"mtime":1661094125957,"results":"208","hashOfConfig":"129"},{"size":1961,"mtime":1670325087122,"results":"209","hashOfConfig":"129"},{"size":417,"mtime":1661094125957,"results":"210","hashOfConfig":"129"},{"size":283,"mtime":1661094126177,"results":"211","hashOfConfig":"129"},{"size":289,"mtime":1661094126169,"results":"212","hashOfConfig":"129"},{"size":289,"mtime":1661094126179,"results":"213","hashOfConfig":"129"},{"size":265,"mtime":1661094126181,"results":"214","hashOfConfig":"129"},{"size":265,"mtime":1661094126180,"results":"215","hashOfConfig":"129"},{"size":279,"mtime":1661094126175,"results":"216","hashOfConfig":"129"},{"size":520,"mtime":1670509179810,"results":"217","hashOfConfig":"129"},{"size":827,"mtime":1661094125964,"results":"218","hashOfConfig":"129"},{"size":4979,"mtime":1670768719076,"results":"219","hashOfConfig":"129"},{"size":4181,"mtime":1661094125963,"results":"220","hashOfConfig":"129"},{"size":1123,"mtime":1670760142802,"results":"221","hashOfConfig":"129"},{"size":1730,"mtime":1661094125959,"results":"222","hashOfConfig":"129"},{"size":452,"mtime":1670515652168,"results":"223","hashOfConfig":"129"},{"size":777,"mtime":1670601372208,"results":"224","hashOfConfig":"129"},{"size":389,"mtime":1670601776179,"results":"225","hashOfConfig":"129"},{"size":67,"mtime":1670603566503,"results":"226","hashOfConfig":"129"},{"size":51,"mtime":1670603368551,"results":"227","hashOfConfig":"129"},{"size":3468,"mtime":1670683570870,"results":"228","hashOfConfig":"129"},{"size":1755,"mtime":1670678525476,"results":"229","hashOfConfig":"129"},{"size":1583,"mtime":1670688549965,"results":"230","hashOfConfig":"129"},{"size":597,"mtime":1670678624676,"results":"231","hashOfConfig":"129"},{"size":3210,"mtime":1670676113137,"results":"232","hashOfConfig":"129"},{"size":1184,"mtime":1670756152627,"results":"233","hashOfConfig":"129"},{"size":86,"mtime":1670676097780,"results":"234","hashOfConfig":"129"},{"size":505,"mtime":1670678478301,"results":"235","hashOfConfig":"129"},{"size":396,"mtime":1670679220244,"results":"236","hashOfConfig":"129"},{"size":8378,"mtime":1670682948940,"results":"237","hashOfConfig":"129"},{"size":158,"mtime":1670766927179,"results":"238","hashOfConfig":"129"},{"size":141,"mtime":1670682800076,"results":"239","hashOfConfig":"129"},{"size":8154,"mtime":1670684776234,"results":"240","hashOfConfig":"129"},{"size":160,"mtime":1670684323615,"results":"241","hashOfConfig":"129"},{"size":69,"mtime":1670683677696,"results":"242","hashOfConfig":"129"},{"size":52,"mtime":1670683633056,"results":"243","hashOfConfig":"129"},{"size":3440,"mtime":1670684434643,"results":"244","hashOfConfig":"129"},{"size":512,"mtime":1670684793938,"results":"245","hashOfConfig":"129"},{"size":463,"mtime":1670684869265,"results":"246","hashOfConfig":"129"},{"size":39,"mtime":1670756385959,"results":"247","hashOfConfig":"129"},{"size":3785,"mtime":1670766865580,"results":"248","hashOfConfig":"129"},{"size":8516,"mtime":1670766366203,"results":"249","hashOfConfig":"129"},{"size":3226,"mtime":1670762150049,"results":"250","hashOfConfig":"129"},{"size":312,"mtime":1670695387036,"results":"251","hashOfConfig":"129"},{"size":102,"mtime":1670689039356,"results":"252","hashOfConfig":"129"},{"size":998,"mtime":1670762557087,"results":"253","hashOfConfig":"129"},{"size":9569,"mtime":1670765193903,"results":"254","hashOfConfig":"129"},{"size":5609,"mtime":1670769785492,"results":"255","hashOfConfig":"129"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},"1y6foa1",{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"258"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"293"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"258"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"293"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"293"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"258"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"258"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"293"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"293"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"293"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"293"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"293"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"293"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"293"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"293"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"293"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"293"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"258"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"293"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"258"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"258"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"258"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"258"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"293"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"293"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"258"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"293"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"258"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"258"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"258"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"258"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"258"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"258"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"258"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"258"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"258"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"258"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"258"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"258"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"444"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"444"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"258"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"258"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"258"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"258"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"258"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"258"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"258"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"258"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"258"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"258"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"258"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527","usedDeprecatedRules":"258"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"258"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"258"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"258"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"258"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"258"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"258"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"258"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"258"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"258"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"258"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"258"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\index.js",[],["576","577","578","579","580"],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\App.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\index.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\reducers.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\index.js",["581","582","583","584","585"],"import React, { lazy, Suspense, useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\n/// React router dom\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport './chart.css';\r\nimport { userRoles } from './helpers/enums';\r\n/// Css\r\nimport './index.css';\r\nimport Layout from './layouts';\r\n\r\nimport { ManageProductModal } from './pages/products/modals';\r\nimport { ManageEmployeeModal } from './pages/employees/modals';\r\nimport AddNewExpense from './pages/expenses/AddNewExpense';\r\n/// Pages\r\n// import Registration from './pages/Registration';\r\n// import Login from './pages/Login';\r\n\r\nconst Registration = lazy(() => import('./pages/Registration'));\r\nconst Login = lazy(() => import('./pages/Login'));\r\n\r\nconst Users = lazy(() => import('./pages/users'));\r\nconst Products = lazy(() => import('./pages/products'));\r\nconst Employees = lazy(() => import('./pages/employees'));\r\nconst Dashboard = lazy(() => import('./pages/dashboard'));\r\nconst Error404 = lazy(() => import('./pages/Error404'));\r\nconst Expenses = lazy(() => import('./pages/expenses'));\r\n\r\nconst Sale = lazy(() => import('./pages/sale'));\r\nconst AddSale = lazy(() => import('./pages/sale/add-sale'));\r\n\r\nconst protectedRoutes = [];\r\n\r\nconst DefaultPage = () => <Redirect to=\"/page-login\" />;\r\n\r\nconst routes = [\r\n   /// Deshborad\r\n   { url: '', component: DefaultPage },\r\n   { url: 'page-register', component: Registration, isPublic: true },\r\n   { url: 'page-login', component: Login, isPublic: true },\r\n   { url: 'users', component: Users },\r\n   { url: 'products', component: Products },\r\n   { url: 'sale', component: Sale },\r\n   { url: 'sale/add', component: AddSale },\r\n   { url: 'dashboard', component: Dashboard },\r\n];\r\n\r\nconst Markup = (props) => {\r\n   const isCashier = props.user?.role === userRoles.CASHIER;\r\n\r\n   return (\r\n      <Suspense fallback={<p>Loading</p>}>\r\n         <ToastContainer />\r\n         <ManageProductModal />\r\n         <ManageEmployeeModal />\r\n         {/* <AddNewType />\r\n         <AddNewUnit />\r\n         <AddNewSupplier />\r\n         <AddNewCustomer />\r\n         <AddNewSalary /> */}\r\n         {/* <AddNewEmployee /> */}\r\n         {/* <AddNewInventory /> */}\r\n         <AddNewExpense />\r\n\r\n         <Router>\r\n            <Switch>\r\n               {[...routes, ...protectedRoutes].map((data, i) => (\r\n                  <Route key={i} exact path={`/${data.url}`}>\r\n                     <Layout isPublic={data.isPublic}>\r\n                        <data.component />\r\n                     </Layout>\r\n                  </Route>\r\n               ))}\r\n               <Route component={Error404} />\r\n            </Switch>\r\n         </Router>\r\n      </Suspense>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Markup);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\products\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\auth\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\units\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\types\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\salaries\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\customers\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\suppliers\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\employees\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\inventories\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\expenses\\reducer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\enums.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\customers\\CustomerActions.js",["586","587","588","589","590","591"],"import useUrlState from '@ahooksjs/use-url-state';\r\nimport { useFormik } from 'formik';\r\nimport Button from 'jsx/components/Button';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { ButtonGroup, Card, OverlayTrigger, Popover, Table } from 'react-bootstrap';\r\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport { useDebounce } from 'ahooks';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\n\r\nconst CustomerActions = (props) => {\r\n   dayjs.extend(relativeTime);\r\n\r\n   const history = useHistory();\r\n   const params = useParams();\r\n   const [customer, setCustomer] = useState(null);\r\n   const [isError, setIsError] = useState(false);\r\n\r\n   const [urlState, setUrlState] = useUrlState({});\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: 1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const alert = useAlert();\r\n   const isEditing = useMemo(\r\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\r\n      [urlState.type]\r\n   );\r\n   const isViewCustomer = useMemo(() => urlState?.type === 'view', [urlState.type]);\r\n   const isAddCustomer = useMemo(() => params?.id === 'add', [params.id]);\r\n\r\n   const query = useQuery(\r\n      ['customer', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\r\n      () => get(`/customers/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\r\n      {\r\n         enabled: !isAddCustomer,\r\n         onError: (err) => {\r\n            setIsError(true);\r\n            alert.setErrorAlert({\r\n               message: 'Invalid URL!',\r\n               err: { message: ['The page will redirect to manage customers.'] },\r\n               callback: () => history.push('/customers'),\r\n               duration: 3000,\r\n            });\r\n         },\r\n      }\r\n   );\r\n   const patchMutation = useMutation((payload) => patch(`/customers/id/${params.id}`, payload), {\r\n      onSuccess: () => {\r\n         history.push('/customers');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({\r\n            message: 'Unable to edit customer.',\r\n            err,\r\n         });\r\n      },\r\n   });\r\n\r\n   const postMutation = useMutation((payload) => post('/customers', payload), {\r\n      onSuccess: () => {\r\n         history.push('/customers');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add customer', err });\r\n      },\r\n   });\r\n\r\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\r\n\r\n   if (!isEditing && !isViewCustomer && !isAddCustomer) {\r\n      history.push('/customers');\r\n   }\r\n\r\n   const formik = useFormik({\r\n      initialValues: { name: isEditing ? customer?.name : '', phone: isEditing ? customer?.phone : '' },\r\n      validateOnChange: false,\r\n      validateOnBlur: false,\r\n      onSubmit: (values) => {\r\n         mutation.mutate(values);\r\n      },\r\n   });\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   useEffect(() => {\r\n      if (isEditing && query.data) {\r\n         formik.setFieldValue('name', query.data?.customer?.name ?? '');\r\n         formik.setFieldValue('phone', query.data?.customer?.phone ?? '');\r\n      }\r\n   }, [isEditing, query.data]);\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.sales?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.sales?.totalPages]);\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Customers\" motherMenu=\"Manage\" />\r\n         {alert.getAlert()}\r\n         <Card>\r\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <If condition={isAddCustomer || isEditing}>\r\n               <Then>\r\n                  <form onSubmit={formik.handleSubmit}>\r\n                     <Card.Header>\r\n                        <Card.Title>{isEditing ? 'Edit Customer' : 'Add New Customer'}</Card.Title>\r\n                     </Card.Header>\r\n                     <Card.Body>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Name</label>\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"name\"\r\n                                 disabled={isError}\r\n                                 value={formik.values.name}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Phone</label>\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"phone\"\r\n                                 disabled={isError}\r\n                                 value={formik.values.phone}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                     </Card.Body>\r\n                     <Card.Footer>\r\n                        <div className=\"row\">\r\n                           <div className=\"col-xl-12 tw-justify-center\">\r\n                              <ButtonGroup>\r\n                                 <Button\r\n                                    icon={AiFillCaretLeft}\r\n                                    variant=\"warning light\"\r\n                                    onClick={() => history.replace('/customers')}\r\n                                    loading={mutation.isLoading}\r\n                                 >\r\n                                    Back\r\n                                 </Button>\r\n                                 <Button\r\n                                    icon={AiFillSave}\r\n                                    variant=\"primary\"\r\n                                    type=\"submit\"\r\n                                    loading={mutation.isLoading}\r\n                                    disabled={isError}\r\n                                 >\r\n                                    Save\r\n                                 </Button>\r\n                              </ButtonGroup>\r\n                           </div>\r\n                        </div>\r\n                     </Card.Footer>\r\n                  </form>\r\n               </Then>\r\n               <Else>\r\n                  <Card.Header>\r\n                     <Card.Title>View Customer</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Name</label>\r\n                           <h4>{query.data?.customer?.name ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Phone</label>\r\n                           <h4>{query.data?.customer?.phone ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                  </Card.Body>\r\n                  <Card.Footer>\r\n                     <div className=\"row\">\r\n                        <div className=\"col-xl-12 tw-justify-center\">\r\n                           <Button\r\n                              icon={AiFillCaretLeft}\r\n                              variant=\"warning light\"\r\n                              onClick={() => history.replace('/customers')}\r\n                              loading={mutation.isLoading}\r\n                           >\r\n                              Back\r\n                           </Button>\r\n                        </div>\r\n                     </div>\r\n                  </Card.Footer>\r\n               </Else>\r\n            </If>\r\n         </Card>\r\n         <When condition={isViewCustomer}>\r\n            <Card>\r\n               <When condition={query.isLoading}>\r\n                  <SpinnerOverlay />\r\n               </When>\r\n               <Card.Header>\r\n                  <Card.Title>View Related Sales</Card.Title>\r\n               </Card.Header>\r\n               <Card.Body>\r\n                  <If condition={query.data?.sales?.totalDocs > 0}>\r\n                     <Then>\r\n                        <Table className=\"tw-relative\" responsive>\r\n                           <thead>\r\n                              <tr>\r\n                                 <th className=\"width80\">\r\n                                    <strong>#</strong>\r\n                                 </th>\r\n                                 <th>\r\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('customer')}>\r\n                                       Customer\r\n                                       <span>\r\n                                          <When condition={sort.field !== 'customer'}>\r\n                                             <FaSort className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When condition={sort.field === 'customer' && sort.order === -1}>\r\n                                             <FaSortDown className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When condition={sort.field === 'customer' && sort.order === 1}>\r\n                                             <FaSortUp className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                       </span>\r\n                                    </strong>\r\n                                 </th>\r\n                                 <th>\r\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('inventory')}>\r\n                                       Model Number\r\n                                       <span>\r\n                                          <When condition={sort.field !== 'inventory'}>\r\n                                             <FaSort className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When condition={sort.field === 'inventory' && sort.order === -1}>\r\n                                             <FaSortDown className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When condition={sort.field === 'inventory' && sort.order === 1}>\r\n                                             <FaSortUp className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                       </span>\r\n                                    </strong>\r\n                                 </th>\r\n                                 <th>\r\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\r\n                                       Qty\r\n                                       <span>\r\n                                          <When condition={sort.field !== 'quantity'}>\r\n                                             <FaSort className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When condition={sort.field === 'quantity' && sort.order === -1}>\r\n                                             <FaSortDown className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When condition={sort.field === 'quantity' && sort.order === 1}>\r\n                                             <FaSortUp className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                       </span>\r\n                                    </strong>\r\n                                 </th>\r\n                                 <th>\r\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('retailPrice')}>\r\n                                       Total\r\n                                       <span>\r\n                                          <When condition={sort.field !== 'retailPrice'}>\r\n                                             <FaSort className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When condition={sort.field === 'retailPrice' && sort.order === -1}>\r\n                                             <FaSortDown className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When condition={sort.field === 'retailPrice' && sort.order === 1}>\r\n                                             <FaSortUp className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                       </span>\r\n                                    </strong>\r\n                                 </th>\r\n                                 <th>\r\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\r\n                                       Paid\r\n                                       <span>\r\n                                          <When condition={sort.field !== 'paid'}>\r\n                                             <FaSort className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When condition={sort.field === 'paid' && sort.order === -1}>\r\n                                             <FaSortDown className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When condition={sort.field === 'paid' && sort.order === 1}>\r\n                                             <FaSortUp className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                       </span>\r\n                                    </strong>\r\n                                 </th>\r\n                                 <th>\r\n                                    <strong>Remaining</strong>\r\n                                 </th>\r\n                              </tr>\r\n                           </thead>\r\n                           <tbody>\r\n                              {query.data?.sales &&\r\n                                 query.data?.sales?.docs.map((e, index) => {\r\n                                    const getRemainig = () => {\r\n                                       if (!e?.sourcePrice || !e?.paid) return null;\r\n                                       if (e.sourcePrice === e.paid) return null;\r\n                                       return e.sourcePrice - e.paid;\r\n                                    };\r\n                                    const getId = () => {\r\n                                       const id = e._id;\r\n                                       return id.slice(id.length - 3);\r\n                                    };\r\n                                    return (\r\n                                       <tr\r\n                                          key={`${e._id}`}\r\n                                          className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\r\n                                       >\r\n                                          <td>\r\n                                             <strong>{getId()}</strong>\r\n                                          </td>\r\n                                          <td>{e?.customer?.name ?? 'N/A'}</td>\r\n                                          <td>{e?.inventory?.modelNumber ?? 'N/A'}</td>\r\n                                          <td>{e?.quantity ?? 'N/a'}</td>\r\n                                          <td>{e?.retailPrice ?? 'N/A'}</td>\r\n                                          <td>{e?.paid ?? 'N/A'}</td>\r\n                                          <td>{getRemainig()}</td>\r\n\r\n                                          <td>\r\n                                             <OverlayTrigger\r\n                                                trigger={['hover', 'hover']}\r\n                                                placement=\"top\"\r\n                                                overlay={\r\n                                                   <Popover className=\"tw-border-gray-500\">\r\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                            : dayjs(e.createdAt).fromNow()\r\n                                                      }.`}</Popover.Content>\r\n                                                   </Popover>\r\n                                                }\r\n                                             >\r\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                             </OverlayTrigger>\r\n                                          </td>\r\n                                       </tr>\r\n                                    );\r\n                                 })}\r\n                           </tbody>\r\n                        </Table>\r\n                     </Then>\r\n                     <Else>\r\n                        <When condition={!query.isLoading}>\r\n                           <p className=\"tw-m-0\">No Sales created</p>\r\n                        </When>\r\n                     </Else>\r\n                  </If>\r\n               </Card.Body>\r\n            </Card>\r\n         </When>\r\n         <When condition={limit > 5 ? true : query.data?.sales?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data?.sales, ['docs'])}\r\n               isLimitDisabled={query.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerActions);\r\n",["592","593","594","595","596"],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\expenses\\AddNewExpense.js",["597","598","599","600","601","602"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport Select from 'jsx/components/Select';\r\nimport { setExpensesData, setExpensesVisibility } from 'store/actions';\r\nimport { useFormik } from 'formik';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst AddNewExpense = () => {\r\n   const state = useSelector((s) => s.expenses);\r\n   const dispatch = useDispatch();\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const titleRef = useRef();\r\n\r\n   const mutation = useMutation((payload) => post('/expenses', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('expenses');\r\n         dispatch(setExpensesVisibility(false));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add expense', err });\r\n      },\r\n   });\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         title: state.data.title ?? '',\r\n         amount: state.data.amount ?? '',\r\n      },\r\n      onSubmit: (values, form) => {\r\n         mutation.mutate(values);\r\n         form.resetForm();\r\n         dispatch(setExpensesData({}));\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (state.visible) titleRef.current.focus();\r\n      if (state.data.title) formik.setFieldValue('title', state.data.title);\r\n      if (state.data.amount) formik.setFieldValue('amount', state.data.amount);\r\n   }, [state.visible]);\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={state.visible}\r\n            onHide={() => {\r\n               dispatch(setExpensesVisibility(false));\r\n            }}\r\n            title=\"Add New Expense\"\r\n            isLoading={mutation.isLoading}\r\n            size=\"md\"\r\n            onSubmit={formik.handleSubmit}\r\n            submitButtonText=\"Save\"\r\n         >\r\n            <When condition={mutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alert.getAlert()}\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Title</label>\r\n                     <input\r\n                        ref={titleRef}\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        value={formik.values.title}\r\n                     />\r\n                  </div>\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Amount</label>\r\n                     <input\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"amount\"\r\n                        value={formik.values.amount}\r\n                     />\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AddNewExpense;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\Error404.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\expenses\\ExpenseActions.js",["603","604","605","606","607"],"import useUrlState from '@ahooksjs/use-url-state';\r\nimport { useDebounce } from 'ahooks';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport { useFormik } from 'formik';\r\nimport Button from 'jsx/components/Button';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport React, { useMemo, useState } from 'react';\r\nimport { ButtonGroup, Card } from 'react-bootstrap';\r\nimport { AiFillCaretLeft, AiFillSave } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport CreatableSelect from '../../components/CreatableSelect';\r\n\r\nconst ExpenseActions = () => {\r\n   dayjs.extend(relativeTime);\r\n\r\n   const history = useHistory();\r\n   const params = useParams();\r\n   const [isError, setIsError] = useState(false);\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const [urlState, setUrlState] = useUrlState({});\r\n\r\n   const alert = useAlert();\r\n   const getTypes = useQuery('expenses/types', () => get('/expenses/types', 1, 999));\r\n   const queryClient = useQueryClient();\r\n\r\n   const isView = useMemo(() => urlState?.type === 'view', [urlState.type]);\r\n   const isAdd = useMemo(() => params?.id === 'add', [params.id]);\r\n\r\n   const query = useQuery(\r\n      ['expenses', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\r\n      () => get(`/expenses/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\r\n      {\r\n         enabled: !isAdd,\r\n         onError: (err) => {\r\n            setIsError(true);\r\n            alert.setErrorAlert({\r\n               message: 'Invalid URL!',\r\n               err: { message: ['The page will redirect to manage expenses.'] },\r\n               callback: () => history.push('/expenses'),\r\n               duration: 3000,\r\n            });\r\n         },\r\n      }\r\n   );\r\n\r\n   const postMutation = useMutation((payload) => post('/expenses', payload), {\r\n      onSuccess: () => {\r\n         history.push('/expenses');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add product', err });\r\n      },\r\n   });\r\n   const postTypeMutation = useMutation((payload) => post('/expenses/types', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('expenses/types');\r\n      },\r\n   });\r\n\r\n   const mutation = useMemo(() => postMutation, [postMutation]);\r\n\r\n   if (!isView && !isAdd) {\r\n      history.push('/expenses');\r\n   }\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         title: '',\r\n         amount: '',\r\n         type: '',\r\n         comments: '',\r\n      },\r\n      validateOnChange: false,\r\n      validateOnBlur: false,\r\n      onSubmit: (values) => {\r\n         mutation.mutate(values);\r\n      },\r\n   });\r\n\r\n   const handleCreateType = async (title) => {\r\n      postTypeMutation.mutate({ title });\r\n      // history.push({ pathname: '/types', search: `?action=add&title=${title}&redirect=/products/add` });\r\n   };\r\n   return (\r\n      <>\r\n         <div className=\"row p-0 m-0\">\r\n            <div className=\"col-10\">\r\n               <PageTItle activeMenu=\"View\" motherMenu=\"Products\" />\r\n            </div>\r\n            <div className=\"col-1\">\r\n               <Button\r\n                  icon={AiFillCaretLeft}\r\n                  variant=\"warning light\"\r\n                  onClick={() => history.goBack()}\r\n                  loading={mutation.isLoading}\r\n               >\r\n                  Back\r\n               </Button>\r\n            </div>\r\n         </div>\r\n         {alert.getAlert()}\r\n         <Card>\r\n            <When condition={getTypes.isLoading || postTypeMutation.isLoading || query.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <If condition={isAdd}>\r\n               <Then>\r\n                  <form onSubmit={formik.handleSubmit}>\r\n                     <Card.Header>\r\n                        <Card.Title>Add New Expense</Card.Title>\r\n                     </Card.Header>\r\n                     <Card.Body>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Title</label>\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"title\"\r\n                                 disabled={isError}\r\n                                 value={formik.values.title}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Amount</label>\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"amount\"\r\n                                 disabled={isError}\r\n                                 value={formik.values.amount}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Comments</label>\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"comments\"\r\n                                 disabled={isError}\r\n                                 value={formik.values.comments}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Type</label>\r\n                              {isAdd && (\r\n                                 <CreatableSelect\r\n                                    isClearable\r\n                                    onChange={(e) => formik.setFieldValue('type', e?._id)}\r\n                                    options={\r\n                                       getTypes.data?.length > 0 &&\r\n                                       getTypes.data.map((e) => ({ ...e, label: e.title, value: e.title }))\r\n                                    }\r\n                                    onCreateOption={handleCreateType}\r\n                                 />\r\n                              )}\r\n                           </div>\r\n                        </div>\r\n                     </Card.Body>\r\n                     <Card.Footer>\r\n                        <div className=\"row\">\r\n                           <div className=\"col-xl-12 tw-justify-center\">\r\n                              <ButtonGroup>\r\n                                 {/* <Button\r\n                                    icon={AiFillCaretLeft}\r\n                                    variant=\"warning light\"\r\n                                    onClick={() => history.replace('/products')}\r\n                                    loading={mutation.isLoading}\r\n                                 >\r\n                                    Back\r\n                                 </Button> */}\r\n                                 <Button\r\n                                    icon={AiFillSave}\r\n                                    variant=\"primary\"\r\n                                    type=\"submit\"\r\n                                    loading={mutation.isLoading}\r\n                                    disabled={isError}\r\n                                 >\r\n                                    Save\r\n                                 </Button>\r\n                              </ButtonGroup>\r\n                           </div>\r\n                        </div>\r\n                     </Card.Footer>\r\n                  </form>\r\n               </Then>\r\n               <Else>\r\n                  <Card.Header>\r\n                     <Card.Title>View product</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Title</label>\r\n                           <h4>{query.data?.title ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Amount</label>\r\n                           <h4>{query.data?.amount ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Type</label>\r\n                           <h4>{query.data?.type?.title ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Comments</label>\r\n                           <h4>{query.data?.comments ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                  </Card.Body>\r\n               </Else>\r\n            </If>\r\n         </Card>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default ExpenseActions;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\customers\\AddNewCustomer.js",["608","609","610","611","612","613"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useMemo, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { get, getV2, patch, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport Select from 'jsx/components/Select';\r\nimport { setCustomersVisibility, setCustomersData } from 'store/actions';\r\nimport { useFormik } from 'formik';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst AddNewCustomer = () => {\r\n   const state = useSelector((s) => s.customers);\r\n   const dispatch = useDispatch();\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const nameRef = useRef();\r\n\r\n   const postMutation = useMutation((payload) => post('/customers', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('customers');\r\n         dispatch(setCustomersVisibility(false));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add customer', err });\r\n      },\r\n   });\r\n\r\n   const patchMutation = useMutation((payload) => patch(`/customers/id/${state.data._id}`, payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('customers');\r\n         dispatch(setCustomersVisibility(false));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to edit customer', err });\r\n      },\r\n   });\r\n\r\n   const mutation = useMemo(\r\n      () => (state.data.name ? patchMutation : postMutation),\r\n      [patchMutation, postMutation, state.data.name]\r\n   );\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         name: state.data.name ?? '',\r\n         phone: state.data.phone ?? '',\r\n      },\r\n      onSubmit: (values, form) => {\r\n         mutation.mutate(values);\r\n         form.resetForm();\r\n         dispatch(setCustomersData({}));\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (state.visible) nameRef.current.focus();\r\n      if (state.data.name) formik.setFieldValue('name', state.data.name);\r\n      if (state.data.phone) formik.setFieldValue('phone', state.data.phone);\r\n   }, [state.visible]);\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={state.visible}\r\n            onHide={() => {\r\n               dispatch(setCustomersVisibility(false));\r\n            }}\r\n            title={`${state.data.name ? 'Edit' : 'Add New'} Customer`}\r\n            isLoading={postMutation.isLoading || patchMutation.isLoading}\r\n            size=\"md\"\r\n            onSubmit={formik.handleSubmit}\r\n            submitButtonText=\"Save\"\r\n         >\r\n            <When condition={postMutation.isLoading || patchMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alert.getAlert()}\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Name</label>\r\n                     <input\r\n                        ref={nameRef}\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={formik.values.name}\r\n                     />\r\n                  </div>\r\n               </div>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Phone</label>\r\n                     <input\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"phone\"\r\n                        value={formik.values.phone}\r\n                     />\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AddNewCustomer;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\Registration.js",["614"],"import { post } from 'jsx/helpers';\r\nimport React, { useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst Register = () => {\r\n   const history = useHistory();\r\n\r\n   const [registrationData, setRegistrationData] = useState({});\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   const handleBlur = (e) => {\r\n      const newRegistrationData = { ...registrationData };\r\n      newRegistrationData[e.target.name] = e.target.value;\r\n      setRegistrationData(newRegistrationData);\r\n   };\r\n   const handleRegister = async (e) => {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n         const res = await post('/auth/register', registrationData);\r\n         setIsLoading(false);\r\n         // localStorage.setItem('auth_token', res.token);\r\n         history.push('/page-login');\r\n      } catch (err) {\r\n         setIsLoading(false);\r\n         alert(err.response?.data?.data ?? err.message);\r\n      }\r\n   };\r\n   return (\r\n      <>\r\n         <When condition={isLoading}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <div className=\"authincation\">\r\n            <div className=\"container p-0\">\r\n               <div className=\"row justify-content-center align-items-center tw-h-screen\">\r\n                  <div className=\"col-lg-6 col-md-9\">\r\n                     <div className=\"authincation-content\">\r\n                        <div className=\"row no-gutters\">\r\n                           <div className=\"col-xl-12\">\r\n                              <div className=\"auth-form\">\r\n                                 <h4 className=\"text-center mb-4\">Sign up your account</h4>\r\n                                 <form action=\"\" onSubmit={handleRegister}>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-username\">\r\n                                          <strong>Username</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-username\"\r\n                                          type=\"text\"\r\n                                          className=\"form-control\"\r\n                                          name=\"name\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    {/* <div className=\"form-group\">\r\n                                    <label className=\"mb-1\" htmlFor=\"registration-email\">\r\n                                       <strong>Email</strong>\r\n                                    </label>\r\n                                    <input\r\n                                       id=\"registration-email\"\r\n                                       type=\"email\"\r\n                                       className=\"form-control\"\r\n                                       placeholder=\"hello@example.com\"\r\n                                       name=\"Email\"\r\n                                       onChange={handleBlur}\r\n                                    />\r\n                                 </div> */}\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"password\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-confirm-password\">\r\n                                          <strong>Confirm Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-confirm-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"passwordConfirm\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"text-center mt-4\">\r\n                                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                          Sign me up\r\n                                       </button>\r\n                                    </div>\r\n                                 </form>\r\n                                 <div className=\"new-account mt-3\">\r\n                                    <p>\r\n                                       Already have an account?{' '}\r\n                                       <Link className=\"text-primary\" to=\"/page-login\">\r\n                                          Sign in\r\n                                       </Link>\r\n                                    </p>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\Login.js",["615","616","617","618"],"import { api, get, post, useAlert } from 'jsx/helpers';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { connect } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setLogin } from '../../store/auth/actions';\r\n\r\nconst Login = (props) => {\r\n   const history = useHistory();\r\n   const [loginData, setLoginData] = useState({});\r\n   const [isLoading, setIsLoading] = useState(false);\r\n\r\n   const alert = useAlert();\r\n\r\n   const handleBlur = (e) => {\r\n      const newLoginData = { ...loginData };\r\n      newLoginData[e.target.name] = e.target.value;\r\n      setLoginData(newLoginData);\r\n   };\r\n\r\n   useEffect(() => {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem('auth_token');\r\n      if (token) {\r\n         get(`auth/decode/${token}`)\r\n            .then((decode) => {\r\n               props.setLogin({ ...decode, auth_token: token });\r\n               localStorage.setItem('auth_token', token);\r\n               setIsLoading(false);\r\n               if (decode?.isConfirmed) {\r\n                  // if (decode?.role === userRoles.CASHIER) {\r\n                  //    history.push('/purchase');\r\n                  // } else if (decode?.role === userRoles.ADMINISTRATOR) {\r\n                  //    history.push('/dashboard');\r\n                  // } else {\r\n                  //    alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n                  // }\r\n                  history.push('/sale');\r\n               } else {\r\n                  localStorage.clear();\r\n                  props.setLogin({});\r\n                  alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n               }\r\n            })\r\n            .catch((err) => setIsLoading(false));\r\n      } else setIsLoading(false);\r\n   }, []);\r\n\r\n   const handleLogin = async (e) => {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n         const res = await api.post('/auth/login', loginData);\r\n         setIsLoading(false);\r\n         const decode = await get(`auth/decode/${res.data}`);\r\n         props.setLogin({ ...decode, auth_token: res.data });\r\n         localStorage.setItem('auth_token', res.data);\r\n         if (decode?.isConfirmed) {\r\n            // if (decode?.role === userRoles.CASHIER) {\r\n            //    history.push('/purchase');\r\n            // } else if (decode?.role === userRoles.ADMINISTRATOR) {\r\n            //    history.push('/dashboard');\r\n            // } else {\r\n            //    alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n            // }\r\n            window.location.reload();\r\n            // history.push('/purchase');\r\n         } else {\r\n            localStorage.clear();\r\n            props.setLogin({});\r\n            alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n         }\r\n      } catch (err) {\r\n         setIsLoading(false);\r\n         alert.setErrorAlert({ message: 'Unable to login', err });\r\n      }\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <When condition={isLoading}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <div className=\"authincation\">\r\n            <div className=\"container p-0\">\r\n               <div className=\"row justify-content-center align-items-center tw-h-screen\">\r\n                  <div className=\"col-lg-6 col-md-9\">\r\n                     <div className=\"authincation-content\">\r\n                        <div className=\"row no-gutters\">\r\n                           <div className=\"col-xl-12\">\r\n                              <div className=\"auth-form\">\r\n                                 {alert.getAlert()}\r\n                                 <h4 className=\"text-center mb-4\">Sign in your account</h4>\r\n                                 <form action=\"\" onSubmit={handleLogin}>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"login-name\">\r\n                                          <strong>Name</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"login-name\"\r\n                                          type=\"text\"\r\n                                          className=\"form-control\"\r\n                                          name=\"name\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"login-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"login-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"password\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-row d-flex justify-content-between mt-4 mb-2\">\r\n                                       <div className=\"form-group\">\r\n                                          <Link to=\"/page-forgot-password\">Forgot Password?</Link>\r\n                                       </div>\r\n                                    </div>\r\n                                    <div className=\"text-center\">\r\n                                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                          Sign Me In\r\n                                       </button>\r\n                                    </div>\r\n                                 </form>\r\n                                 <div className=\"new-account mt-3\">\r\n                                    <p>\r\n                                       Don't have an account?{' '}\r\n                                       <Link className=\"text-primary\" to=\"/page-register\">\r\n                                          Sign up\r\n                                       </Link>\r\n                                    </p>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setLogin: (payload) => dispatch(setLogin(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\suppliers\\SupplierActions.js",["619","620","621","622","623","624"],"import useUrlState from '@ahooksjs/use-url-state';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport { useFormik } from 'formik';\r\nimport Button from 'jsx/components/Button';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { ButtonGroup, Card, OverlayTrigger, Pagination, Popover, Table } from 'react-bootstrap';\r\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nimport _, { isArray } from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\n\r\nconst SupplierActions = (props) => {\r\n   const history = useHistory();\r\n   const params = useParams();\r\n   const [isError, setIsError] = useState(false);\r\n\r\n   const [urlState, setUrlState] = useUrlState({});\r\n\r\n   const alert = useAlert();\r\n   const isEditing = useMemo(\r\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\r\n      [urlState.type]\r\n   );\r\n   const isViewSupplier = useMemo(() => urlState?.type === 'view', [urlState.type]);\r\n   const isAddSupplier = useMemo(() => params?.id === 'add', [params.id]);\r\n\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: 'sourcePrice', order: 1 });\r\n\r\n   const query = useQuery(['supplier', params.id], () => get(`/suppliers/id/${params.id}`), {\r\n      enabled: !isAddSupplier,\r\n      onError: (err) => {\r\n         setIsError(true);\r\n         alert.setErrorAlert({\r\n            message: 'Unable to view supplier',\r\n            err,\r\n            callback: () => history.push('/suppliers'),\r\n            duration: 3000,\r\n         });\r\n      },\r\n   });\r\n   const patchMutation = useMutation((payload) => patch(`/suppliers/id/${params.id}`, payload), {\r\n      onSuccess: () => {\r\n         history.push('/suppliers');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({\r\n            message: 'Unable to edit supplier.',\r\n            err,\r\n         });\r\n      },\r\n   });\r\n\r\n   const postMutation = useMutation((payload) => post('/suppliers', payload), {\r\n      onSuccess: () => {\r\n         history.push('/suppliers');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add supplier', err });\r\n      },\r\n   });\r\n\r\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\r\n\r\n   if (!isEditing && !isViewSupplier && !isAddSupplier) {\r\n      history.push('/suppliers');\r\n   }\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         name: '',\r\n         phone: '',\r\n         company: '',\r\n      },\r\n      validateOnChange: false,\r\n      validateOnBlur: false,\r\n      onSubmit: (values) => {\r\n         mutation.mutate(values);\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (isEditing && query.data) {\r\n         formik.setFieldValue('name', query.data?.supplier?.name ?? '');\r\n         formik.setFieldValue('phone', query.data?.supplier?.phone ?? '');\r\n         formik.setFieldValue('company', query.data?.supplier?.company ?? '');\r\n      }\r\n   }, [isEditing, query.data]);\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Suppliers\" motherMenu=\"Manage\" />\r\n         {alert.getAlert()}\r\n         <Card>\r\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <If condition={isAddSupplier || isEditing}>\r\n               <Then>\r\n                  <form onSubmit={formik.handleSubmit}>\r\n                     <Card.Header>\r\n                        <Card.Title>{isEditing ? 'Edit Supplier' : 'Add New Supplier'}</Card.Title>\r\n                     </Card.Header>\r\n                     <Card.Body>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Name</label>\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"name\"\r\n                                 disabled={isError}\r\n                                 value={formik.values.name}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Phone</label>\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"phone\"\r\n                                 disabled={isError}\r\n                                 value={formik.values.phone}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Company</label>\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"company\"\r\n                                 disabled={isError}\r\n                                 value={formik.values.company}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                     </Card.Body>\r\n                     <Card.Footer>\r\n                        <div className=\"row\">\r\n                           <div className=\"col-xl-12 tw-justify-center\">\r\n                              <ButtonGroup>\r\n                                 <Button\r\n                                    icon={AiFillCaretLeft}\r\n                                    variant=\"warning light\"\r\n                                    onClick={() => history.replace('/suppliers')}\r\n                                    loading={mutation.isLoading}\r\n                                 >\r\n                                    Back\r\n                                 </Button>\r\n                                 <Button\r\n                                    icon={AiFillSave}\r\n                                    variant=\"primary\"\r\n                                    type=\"submit\"\r\n                                    loading={mutation.isLoading}\r\n                                    disabled={isError}\r\n                                 >\r\n                                    Save\r\n                                 </Button>\r\n                              </ButtonGroup>\r\n                           </div>\r\n                        </div>\r\n                     </Card.Footer>\r\n                  </form>\r\n               </Then>\r\n               <Else>\r\n                  <Card.Header>\r\n                     <Card.Title>View Supplier</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Name</label>\r\n                           <h4>{query.data?.supplier?.name ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Phone</label>\r\n                           <h4>{query.data?.supplier?.phone ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Company</label>\r\n                           <h4>{query.data?.supplier?.company ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                  </Card.Body>\r\n                  <Card>\r\n                     <When condition={query.isLoading}>\r\n                        <SpinnerOverlay />\r\n                     </When>\r\n                     <Card.Header>\r\n                        <Card.Title>View Related Purchases</Card.Title>\r\n                     </Card.Header>\r\n                     <Card.Body>\r\n                        <If condition={query.data?.inventories?.totalDocs > 0}>\r\n                           <Then>\r\n                              <Table className=\"tw-relative\" responsive>\r\n                                 <thead>\r\n                                    <tr>\r\n                                       <th className=\"width80\">\r\n                                          <strong>#</strong>\r\n                                       </th>\r\n                                       <th>\r\n                                          <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('supplier')}>\r\n                                             SUPPLIER\r\n                                             <span>\r\n                                                <When condition={sort.field !== 'supplier'}>\r\n                                                   <FaSort className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                                <When condition={sort.field === 'supplier' && sort.order === -1}>\r\n                                                   <FaSortDown className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                                <When condition={sort.field === 'supplier' && sort.order === 1}>\r\n                                                   <FaSortUp className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                             </span>\r\n                                          </strong>\r\n                                       </th>\r\n                                       <th>\r\n                                          <strong\r\n                                             className=\"tw-cursor-pointer\"\r\n                                             onClick={() => handleSort('modelNumber')}\r\n                                          >\r\n                                             MODEL NUMBER\r\n                                             <span>\r\n                                                <When condition={sort.field !== 'modelNumber'}>\r\n                                                   <FaSort className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                                <When condition={sort.field === 'modelNumber' && sort.order === -1}>\r\n                                                   <FaSortDown className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                                <When condition={sort.field === 'modelNumber' && sort.order === 1}>\r\n                                                   <FaSortUp className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                             </span>\r\n                                          </strong>\r\n                                       </th>\r\n                                       <th>\r\n                                          <strong\r\n                                             className=\"tw-cursor-pointer\"\r\n                                             onClick={() => handleSort('sourcePrice')}\r\n                                          >\r\n                                             PRICE\r\n                                             <span>\r\n                                                <When condition={sort.field !== 'sourcePrice'}>\r\n                                                   <FaSort className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                                <When condition={sort.field === 'sourcePrice' && sort.order === -1}>\r\n                                                   <FaSortDown className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                                <When condition={sort.field === 'sourcePrice' && sort.order === 1}>\r\n                                                   <FaSortUp className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                             </span>\r\n                                          </strong>\r\n                                       </th>\r\n                                       <th>\r\n                                          <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\r\n                                             PAID\r\n                                             <span>\r\n                                                <When condition={sort.field !== 'paid'}>\r\n                                                   <FaSort className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                                <When condition={sort.field === 'paid' && sort.order === -1}>\r\n                                                   <FaSortDown className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                                <When condition={sort.field === 'paid' && sort.order === 1}>\r\n                                                   <FaSortUp className=\"d-inline mx-1\" />\r\n                                                </When>\r\n                                             </span>\r\n                                          </strong>\r\n                                       </th>\r\n                                       <th>\r\n                                          <strong>REMAINING</strong>\r\n                                       </th>\r\n                                       <th>\r\n                                          <strong>QUANTITY</strong>\r\n                                       </th>\r\n                                    </tr>\r\n                                 </thead>\r\n                                 <tbody>\r\n                                    {query.data?.inventories?.docs?.map((e, index) => {\r\n                                       const getQuantity = () => {\r\n                                          let q = e.quantity.single;\r\n                                          // eslint-disable-next-line prefer-destructuring\r\n                                          if (isArray(q)) q = q[0];\r\n                                          return q;\r\n                                       };\r\n\r\n                                       const quantity = getQuantity();\r\n\r\n                                       const getSourcePrice = () => {\r\n                                          const q = getQuantity();\r\n                                          return e.sourcePrice * q;\r\n                                       };\r\n\r\n                                       const sourcePrice = getSourcePrice();\r\n\r\n                                       const getRemainig = () => {\r\n                                          if (sourcePrice === e.paid) return null;\r\n\r\n                                          return sourcePrice - e.paid;\r\n                                       };\r\n\r\n                                       const getId = () => {\r\n                                          const id = e._id;\r\n                                          return id.slice(id.length - 3);\r\n                                       };\r\n\r\n                                       return (\r\n                                          <tr\r\n                                             key={`${e._id}`}\r\n                                             className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\r\n                                          >\r\n                                             <td>\r\n                                                <strong className={e.isRemaining && 'tw-text-gray-50'}>\r\n                                                   {getId()}\r\n                                                </strong>\r\n                                             </td>\r\n                                             <td>{e?.supplier?.name ?? 'N/A'}</td>\r\n                                             <td>{e?.product?.modelNumber ?? 'N/A'}</td>\r\n                                             <td>{sourcePrice}</td>\r\n                                             <td>{e?.paid ?? 'N/A'}</td>\r\n                                             <td>{getRemainig()}</td>\r\n                                             <td>{quantity ? `${quantity} singles` : ''}</td>\r\n\r\n                                             <td>\r\n                                                <OverlayTrigger\r\n                                                   trigger={['hover', 'hover']}\r\n                                                   placement=\"top\"\r\n                                                   overlay={\r\n                                                      <Popover className=\"tw-border-gray-500\">\r\n                                                         <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                            dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                               ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                               : dayjs(e.createdAt).fromNow()\r\n                                                         }.`}</Popover.Content>\r\n                                                      </Popover>\r\n                                                   }\r\n                                                >\r\n                                                   <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                                </OverlayTrigger>\r\n                                             </td>\r\n                                          </tr>\r\n                                       );\r\n                                    })}\r\n                                 </tbody>\r\n                              </Table>\r\n                           </Then>\r\n                           <Else>\r\n                              <When condition={!query.isLoading}>\r\n                                 <p className=\"tw-m-0\">No Purchases created</p>\r\n                              </When>\r\n                           </Else>\r\n                        </If>\r\n                     </Card.Body>\r\n                  </Card>\r\n                  <When condition={setLimit > 5 ? true : query.data?.inventories?.totalPages > 1}>\r\n                     <Pagination\r\n                        page={page}\r\n                        onPageChange={setPage}\r\n                        onLimitChange={setLimit}\r\n                        {..._.omit(query.data, ['docs'])}\r\n                        isLimitDisabled={query.isLoading}\r\n                     />\r\n                  </When>\r\n               </Else>\r\n            </If>\r\n         </Card>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SupplierActions);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\suppliers\\AddNewSupplier.js",["625","626","627","628","629","630","631","632","633"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useMemo, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { get, getV2, patch, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport Select from 'jsx/components/Select';\r\nimport {\r\n   setTypesData,\r\n   setSu,\r\n   setSuppliersVisibilityppliersVisibility,\r\n   setSuppliersVisibility,\r\n   setSuppliersData,\r\n} from 'store/actions';\r\nimport { useFormik } from 'formik';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst AddNewSupplier = () => {\r\n   const state = useSelector((s) => s.suppliers);\r\n   const dispatch = useDispatch();\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const nameRef = useRef();\r\n\r\n   const postMutation = useMutation((payload) => post('/suppliers', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('suppliers');\r\n         dispatch(setSuppliersData({}));\r\n         dispatch(setSuppliersVisibility(false));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add supplier', err });\r\n      },\r\n   });\r\n\r\n   const patchMutation = useMutation((payload) => patch(`/suppliers/id/${state.data._id}`, payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('suppliers');\r\n         dispatch(setSuppliersVisibility(false));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to edit supplier', err });\r\n      },\r\n   });\r\n\r\n   const mutation = useMemo(\r\n      () => (state.data.name ? patchMutation : postMutation),\r\n      [patchMutation, postMutation, state.data.name]\r\n   );\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         name: state.data.name ?? '',\r\n         phone: state.data.phone ?? '',\r\n         company: state.data.company ?? '',\r\n      },\r\n      onSubmit: (values, form) => {\r\n         mutation.mutate(values);\r\n         form.resetForm();\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (state.visible) nameRef.current.focus();\r\n      if (state.data.name) formik.setFieldValue('name', state.data.name);\r\n      if (state.data.phone) formik.setFieldValue('phone', state.data.phone);\r\n      if (state.data.company) formik.setFieldValue('company', state.data.company);\r\n   }, [state.visible]);\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={state.visible}\r\n            onHide={() => {\r\n               dispatch(setSuppliersVisibility(false));\r\n            }}\r\n            title={`${state.data._id ? 'Edit' : 'Add New'} Supplier`}\r\n            isLoading={postMutation.isLoading || patchMutation.isLoading}\r\n            size=\"md\"\r\n            onSubmit={formik.handleSubmit}\r\n            submitButtonText=\"Save\"\r\n         >\r\n            <When condition={postMutation.isLoading || patchMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alert.getAlert()}\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Name</label>\r\n                     <input\r\n                        ref={nameRef}\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={formik.values.name}\r\n                     />\r\n                  </div>\r\n               </div>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Phone</label>\r\n                     <input\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"phone\"\r\n                        value={formik.values.phone}\r\n                     />\r\n                  </div>\r\n               </div>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Company</label>\r\n                     <input\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"company\"\r\n                        value={formik.values.company}\r\n                     />\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AddNewSupplier;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\purchase\\AddPurchase.js",["634","635","636","637","638","639","640","641","642","643","644","645"],"/* eslint-disable react/no-this-in-sfc */\r\nimport Button from 'jsx/components/Button';\r\nimport ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, getV2, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { ButtonGroup, Card, Table } from 'react-bootstrap';\r\nimport { AiFillCaretLeft, AiFillSave } from 'react-icons/ai';\r\nimport { FaMinusCircle, FaPlusCircle } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { setProductsData, setProductsVisibility, setSuppliersData, setSuppliersVisibility } from 'store/actions';\r\nimport { batch, useDispatch } from 'react-redux';\r\nimport cls from 'classnames';\r\nimport _ from 'lodash';\r\nimport produce from 'immer';\r\nimport QueryString from 'qs';\r\nimport CreatableSelect from '../../components/CreatableSelect';\r\n\r\nconst PurchaseActions = () => {\r\n   const history = useHistory();\r\n\r\n   const alert = useAlert();\r\n   const dispatch = useDispatch();\r\n   const location = useLocation();\r\n   const [purchaseId, setPurchaseId] = useState(null);\r\n\r\n   const [purchase, setPurchase] = useState({\r\n      supplier: null,\r\n      paid: '0',\r\n      products: [{ product: null, sourcePrice: '0', variants: { a: '', b: '', c: '', d: '' }, quantity: '' }],\r\n   });\r\n\r\n   const existingPurchase = useQuery(['existing-purchase', purchaseId], () => getV2(`/purchases/id/${purchaseId}`), {\r\n      enabled: false,\r\n      onSuccess: (data) => {\r\n         console.log(data);\r\n\r\n         const updatedPurchase = produce(purchase, (draft) => {\r\n            draft.supplier = data.supplier;\r\n            draft.paid = data.paid;\r\n\r\n            const processedProducts = data.products.map((p) => {\r\n               const updatedProduct = { ...p };\r\n               const unitValue = updatedProduct.product.unit.value;\r\n               if (updatedProduct.product.type.title.toLowerCase() === 'tile') {\r\n                  Object.entries(updatedProduct.variants).forEach(([key, value]) => {\r\n                     let stringifiedQuantity = value / unitValue;\r\n                     if (!Number.isInteger(stringifiedQuantity)) stringifiedQuantity = `${value}t`;\r\n                     else stringifiedQuantity = `${stringifiedQuantity.toString()}b`;\r\n                     updatedProduct.variants[key] = stringifiedQuantity;\r\n                  });\r\n               } else {\r\n                  let stringifiedQuantity = updatedProduct.quantity / unitValue;\r\n                  if (!Number.isInteger(stringifiedQuantity)) stringifiedQuantity = `${updatedProduct.quantity}t`;\r\n                  else stringifiedQuantity = `${stringifiedQuantity.toString()}b`;\r\n                  updatedProduct.quantity = stringifiedQuantity;\r\n               }\r\n\r\n               console.log(updatedProduct);\r\n               return updatedProduct;\r\n            });\r\n\r\n            draft.products = processedProducts;\r\n         });\r\n\r\n         setPurchase(updatedPurchase);\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to get existing purchcase', err });\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      const pId = location.state?.purchaseId;\r\n      if (pId) setPurchaseId(pId);\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n      console.log('purchaseId:%s', purchaseId);\r\n      if (purchaseId) existingPurchase.refetch();\r\n   }, [purchaseId]);\r\n\r\n   const suppliers = useQuery('all-suppliers', () =>\r\n      getV2('/suppliers', { page: 1, limit: 1000, search: '', sort: { name: 1 } })\r\n   );\r\n   const unitsQuery = useQuery(['units'], () => get('/units', 1, 10000, ''));\r\n   const products = useQuery('all-products', () =>\r\n      getV2('/products', { page: 1, limit: 1000, search: '', sort: { modelNumber: 1 } })\r\n   );\r\n\r\n   const postMutation = useMutation((payload) => post('/purchases', payload), {\r\n      onSuccess: () => {\r\n         history.replace('/purchase');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add Purchase', err });\r\n      },\r\n   });\r\n\r\n   const patchMutation = useMutation((payload) => patch(`/purchases/id/${purchaseId}`, payload), {\r\n      onSuccess: () => {\r\n         history.replace('/purchase');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to edit Purchase', err });\r\n      },\r\n   });\r\n\r\n   const mutation = useMemo(\r\n      () => (purchaseId ? patchMutation : postMutation),\r\n      [patchMutation, postMutation, purchaseId]\r\n   );\r\n\r\n   const handleChangeProduct = (key, value, index) => {\r\n      const updatedPurchase = produce(purchase, (draft) => {\r\n         draft.products[index][key] = value;\r\n      });\r\n      setPurchase(updatedPurchase);\r\n   };\r\n\r\n   const handleChangeVariantQuantity = (key, value, index) => {\r\n      const updatedPurchase = produce(purchase, (draft) => {\r\n         draft.products[index].variants[key] = value;\r\n      });\r\n      setPurchase(updatedPurchase);\r\n   };\r\n\r\n   const handleAddProduct = () => {\r\n      const updatedPurchase = produce(purchase, (draft) => {\r\n         draft.products.push({\r\n            product: null,\r\n            sourcePrice: '0',\r\n            variants: { a: '', b: '', c: '', d: '' },\r\n            quantity: '',\r\n         });\r\n      });\r\n      setPurchase(updatedPurchase);\r\n   };\r\n\r\n   const handleRemoveProduct = (productIndex) => {\r\n      const updatedPurchase = produce(purchase, (draft) => {\r\n         draft.products.splice(productIndex, 1);\r\n      });\r\n      setPurchase(updatedPurchase);\r\n   };\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n\r\n      let error = '';\r\n\r\n      const isValidQuantity = (qty) => qty.includes('t') || qty.includes('T') || qty.includes('b') || qty.includes('B');\r\n\r\n      const payload = produce(purchase, (draft) => {\r\n         draft.supplier = draft.supplier?._id;\r\n\r\n         const referenceProducts = _.cloneDeep(draft.products);\r\n\r\n         const updatedProducts = [];\r\n\r\n         referenceProducts.forEach((referenceProduct, index) => {\r\n            // product & price is must\r\n            if (referenceProduct.product && referenceProduct.sourcePrice !== '') {\r\n               const processedProduct = {};\r\n               // send only product _id to backend\r\n               processedProduct.product = referenceProduct.product._id;\r\n               processedProduct.sourcePrice = Number(referenceProduct.sourcePrice);\r\n\r\n               if (referenceProduct.quantity) {\r\n                  if (!isValidQuantity(referenceProduct.quantity)) error = true;\r\n                  processedProduct.quantity = referenceProduct.quantity;\r\n               } else if (referenceProduct.variants) {\r\n                  const variants = _.cloneDeep(referenceProduct.variants);\r\n\r\n                  // delete empty variants\r\n                  Object.entries(variants).forEach(([key, value]) => {\r\n                     if (!value) return delete variants[key];\r\n                     if (!isValidQuantity(value)) error = true;\r\n                  });\r\n\r\n                  if (Object.keys(variants).length > 0) processedProduct.variants = variants;\r\n               }\r\n\r\n               if (processedProduct.variants || processedProduct.quantity) updatedProducts.push(processedProduct);\r\n            }\r\n         });\r\n\r\n         draft.products = updatedProducts;\r\n      });\r\n\r\n      const { supplier, paid } = payload;\r\n      const messages = [];\r\n\r\n      if (!supplier) messages.push('Please enter a supplier');\r\n      if (paid === undefined || paid === null) messages.push('Please enter the paid amount');\r\n      if (!payload.products.length) messages.push('Please enter product(s)');\r\n      if (error) messages.push('Please enter valid units with quantity(s)');\r\n\r\n      if (messages.length) {\r\n         alert.setErrorAlert({\r\n            messages: 'Unable to add new purchase',\r\n            err: { response: { data: { data: messages } } },\r\n         });\r\n         return;\r\n      }\r\n\r\n      mutation.mutate(payload);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <When\r\n            condition={\r\n               mutation.isLoading ||\r\n               unitsQuery.isLoading ||\r\n               products.isLoading ||\r\n               suppliers.isLoading ||\r\n               (purchaseId ? existingPurchase.isLoading : false)\r\n            }\r\n         >\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <PageTItle activeMenu=\"Add New Purchase\" motherMenu=\"Manage\" />\r\n         {alert.getAlert()}\r\n         <form onSubmit={handleSubmit}>\r\n            <Card>\r\n               <Card.Header>\r\n                  <Card.Title>Add New Purchase</Card.Title>\r\n               </Card.Header>\r\n               <Card.Body>\r\n                  <div className=\"row\">\r\n                     <div className=\"form-group col-xl-2\">\r\n                        <label className=\"col-form-label\">Supplier</label>\r\n                        <CreatableSelect\r\n                           value={\r\n                              purchase.supplier ? { label: purchase.supplier.name, value: purchase.supplier } : null\r\n                           }\r\n                           onChange={(supplier) => setPurchase((prev) => ({ ...prev, supplier: supplier.value }))}\r\n                           options={suppliers.data?.docs.map((supplier) => ({ label: supplier.name, value: supplier }))}\r\n                           onCreateOption={(name) =>\r\n                              batch(() => {\r\n                                 dispatch(setSuppliersData({ name }));\r\n                                 dispatch(setSuppliersVisibility(true));\r\n                              })\r\n                           }\r\n                        />\r\n                     </div>\r\n                     <div className=\"form-group col-xl-2\">\r\n                        <label className=\"col-form-label\">Paid</label>\r\n                        <input\r\n                           className=\"form-control\"\r\n                           onChange={(e) => setPurchase((prev) => ({ ...prev, paid: e.target.value }))}\r\n                           type=\"text\"\r\n                           name=\"paid\"\r\n                           value={purchase.paid}\r\n                        />\r\n                     </div>\r\n                     <div className=\"form-group tw-mt-[38px]\">\r\n                        <Button variant=\"primary\" onClick={handleAddProduct}>\r\n                           Add New Product\r\n                        </Button>\r\n                     </div>\r\n                  </div>\r\n               </Card.Body>\r\n            </Card>\r\n\r\n            <div className=\"tw-flex tw-flex-wrap tw-gap-4\">\r\n               {purchase.products.map((product, index) => (\r\n                  <Card className=\"tw-max-w-[350px] tw-min-h-[435px]\" key={`product-${index}`}>\r\n                     <Card.Body>\r\n                        <div className=\"form-group\">\r\n                           <label className=\"col-form-label\">Product</label>\r\n                           <CreatableSelect\r\n                              value={\r\n                                 purchase.products[index].product\r\n                                    ? {\r\n                                         label: purchase.products[index].product.modelNumber,\r\n                                         value: purchase.products[index].product,\r\n                                      }\r\n                                    : null\r\n                              }\r\n                              onChange={(p) => handleChangeProduct('product', p.value, index)}\r\n                              options={products.data?.docs.map((p) => ({\r\n                                 label: p.modelNumber,\r\n                                 value: p,\r\n                              }))}\r\n                              onCreateOption={(modelNumber) =>\r\n                                 batch(() => {\r\n                                    dispatch(setProductsData({ modelNumber }));\r\n                                    dispatch(setProductsVisibility(true));\r\n                                 })\r\n                              }\r\n                           />\r\n                        </div>\r\n                        <When condition={purchase.products[index].product}>\r\n                           <If condition={purchase.products[index].product?.type.title.toLowerCase() !== 'tile'}>\r\n                              <Then>\r\n                                 <div className=\"form-group\">\r\n                                    <label className=\"col-form-label\">Quantity</label>\r\n                                    <input\r\n                                       className=\"form-control\"\r\n                                       onChange={(e) => handleChangeProduct('quantity', e.target.value, index)}\r\n                                       type=\"text\"\r\n                                       name=\"modelNumber\"\r\n                                       value={purchase.products[index].quantity}\r\n                                    />\r\n                                 </div>\r\n                              </Then>\r\n                              <Else>\r\n                                 <div className=\"form-group\">\r\n                                    <label className=\"col-form-label\">Quantity</label>\r\n                                    <div className=\"row tw-px-4\">\r\n                                       <div className=\"col-xl-3 tw-p-0\">\r\n                                          <input\r\n                                             className=\"form-control\"\r\n                                             onChange={(e) => handleChangeVariantQuantity('a', e.target.value, index)}\r\n                                             type=\"text\"\r\n                                             name=\"modelNumber\"\r\n                                             placeholder=\"A\"\r\n                                             // disabled={isError}\r\n                                             value={purchase.products[index].variants?.a}\r\n                                          />\r\n                                       </div>\r\n                                       <div className=\"col-xl-3 tw-p-0\">\r\n                                          <input\r\n                                             className=\"form-control\"\r\n                                             onChange={(e) => handleChangeVariantQuantity('b', e.target.value, index)}\r\n                                             type=\"text\"\r\n                                             name=\"modelNumber\"\r\n                                             placeholder=\"B\"\r\n                                             // disabled={isError}\r\n                                             value={purchase.products[index].variants?.b}\r\n                                          />\r\n                                       </div>\r\n                                       <div className=\"col-xl-3 tw-p-0\">\r\n                                          <input\r\n                                             className=\"form-control\"\r\n                                             onChange={(e) => handleChangeVariantQuantity('c', e.target.value, index)}\r\n                                             type=\"text\"\r\n                                             name=\"modelNumber\"\r\n                                             placeholder=\"C\"\r\n                                             // disabled={isError}\r\n                                             value={purchase.products[index].variants?.c}\r\n                                          />\r\n                                       </div>\r\n                                       <div className=\"col-xl-3 tw-p-0\">\r\n                                          <input\r\n                                             className=\"form-control\"\r\n                                             onChange={(e) => handleChangeVariantQuantity('d', e.target.value, index)}\r\n                                             type=\"text\"\r\n                                             name=\"modelNumber\"\r\n                                             placeholder=\"D\"\r\n                                             // disabled={isError}\r\n                                             value={purchase.products[index].variants?.d}\r\n                                          />\r\n                                       </div>\r\n                                    </div>\r\n                                 </div>\r\n                              </Else>\r\n                           </If>\r\n                        </When>\r\n                        <div className={cls('form-group', { 'tw-mt-[126px]': !purchase.products[index].product })}>\r\n                           <label className=\"col-form-label\">Price</label>\r\n                           <input\r\n                              className=\"form-control\"\r\n                              onChange={(e) => handleChangeProduct('sourcePrice', e.target.value, index)}\r\n                              type=\"number\"\r\n                              name=\"modelNumber\"\r\n                              value={purchase.products[index].sourcePrice}\r\n                           />\r\n                        </div>\r\n                        <When condition={index > 0}>\r\n                           <Button\r\n                              variant=\"danger\"\r\n                              className=\"tw-w-full tw-flex tw-justify-center\"\r\n                              onClick={() => handleRemoveProduct(index)}\r\n                           >\r\n                              Remove\r\n                           </Button>\r\n                        </When>\r\n                     </Card.Body>\r\n                  </Card>\r\n               ))}\r\n            </div>\r\n\r\n            <Card>\r\n               <Card.Footer>\r\n                  <div className=\"row\">\r\n                     <div className=\"col-xl-12 tw-justify-center\">\r\n                        <ButtonGroup>\r\n                           <Button\r\n                              icon={AiFillCaretLeft}\r\n                              variant=\"warning light\"\r\n                              onClick={() => history.replace('/purchase')}\r\n                              loading={mutation.isLoading}\r\n                           >\r\n                              Back\r\n                           </Button>\r\n                           <Button icon={AiFillSave} variant=\"primary\" type=\"submit\" loading={mutation.isLoading}>\r\n                              Save\r\n                           </Button>\r\n                        </ButtonGroup>\r\n                     </div>\r\n                  </div>\r\n               </Card.Footer>\r\n            </Card>\r\n         </form>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default PurchaseActions;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\ProductActions.js",["646","647","648","649","650","651","652","653"],"import useUrlState from '@ahooksjs/use-url-state';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\n\r\nimport { useFormik } from 'formik';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport Select from 'jsx/components/Select';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { ButtonGroup, Card, OverlayTrigger, Popover, Table } from 'react-bootstrap';\r\nimport { AiFillCaretLeft, AiFillEye, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport CreatableSelect from '../../components/CreatableSelect';\r\n\r\nconst ProductActions = (props) => {\r\n   dayjs.extend(relativeTime);\r\n\r\n   const history = useHistory();\r\n   const params = useParams();\r\n   const [isError, setIsError] = useState(false);\r\n   const [salePage, setSalePage] = useState(1);\r\n   const [saleLimit, setSaleLimit] = useState(5);\r\n   const [saleSort, setSaleSort] = useState({ field: 'sourcePrice', order: 1 });\r\n   const [inventoriesPage, setInventoriesPage] = useState(1);\r\n   const [inventoriesLimit, setInventoriesLimit] = useState(5);\r\n   const [inventoriesSort, setInventoriesSort] = useState({ field: 'sourcePrice', order: 1 });\r\n\r\n   const [urlState, setUrlState] = useUrlState({});\r\n\r\n   const alert = useAlert();\r\n   const getTypes = useQuery('types', () => get('/types'));\r\n   const queryClient = useQueryClient();\r\n\r\n   const isEditing = useMemo(\r\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\r\n      [urlState.type]\r\n   );\r\n   const isViewProduct = useMemo(() => urlState?.type === 'view', [urlState.type]);\r\n   const isAddProduct = useMemo(() => params?.id === 'add', [params.id]);\r\n\r\n   const query = useQuery(\r\n      [\r\n         'product',\r\n         params.id,\r\n         salePage,\r\n         saleLimit,\r\n         saleSort.field,\r\n         saleSort.order,\r\n         inventoriesPage,\r\n         inventoriesLimit,\r\n         inventoriesSort.field,\r\n         inventoriesSort.order,\r\n      ],\r\n      () =>\r\n         get(\r\n            `/products/id/${params.id}?salePage=${salePage}&saleLimit=${saleLimit}&saleSort[${saleSort.field}]=${saleSort.order}&inventoriesPage=${inventoriesPage}&inventoriesLimit=${inventoriesLimit}&inventoriesSort[${inventoriesSort.field}]=${inventoriesSort.order}`\r\n         ),\r\n      {\r\n         enabled: !isAddProduct,\r\n         onError: (err) => {\r\n            setIsError(true);\r\n            alert.setErrorAlert({\r\n               message: 'Unable to view product',\r\n               err,\r\n               duration: 3000,\r\n            });\r\n         },\r\n      }\r\n   );\r\n\r\n   const patchMutation = useMutation((payload) => patch(`/products/id/${params.id}`, payload), {\r\n      onSuccess: () => {\r\n         history.push('/products');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({\r\n            message: 'Unable to edit product.',\r\n            err,\r\n         });\r\n      },\r\n   });\r\n\r\n   const postMutation = useMutation((payload) => post('/products', payload), {\r\n      onSuccess: () => {\r\n         history.push('/products');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add product', err });\r\n      },\r\n   });\r\n   const postTypeMutation = useMutation((payload) => post('/types', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('types');\r\n      },\r\n   });\r\n\r\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\r\n\r\n   if (!isEditing && !isViewProduct && !isAddProduct) {\r\n      history.push('/products');\r\n   }\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         modelNumber: '',\r\n         retailPrice: '',\r\n         type: '',\r\n         unit: '',\r\n      },\r\n      validateOnChange: false,\r\n      validateOnBlur: false,\r\n      onSubmit: (values) => {\r\n         console.log(values);\r\n         values.unit = values.unit.label;\r\n         mutation.mutate(values);\r\n      },\r\n   });\r\n\r\n   const units = useQuery(['units', formik.values.type], () =>\r\n      get(`/units?type=${formik.values.type}`, 1, 1000, null, 1, '')\r\n   );\r\n\r\n   const handleCreateType = async (title) => {\r\n      postTypeMutation.mutate({ title });\r\n      // history.push({ pathname: '/types', search: `?action=add&title=${title}&redirect=/products/add` });\r\n   };\r\n   const handleInventoriesSort = (key) => {\r\n      setInventoriesSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (isEditing && query.data?.product) {\r\n         formik.setFieldValue('modelNumber', query.data?.product?.modelNumber ?? '');\r\n         formik.setFieldValue('retailPrice', query.data?.product?.retailPrice ?? '');\r\n         formik.setFieldValue('type', query.data?.product?.type?._id ?? '');\r\n\r\n         const unit = query.data?.product?.unit;\r\n\r\n         formik.setFieldValue('unit', unit ? { label: unit, value: unit } : {});\r\n      }\r\n   }, [isEditing, query.data?.product]);\r\n\r\n   // console.log(isEditing, units.data, formik.values.unit);\r\n\r\n   return (\r\n      <>\r\n         <div className=\"row p-0 m-0\">\r\n            <div className=\"col-10\">\r\n               <PageTItle activeMenu=\"View\" motherMenu=\"Products\" />\r\n            </div>\r\n            <div className=\"col-1\">\r\n               <Button\r\n                  icon={AiFillCaretLeft}\r\n                  variant=\"warning light\"\r\n                  onClick={() => history.replace('/products')}\r\n                  loading={mutation.isLoading}\r\n               >\r\n                  Back\r\n               </Button>\r\n            </div>\r\n         </div>\r\n         {alert.getAlert()}\r\n         <Card>\r\n            <When condition={getTypes.isLoading || postTypeMutation.isLoading || query.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <If condition={isAddProduct || isEditing}>\r\n               <Then>\r\n                  <form onSubmit={formik.handleSubmit}>\r\n                     <Card.Header>\r\n                        <Card.Title>{isEditing ? 'Edit Product' : 'Add New product'}</Card.Title>\r\n                     </Card.Header>\r\n                     <Card.Body>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Model Number</label>\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"modelNumber\"\r\n                                 disabled={isError}\r\n                                 value={formik.values.modelNumber}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-6\">\r\n                              <label className=\"col-form-label\">Type</label>\r\n                              {(query.data?.product || isAddProduct) && (\r\n                                 <CreatableSelect\r\n                                    isClearable\r\n                                    defaultValue={\r\n                                       isEditing && {\r\n                                          _id: query.data?.product?.type?.id,\r\n                                          label: query.data?.product?.type?.title,\r\n                                          value: query.data?.product?.type?.title,\r\n                                       }\r\n                                    }\r\n                                    onChange={(e) => formik.setFieldValue('type', e?._id)}\r\n                                    options={\r\n                                       getTypes.data?.length > 0 &&\r\n                                       getTypes.data.map((e) => ({ ...e, label: e.title, value: e.title }))\r\n                                    }\r\n                                    onCreateOption={handleCreateType}\r\n                                 />\r\n                              )}\r\n                           </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                           <div className=\"form-group col-xl-3\">\r\n                              <label className=\"col-form-label\">Retail Price</label>\r\n                              <input\r\n                                 style={{ height: '38px' }}\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"retailPrice\"\r\n                                 disabled={isError}\r\n                                 value={formik.values.retailPrice}\r\n                              />\r\n                           </div>\r\n                           <div className=\"form-group col-xl-3\">\r\n                              <label className=\"col-form-label\">Unit</label>\r\n                              <Select\r\n                                 width=\"tw-w-full\"\r\n                                 onChange={(e) => formik.setFieldValue('unit', { label: e.label, value: e.label })}\r\n                                 value={formik.values.unit}\r\n                                 options={units.data?.map((e) => ({ label: e.title, value: e }))}\r\n                              />\r\n                           </div>\r\n                        </div>\r\n                     </Card.Body>\r\n                     <Card.Footer>\r\n                        <div className=\"row\">\r\n                           <div className=\"col-xl-12 tw-justify-center\">\r\n                              <ButtonGroup>\r\n                                 {/* <Button\r\n                                    icon={AiFillCaretLeft}\r\n                                    variant=\"warning light\"\r\n                                    onClick={() => history.replace('/products')}\r\n                                    loading={mutation.isLoading}\r\n                                 >\r\n                                    Back\r\n                                 </Button> */}\r\n                                 <Button\r\n                                    icon={AiFillSave}\r\n                                    variant=\"primary\"\r\n                                    type=\"submit\"\r\n                                    loading={mutation.isLoading}\r\n                                    disabled={isError}\r\n                                 >\r\n                                    Save\r\n                                 </Button>\r\n                              </ButtonGroup>\r\n                           </div>\r\n                        </div>\r\n                     </Card.Footer>\r\n                  </form>\r\n               </Then>\r\n               <Else>\r\n                  <Card.Header>\r\n                     <Card.Title>View product</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Model Number</label>\r\n                           <h4>{query.data?.product?.modelNumber ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Retail Price</label>\r\n                           <h4>{query.data?.product?.retailPrice ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Unit</label>\r\n                           <h4>{query.data?.product?.unit ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Type</label>\r\n                           <h4>{query.data?.product?.type?.title ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                  </Card.Body>\r\n               </Else>\r\n            </If>\r\n         </Card>\r\n         <When condition={isViewProduct}>\r\n            <Card>\r\n               <When condition={query.isLoading}>\r\n                  <SpinnerOverlay />\r\n               </When>\r\n               <Card.Header>\r\n                  <Card.Title>View Related Purchases</Card.Title>\r\n               </Card.Header>\r\n               <Card.Body>\r\n                  <If condition={query.data?.inventories?.totalDocs > 0}>\r\n                     <Then>\r\n                        <Table className=\"tw-relative\" responsive>\r\n                           <thead>\r\n                              <tr>\r\n                                 <th className=\"width80\">\r\n                                    <strong>#</strong>\r\n                                 </th>\r\n                                 <th>\r\n                                    <strong\r\n                                       className=\"tw-cursor-pointer\"\r\n                                       onClick={() => handleInventoriesSort('supplier')}\r\n                                    >\r\n                                       SUPPLIER\r\n                                       <span>\r\n                                          <When condition={inventoriesSort.field !== 'supplier'}>\r\n                                             <FaSort className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When\r\n                                             condition={\r\n                                                inventoriesSort.field === 'supplier' && inventoriesSort.order === -1\r\n                                             }\r\n                                          >\r\n                                             <FaSortDown className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When\r\n                                             condition={\r\n                                                inventoriesSort.field === 'supplier' && inventoriesSort.order === 1\r\n                                             }\r\n                                          >\r\n                                             <FaSortUp className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                       </span>\r\n                                    </strong>\r\n                                 </th>\r\n                                 <th>\r\n                                    <strong\r\n                                       className=\"tw-cursor-pointer\"\r\n                                       onClick={() => handleInventoriesSort('modelNumber')}\r\n                                    >\r\n                                       MODEL NUMBER\r\n                                       <span>\r\n                                          <When condition={inventoriesSort.field !== 'modelNumber'}>\r\n                                             <FaSort className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When\r\n                                             condition={\r\n                                                inventoriesSort.field === 'modelNumber' && inventoriesSort.order === -1\r\n                                             }\r\n                                          >\r\n                                             <FaSortDown className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When\r\n                                             condition={\r\n                                                inventoriesSort.field === 'modelNumber' && inventoriesSort.order === 1\r\n                                             }\r\n                                          >\r\n                                             <FaSortUp className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                       </span>\r\n                                    </strong>\r\n                                 </th>\r\n                                 <th>\r\n                                    <strong\r\n                                       className=\"tw-cursor-pointer\"\r\n                                       onClick={() => handleInventoriesSort('sourcePrice')}\r\n                                    >\r\n                                       PRICE\r\n                                       <span>\r\n                                          <When condition={inventoriesSort.field !== 'sourcePrice'}>\r\n                                             <FaSort className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When\r\n                                             condition={\r\n                                                inventoriesSort.field === 'sourcePrice' && inventoriesSort.order === -1\r\n                                             }\r\n                                          >\r\n                                             <FaSortDown className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When\r\n                                             condition={\r\n                                                inventoriesSort.field === 'sourcePrice' && inventoriesSort.order === 1\r\n                                             }\r\n                                          >\r\n                                             <FaSortUp className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                       </span>\r\n                                    </strong>\r\n                                 </th>\r\n                                 <th>\r\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleInventoriesSort('paid')}>\r\n                                       PAID\r\n                                       <span>\r\n                                          <When condition={inventoriesSort.field !== 'paid'}>\r\n                                             <FaSort className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When\r\n                                             condition={\r\n                                                inventoriesSort.field === 'paid' && inventoriesSort.order === -1\r\n                                             }\r\n                                          >\r\n                                             <FaSortDown className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                          <When\r\n                                             condition={inventoriesSort.field === 'paid' && inventoriesSort.order === 1}\r\n                                          >\r\n                                             <FaSortUp className=\"d-inline mx-1\" />\r\n                                          </When>\r\n                                       </span>\r\n                                    </strong>\r\n                                 </th>\r\n                              </tr>\r\n                           </thead>\r\n                           <tbody>\r\n                              {query.data?.inventories?.docs.map((e, index) => (\r\n                                 <tr key={`${e._id}`} className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}>\r\n                                    <td>\r\n                                       <strong className={e.isRemaining && 'tw-text-gray-50'}>\r\n                                          {query.data.inventories?.pagingCounter * (index + 1)}\r\n                                       </strong>\r\n                                    </td>\r\n                                    <td>{e?.supplier?.name ?? 'N/A'}</td>\r\n                                    <td>{e?.product?.modelNumber ?? 'N/A'}</td>\r\n                                    <td>{e?.sourcePrice ?? 'N/a'}</td>\r\n                                    <td>{e?.paid ?? 'N/A'}</td>\r\n                                    <td>\r\n                                       <OverlayTrigger\r\n                                          trigger={['hover', 'hover']}\r\n                                          placement=\"top\"\r\n                                          overlay={\r\n                                             <Popover className=\"tw-border-gray-500\">\r\n                                                <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                   dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                      ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                      : dayjs(e.createdAt).fromNow()\r\n                                                }.`}</Popover.Content>\r\n                                             </Popover>\r\n                                          }\r\n                                       >\r\n                                          <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                       </OverlayTrigger>\r\n                                    </td>\r\n                                 </tr>\r\n                              ))}\r\n                           </tbody>\r\n                        </Table>\r\n                     </Then>\r\n                     <Else>\r\n                        <When condition={!query.isLoading}>\r\n                           <p className=\"tw-m-0\">No Purchases created</p>\r\n                        </When>\r\n                     </Else>\r\n                  </If>\r\n               </Card.Body>\r\n            </Card>\r\n         </When>\r\n         <When condition={inventoriesLimit > 5 ? true : query.data?.inventories?.totalPages > 1}>\r\n            <Pagination\r\n               page={inventoriesPage}\r\n               onPageChange={setInventoriesPage}\r\n               onLimitChange={setInventoriesLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductActions);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\inventory\\AddNewInventory.js",["654","655","656","657","658"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useMemo, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { get, getV2, patch, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport Select from 'jsx/components/Select';\r\nimport { setInventoriesData, setInventoriesVisibility, setProductsData, setProductsVisibility } from 'store/actions';\r\nimport { useFormik } from 'formik';\r\nimport { QueryClient, useMutation, useQueryClient } from 'react-query';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport produce from 'immer';\r\n\r\nconst AddNewInventory = () => {\r\n   const state = useSelector((s) => s.inventories);\r\n   const dispatch = useDispatch();\r\n   const alert = useAlert();\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const products = useQuery('all-products', () =>\r\n      getV2('/products', { page: 1, limit: 1000, sort: { modelNumber: 1 }, search: '' })\r\n   );\r\n\r\n   const postMutation = useMutation((payload) => post('/inventories', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('inventories');\r\n         dispatch(setInventoriesVisibility(false));\r\n         dispatch(setInventoriesData({}));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add inventory', err });\r\n      },\r\n   });\r\n\r\n   const patchMutation = useMutation((payload) => patch('/inventories', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('inventories');\r\n         dispatch(setInventoriesVisibility(false));\r\n         dispatch(setInventoriesData({}));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to edit inventory', err });\r\n      },\r\n   });\r\n\r\n   const mutation = useMemo(\r\n      () => (state.data.product ? patchMutation : postMutation),\r\n      [patchMutation, postMutation, state.data.product]\r\n   );\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         product: state.data.product,\r\n         quantity: state.data.quantity ?? '',\r\n         variants: {\r\n            a: state.data.variants?.a ?? '',\r\n            b: state.data.variants?.b ?? '',\r\n            c: state.data.variants?.c ?? '',\r\n            d: state.data.variants?.d ?? '',\r\n         },\r\n      },\r\n      onSubmit: (values, form) => {\r\n         const payload = { product: values.product._id };\r\n\r\n         const { variants, quantity } = values;\r\n\r\n         if (quantity) payload.quantity = quantity;\r\n         else {\r\n            const filteredVariants = {};\r\n            Object.entries(variants).forEach(([key, value]) => {\r\n               if (value) filteredVariants[key] = value;\r\n            });\r\n\r\n            if (Object.values(filteredVariants).length) payload.variants = filteredVariants;\r\n         }\r\n\r\n         mutation.mutate([payload]);\r\n         form.resetForm();\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (state.data.product) formik.setFieldValue('product', state.data.product);\r\n      if (state.data.quantity) formik.setFieldValue('quantity', state.data.quantity);\r\n      if (state.data.variants) formik.setFieldValue('variants', state.data.variants);\r\n   }, [state.visible]);\r\n\r\n   const handleChangeVariantQuantity = (key, value) => {\r\n      const updatedValues = produce(formik.values, (draft) => {\r\n         draft.variants[key] = value;\r\n      });\r\n      formik.setValues(updatedValues);\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={state.visible}\r\n            onHide={() => {\r\n               dispatch(setInventoriesVisibility(false));\r\n               dispatch(setInventoriesData({}));\r\n            }}\r\n            title={`${state.data.product ? 'Edit' : 'Add New'} Inventory`}\r\n            isLoading={products.isLoading || mutation.isLoading}\r\n            size=\"md\"\r\n            onSubmit={formik.handleSubmit}\r\n            submitButtonText=\"Save\"\r\n         >\r\n            <When condition={products.isLoading || mutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alert.getAlert()}\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Product</label>\r\n                     <CreatableSelect\r\n                        defaultValue={\r\n                           state.data.product\r\n                              ? { label: state.data.product.modelNumber, value: state.data.product }\r\n                              : {}\r\n                        }\r\n                        onChange={(product) => formik.setFieldValue('product', product.value)}\r\n                        options={products.data?.docs.map((product) => ({ label: product.modelNumber, value: product }))}\r\n                        onCreateOption={(modelNumber) => {\r\n                           dispatch(setProductsData({ modelNumber }));\r\n                           dispatch(setProductsVisibility(true));\r\n                        }}\r\n                     />\r\n                  </div>\r\n                  <When condition={formik.values.product}>\r\n                     <If condition={formik.values.product?.type.title.toLowerCase() !== 'tile'}>\r\n                        <Then>\r\n                           <div className=\"form-group col-12\">\r\n                              <label className=\"col-form-label\">Quantity</label>\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 onChange={formik.handleChange}\r\n                                 type=\"text\"\r\n                                 name=\"quantity\"\r\n                                 value={formik.values.quantity}\r\n                              />\r\n                           </div>\r\n                        </Then>\r\n                        <Else>\r\n                           <div className=\"form-group col-xl-12\">\r\n                              <label className=\"col-form-label\">Quantity</label>\r\n                              <div className=\"row tw-mx-0\">\r\n                                 <div className=\"col-xl-3 tw-p-0\">\r\n                                    <input\r\n                                       className=\"form-control\"\r\n                                       onChange={(e) => handleChangeVariantQuantity('a', e.target.value)}\r\n                                       type=\"text\"\r\n                                       placeholder=\"A\"\r\n                                       value={formik.values.variants.a}\r\n                                    />\r\n                                 </div>\r\n                                 <div className=\"col-xl-3 tw-p-0\">\r\n                                    <input\r\n                                       className=\"form-control\"\r\n                                       onChange={(e) => handleChangeVariantQuantity('b', e.target.value)}\r\n                                       type=\"text\"\r\n                                       placeholder=\"B\"\r\n                                       value={formik.values.variants.b}\r\n                                    />\r\n                                 </div>\r\n                                 <div className=\"col-xl-3 tw-p-0\">\r\n                                    <input\r\n                                       className=\"form-control\"\r\n                                       onChange={(e) => handleChangeVariantQuantity('c', e.target.value)}\r\n                                       type=\"text\"\r\n                                       placeholder=\"C\"\r\n                                       value={formik.values.variants.c}\r\n                                    />\r\n                                 </div>\r\n                                 <div className=\"col-xl-3 tw-p-0\">\r\n                                    <input\r\n                                       className=\"form-control\"\r\n                                       onChange={(e) => handleChangeVariantQuantity('d', e.target.value)}\r\n                                       type=\"text\"\r\n                                       placeholder=\"D\"\r\n                                       value={formik.values.variants.d}\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </Else>\r\n                     </If>\r\n                  </When>\r\n               </div>\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AddNewInventory;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\units\\AddNewUnit.js",["659","660","661"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport Select from 'jsx/components/Select';\r\nimport { setUnitsData, setUnitsVisibility } from 'store/actions';\r\nimport { useFormik } from 'formik';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst AddNewUnit = () => {\r\n   const state = useSelector((s) => s.units);\r\n   const dispatch = useDispatch();\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const titleRef = useRef();\r\n\r\n   const types = useQuery('types', () => getV2('/types'));\r\n\r\n   const mutation = useMutation((payload) => post('/units', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('units');\r\n         dispatch(setUnitsVisibility(false));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\r\n      },\r\n   });\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         title: state.data.title ?? '',\r\n         value: state.data.value ?? '',\r\n         type: state.data.type,\r\n      },\r\n      onSubmit: (values, form) => {\r\n         mutation.mutate(values);\r\n         form.resetForm();\r\n         dispatch(setUnitsData({}));\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (state.visible) titleRef.current.focus();\r\n      if (state.data.title) formik.setFieldValue('title', state.data.title);\r\n      if (state.data.value) formik.setFieldValue('value', state.data.value);\r\n      if (state.data.type) formik.setFieldValue('type', state.data.type);\r\n   }, [state.visible]);\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={state.visible}\r\n            onHide={() => {\r\n               dispatch(setUnitsVisibility(false));\r\n            }}\r\n            title=\"Add New Unit\"\r\n            isLoading={mutation.isLoading}\r\n            size=\"md\"\r\n            onSubmit={formik.handleSubmit}\r\n            submitButtonText=\"Save\"\r\n         >\r\n            <When condition={mutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alert.getAlert()}\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Title</label>\r\n                     <input\r\n                        ref={titleRef}\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        value={formik.values.title}\r\n                     />\r\n                  </div>\r\n               </div>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Value</label>\r\n                     <input\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"number\"\r\n                        name=\"value\"\r\n                        value={formik.values.value}\r\n                     />\r\n                  </div>\r\n               </div>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Type</label>\r\n                     {!types.isLoading && !types.isError && (\r\n                        <CreatableSelect\r\n                           onChange={(type) => formik.setFieldValue('type', type.value)}\r\n                           options={types.data?.map((type) => ({ label: type.title, value: type }))}\r\n                           onCreateOption={(title) => {\r\n                              dispatch(setUnitsData({ title }));\r\n                              dispatch(setUnitsVisibility(true));\r\n                           }}\r\n                        />\r\n                     )}\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AddNewUnit;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\types\\TypeActions.js",["662","663","664","665","666","667","668","669"],"import { useDebounce } from 'ahooks';\r\nimport Button from 'jsx/components/Button';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, useAlert, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Card, ButtonGroup, Table, OverlayTrigger, Popover } from 'react-bootstrap';\r\nimport { When, If, Else, Then } from 'react-if';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\n\r\nimport {\r\n   AiFillDelete,\r\n   AiFillEdit,\r\n   AiFillEye,\r\n   AiFillPlusCircle,\r\n   AiOutlineQuestionCircle,\r\n   AiFillCaretLeft,\r\n} from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\n\r\nconst TypeActions = () => {\r\n   dayjs.extend(relativeTime);\r\n\r\n   const history = useHistory();\r\n   const params = useParams();\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n   const alert = useAlert();\r\n\r\n   const query = useQuery(\r\n      ['type', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\r\n      () => get(`/types/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\r\n      {\r\n         onError: (err) => {\r\n            alert.setErrorAlert({\r\n               message: 'Invalid URL!',\r\n               err: { message: ['The page will redirect to manage products.'] },\r\n               callback: () => history.push('/products'),\r\n               duration: 3000,\r\n            });\r\n         },\r\n      }\r\n   );\r\n\r\n   const handleOnClickEdit = (obj) => {\r\n      history.push({ pathname: `/products/${obj._id}`, search: `?type=edit` });\r\n   };\r\n\r\n   const handleOnClickView = (obj) => {\r\n      history.push({ pathname: `/products/${obj._id}`, search: `?type=view` });\r\n   };\r\n   const handleOnClickAdd = () => {\r\n      history.push('/products/add');\r\n   };\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n   return (\r\n      <>\r\n         <div className=\"row p-0 m-0\">\r\n            <div className=\"col-10\">\r\n               <PageTItle activeMenu=\"Type\" motherMenu=\"Products\" />\r\n            </div>\r\n            <div className=\"col-1\">\r\n               <Button\r\n                  icon={AiFillCaretLeft}\r\n                  variant=\"warning light\"\r\n                  onClick={() => history.goBack()}\r\n                  loading={query.isLoading}\r\n               >\r\n                  Back\r\n               </Button>\r\n            </div>\r\n         </div>\r\n         {alert.getAlert()}\r\n         <div className=\"row mb-3\">\r\n            <div className=\"col-xl-5 my-2\">\r\n               <Card className=\"h-100\">\r\n                  <When condition={query.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n\r\n                  <Card.Header>\r\n                     <Card.Title>View Type</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <div className=\"row\">\r\n                        <div className=\"form-group col-xl-6\">\r\n                           <label className=\"col-form-label\">Title</label>\r\n                           <h4>{query.data?.type?.title ?? 'N/A'}</h4>\r\n                        </div>\r\n                     </div>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div>\r\n            <div className=\"col-xl-7 my-2\">\r\n               <Card className=\"h-100\">\r\n                  <When condition={query.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n\r\n                  <Card.Header>\r\n                     <Card.Title>View Units</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <Table className=\"tw-relative\" responsive>\r\n                        <thead>\r\n                           <tr>\r\n                              <th className=\"width80\">\r\n                                 <strong>#</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong className=\"tw-cursor-pointer\">TITLE</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong className=\"tw-cursor-pointer\">VALUE</strong>\r\n                              </th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {query.data?.units?.map((e, index) => (\r\n                              <tr key={`${e._id}`}>\r\n                                 <td>\r\n                                    <strong>{index + 1}</strong>\r\n                                 </td>\r\n                                 <td>{e.title}</td>\r\n                                 <td>{e.value}</td>\r\n                                 <td>\r\n                                    <OverlayTrigger\r\n                                       trigger={['hover', 'hover']}\r\n                                       placement=\"top\"\r\n                                       overlay={\r\n                                          <Popover className=\"tw-border-gray-500\">\r\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                   : dayjs(e.createdAt).fromNow()\r\n                                             }.`}</Popover.Content>\r\n                                          </Popover>\r\n                                       }\r\n                                    >\r\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                    </OverlayTrigger>\r\n                                 </td>\r\n                              </tr>\r\n                           ))}\r\n                        </tbody>\r\n                     </Table>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div>\r\n         </div>\r\n\r\n         {/* VIEW PRODUCTS */}\r\n         <Card>\r\n            <When condition={query.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <Card.Header>\r\n               <Card.Title>View Products</Card.Title>\r\n               <ButtonGroup className=\"tw-float-right\">\r\n                  <input\r\n                     type=\"text\"\r\n                     className=\"input-rounded tw-pl-6 tw-shadow-inner tw-ring-1 py-1\"\r\n                     placeholder=\"Search products...\"\r\n                     onChange={(e) => setSearch(e.target.value)}\r\n                  />\r\n               </ButtonGroup>\r\n            </Card.Header>\r\n            <Card.Body>\r\n               <If condition={query.data?.products?.totalDocs > 0}>\r\n                  <Then>\r\n                     <Table className=\"tw-relative\" responsive>\r\n                        <thead>\r\n                           <tr>\r\n                              <th className=\"width80\">\r\n                                 <strong>#</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('title')}>\r\n                                    TITLE\r\n                                    <span>\r\n                                       <When condition={sort.field !== 'title'}>\r\n                                          <FaSort className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                       <When condition={sort.field === 'title' && sort.order === -1}>\r\n                                          <FaSortDown className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                       <When condition={sort.field === 'title' && sort.order === 1}>\r\n                                          <FaSortUp className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                    </span>\r\n                                 </strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('modelNumber')}>\r\n                                    MODEL#\r\n                                    <span>\r\n                                       <When condition={sort.field !== 'modelNumber'}>\r\n                                          <FaSort className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                       <When condition={sort.field === 'modelNumber' && sort.order === -1}>\r\n                                          <FaSortDown className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                       <When condition={sort.field === 'modelNumber' && sort.order === 1}>\r\n                                          <FaSortUp className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                    </span>\r\n                                 </strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('type')}>\r\n                                    TYPE\r\n                                    <span>\r\n                                       <When condition={sort.field !== 'type'}>\r\n                                          <FaSort className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                       <When condition={sort.field === 'type' && sort.order === -1}>\r\n                                          <FaSortDown className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                       <When condition={sort.field === 'type' && sort.order === 1}>\r\n                                          <FaSortUp className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                    </span>\r\n                                 </strong>\r\n                              </th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {query.data?.products?.docs.map((e, index) => (\r\n                              <tr key={`${e._id}`}>\r\n                                 <td>\r\n                                    <strong>{query.data?.products?.pagingCounter * (index + 1)}</strong>\r\n                                 </td>\r\n                                 <td>{e.title}</td>\r\n                                 <td>{e.modelNumber}</td>\r\n                                 <td>{(e.type && e.type?.title) ?? 'N/A'}</td>\r\n                                 <td>\r\n                                    <OverlayTrigger\r\n                                       trigger={['hover', 'hover']}\r\n                                       placement=\"top\"\r\n                                       overlay={\r\n                                          <Popover className=\"tw-border-gray-500\">\r\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                   : dayjs(e.createdAt).fromNow()\r\n                                             }.`}</Popover.Content>\r\n                                          </Popover>\r\n                                       }\r\n                                    >\r\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                    </OverlayTrigger>\r\n                                 </td>\r\n                              </tr>\r\n                           ))}\r\n                        </tbody>\r\n                     </Table>\r\n                  </Then>\r\n                  <Else>\r\n                     <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                        <p className=\"tw-m-0\">No products created</p>\r\n                     </When>\r\n                     <When condition={!query.isLoading && debouncedSearchValue}>\r\n                        <p className=\"tw-m-0\">No result found!</p>\r\n                     </When>\r\n                  </Else>\r\n               </If>\r\n            </Card.Body>\r\n         </Card>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default TypeActions;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\types\\AddNewType.js",["670","671","672","673","674","675"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport Select from 'jsx/components/Select';\r\nimport { setTypesData, setTypesVisibility } from 'store/actions';\r\nimport { useFormik } from 'formik';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst AddNewType = () => {\r\n   const state = useSelector((s) => s.types);\r\n   const dispatch = useDispatch();\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const titleRef = useRef();\r\n\r\n   const mutation = useMutation((payload) => post('/types', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('types');\r\n         dispatch(setTypesVisibility(false));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add type', err });\r\n      },\r\n   });\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         title: state.data.title ?? '',\r\n      },\r\n      onSubmit: (values, form) => {\r\n         mutation.mutate(values);\r\n         form.resetForm();\r\n         dispatch(setTypesData({}));\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (state.visible) titleRef.current.focus();\r\n      if (state.data.title) formik.setFieldValue('title', state.data.title);\r\n   }, [state.visible]);\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={state.visible}\r\n            onHide={() => {\r\n               dispatch(setTypesVisibility(false));\r\n            }}\r\n            title=\"Add New Type\"\r\n            isLoading={mutation.isLoading}\r\n            size=\"md\"\r\n            onSubmit={formik.handleSubmit}\r\n            submitButtonText=\"Save\"\r\n         >\r\n            <When condition={mutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alert.getAlert()}\r\n\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Title</label>\r\n                     <input\r\n                        ref={titleRef}\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        value={formik.values.title}\r\n                     />\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AddNewType;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\salaries\\AddNewSalary.js",["676","677","678","679","680"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport Select from 'jsx/components/Select';\r\nimport { setEmployeesData, setEmployeesVisibility, setSalariesData, setSalariesVisibility } from 'store/actions';\r\nimport { useFormik } from 'formik';\r\nimport { QueryClient, useMutation, useQueryClient } from 'react-query';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { When } from 'react-if';\r\n\r\nconst AddNewSalary = () => {\r\n   const state = useSelector((s) => s.salaries);\r\n   const dispatch = useDispatch();\r\n   const alert = useAlert();\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const employees = useQuery('all-employees', () =>\r\n      getV2('/employees', { page: 1, limit: 1000, search: '', sort: { name: 1 } })\r\n   );\r\n\r\n   const mutation = useMutation((payload) => post('/salaries', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('salaries');\r\n         dispatch(setSalariesVisibility(false));\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add salary', err });\r\n      },\r\n   });\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         employee: state.data.employee,\r\n         amount: state.data.amount ?? '',\r\n      },\r\n      onSubmit: (values, form) => {\r\n         const payload = { amount: values.amount, employee: values.employee?._id };\r\n         mutation.mutate(payload);\r\n         form.resetForm();\r\n         dispatch(setSalariesData({}));\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (state.data.amount) formik.setFieldValue('amount', state.data.amount);\r\n   }, [state.visible]);\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={state.visible}\r\n            onHide={() => {\r\n               dispatch(setSalariesVisibility(false));\r\n            }}\r\n            title=\"Add New Salary\"\r\n            isLoading={employees.isLoading || mutation.isLoading}\r\n            size=\"md\"\r\n            onSubmit={formik.handleSubmit}\r\n            submitButtonText=\"Save\"\r\n         >\r\n            <When condition={employees.isLoading || mutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alert.getAlert()}\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Employee</label>\r\n                     <CreatableSelect\r\n                        width=\"tw-w-full\"\r\n                        onChange={(employee) => {\r\n                           formik.setFieldValue('employee', employee.value);\r\n                           formik.setFieldValue('amount', employee.value.salary);\r\n                        }}\r\n                        options={employees.data?.docs.map((employee) => ({ label: employee.name, value: employee }))}\r\n                        onCreateOption={(name) => {\r\n                           dispatch(setEmployeesData({ name }));\r\n                           dispatch(setEmployeesVisibility(true));\r\n                        }}\r\n                     />\r\n                  </div>\r\n                  <div className=\"form-group col-xl-12\">\r\n                     <label className=\"col-form-label\">Salary</label>\r\n                     <input\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"amount\"\r\n                        value={formik.values.amount}\r\n                     />\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AddNewSalary;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\customers\\index.js",["681","682"],"import Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, Row, Table, Popover, OverlayTrigger } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { useHistory } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport swal from 'sweetalert';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { useDebounce } from 'ahooks';\r\nimport { batch, connect, useDispatch } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setCustomersData, setCustomersVisibility } from 'store/actions';\r\n\r\ndayjs.extend(relativeTime);\r\nconst Customers = (props) => {\r\n   const history = useHistory();\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: 1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n   const dispatch = useDispatch();\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['customers', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\r\n      get('/customers', page, limit, sort.field, sort.order, debouncedSearchValue)\r\n   );\r\n   const deleteMutation = useMutation((id) => del(`/customers/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('customers');\r\n         alert.setAlert({\r\n            message: 'Customer deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete customer', err });\r\n      },\r\n   });\r\n\r\n   const handleEdit = (customer) => {\r\n      batch(() => {\r\n         dispatch(setCustomersData(customer));\r\n         dispatch(setCustomersVisibility(true));\r\n      });\r\n   };\r\n\r\n   const handleOnClickView = (obj) => {\r\n      history.push({ pathname: `/customers/${obj._id}`, search: `?type=view` });\r\n   };\r\n   const handleOnClickAdd = () => {\r\n      history.push('/customers/add');\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Customers\" motherMenu=\"Manage\" />\r\n         <div className=\"row tw-mb-8\">\r\n            <div className=\"col-xl-6\">\r\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                  Add New Customer\r\n               </Button>\r\n            </div>\r\n\r\n            <div className=\"col-xl-6\">\r\n               <ButtonGroup className=\"tw-float-right\">\r\n                  <input\r\n                     type=\"text\"\r\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\r\n                     placeholder=\"Search Customers...\"\r\n                     disabled={deleteMutation.isLoading}\r\n                     onChange={(e) => setSearch(e.target.value)}\r\n                  />\r\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\r\n                     Search\r\n                  </Button>\r\n               </ButtonGroup>\r\n            </div>\r\n         </div>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Customers</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('name')}>\r\n                                          NAME\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'name'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'name' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'name' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('phone')}>\r\n                                          Phone\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'phone'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'phone' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'phone' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                 </tr>\r\n                              </thead>\r\n\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{query.data.pagingCounter + index}</strong>\r\n                                       </td>\r\n                                       <td>{e.name}</td>\r\n                                       <td>{e.phone}</td>\r\n                                       <td>\r\n                                          <OverlayTrigger\r\n                                             trigger=\"hover\"\r\n                                             placement=\"top\"\r\n                                             overlay={\r\n                                                <Popover className=\"tw-border-gray-500\">\r\n                                                   <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                      dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                         ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                         : dayjs(e.createdAt).fromNow()\r\n                                                   }.`}</Popover.Content>\r\n                                                </Popover>\r\n                                             }\r\n                                          >\r\n                                             <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                          </OverlayTrigger>\r\n                                       </td>\r\n                                       <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                          <td>\r\n                                             <ButtonGroup>\r\n                                                <Button\r\n                                                   variant=\"light\"\r\n                                                   size=\"sm\"\r\n                                                   icon={AiFillEdit}\r\n                                                   onClick={() => handleEdit(e)}\r\n                                                >\r\n                                                   Edit\r\n                                                </Button>\r\n                                                <Button\r\n                                                   variant=\"danger\"\r\n                                                   size=\"sm\"\r\n                                                   icon={AiFillDelete}\r\n                                                   onClick={() => handleOnClickDelete(e._id)}\r\n                                                >\r\n                                                   Delete\r\n                                                </Button>\r\n                                             </ButtonGroup>\r\n                                          </td>\r\n                                       </When>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No customers created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Customers);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\index.js",["683","684"],"import { useDebounce } from 'ahooks';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { setEmployeesData, setEmployeesVisibility } from 'store/actions';\r\nimport swal from 'sweetalert';\r\n\r\nconst Employees = () => {\r\n   dayjs.extend(relativeTime);\r\n   const history = useHistory();\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const query = useQuery(['employees', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\r\n      get('/employees', page, limit, sort.field, sort.order, debouncedSearchValue)\r\n   );\r\n   const deleteMutation = useMutation((id) => del(`/employees/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('employees');\r\n         alert.setAlert({\r\n            message: 'Employee deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete employee', err });\r\n      },\r\n   });\r\n\r\n   const handleOnClickEdit = (obj) => {\r\n      dispatch(setEmployeesVisibility(true));\r\n      dispatch(setEmployeesData(obj));\r\n   };\r\n\r\n   const handleOnClickAdd = () => {\r\n      dispatch(setEmployeesVisibility(true));\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"employees\" motherMenu=\"Manage\" />\r\n         <div className=\"row tw-mb-8\">\r\n            <div className=\"col-xl-6\">\r\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                  Add New employee\r\n               </Button>\r\n            </div>\r\n\r\n            <div className=\"col-xl-6\">\r\n               <ButtonGroup className=\"tw-float-right\">\r\n                  <input\r\n                     type=\"text\"\r\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\r\n                     placeholder=\"Search Employees...\"\r\n                     disabled={deleteMutation.isLoading}\r\n                     onChange={(e) => setSearch(e.target.value)}\r\n                  />\r\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\r\n                     Search\r\n                  </Button>\r\n               </ButtonGroup>\r\n            </div>\r\n         </div>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Employees</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('name')}>\r\n                                          NAME\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'name'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'name' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'name' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('phone')}>\r\n                                          PHONE#\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'phone'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'phone' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'phone' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('cnic')}>\r\n                                          CNIC\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'cnic'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'cnic' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'cnic' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('address')}>\r\n                                          ADDRESS\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'address'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'address' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'address' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('salary')}>\r\n                                          SALARY\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'salary'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'salary' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'salary' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{query.data.pagingCounter + index}</strong>\r\n                                       </td>\r\n                                       <td>{e.name}</td>\r\n                                       <td>{e.phone}</td>\r\n                                       <td>{e.cnic}</td>\r\n                                       <td>{e.address}</td>\r\n                                       <td>{e.salary}</td>\r\n                                       <td>\r\n                                          <div className=\"tw-flex tw-items-center tw-gap-2\">\r\n                                             <OverlayTrigger\r\n                                                trigger={['hover', 'hover']}\r\n                                                placement=\"top\"\r\n                                                overlay={\r\n                                                   <Popover className=\"tw-border-gray-500\">\r\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                            : dayjs(e.createdAt).fromNow()\r\n                                                      }.`}</Popover.Content>\r\n                                                   </Popover>\r\n                                                }\r\n                                             >\r\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                             </OverlayTrigger>\r\n                                             <ButtonGroup>\r\n                                                <Button\r\n                                                   variant=\"light\"\r\n                                                   size=\"sm\"\r\n                                                   icon={AiFillEdit}\r\n                                                   onClick={() => handleOnClickEdit(e)}\r\n                                                >\r\n                                                   Edit\r\n                                                </Button>\r\n                                                <Button\r\n                                                   variant=\"danger\"\r\n                                                   size=\"sm\"\r\n                                                   icon={AiFillDelete}\r\n                                                   onClick={() => handleOnClickDelete(e._id)}\r\n                                                >\r\n                                                   Delete\r\n                                                </Button>\r\n                                             </ButtonGroup>\r\n                                          </div>\r\n                                       </td>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No employees created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Employees;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\inventory\\index.js",["685","686","687","688","689","690","691","692","693"],"/* eslint-disable prefer-destructuring */\r\nimport { useDebounce } from 'ahooks';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport produce from 'immer';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, getV2, useAlert, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport getQuantity from 'jsx/helpers/getQuantity';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _, { isArray } from 'lodash';\r\nimport React, { useEffect, useState, Fragment } from 'react';\r\n\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport { AiFillDelete, AiFillEdit, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { useDispatch, connect, batch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { setInventoriesData, setInventoriesVisibility } from 'store/actions';\r\nimport swal from 'sweetalert';\r\n\r\nconst Khaata = (props) => {\r\n   const history = useHistory();\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const dispatch = useDispatch();\r\n\r\n   const query = useQuery(['inventories', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\r\n      getV2('/inventories', {\r\n         page,\r\n         limit,\r\n         search: debouncedSearchValue,\r\n         sort: { [sort.field]: sort.order },\r\n      })\r\n   );\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   const mutation = useMutation((id) => del(`/inventories/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('inventories');\r\n         alert.setAlert({\r\n            message: 'Inventory deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete user', err });\r\n      },\r\n   });\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            mutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const handleOnClickAdd = () => {\r\n      dispatch(setInventoriesVisibility(true));\r\n   };\r\n\r\n   const handleEdit = (inventory) => {\r\n      const updatedInventory = produce(inventory, (draft) => {\r\n         if (inventory.product.type.title.toLowerCase() === 'tile') {\r\n            Object.entries(inventory.variants).forEach(([key, value]) => {\r\n               if (value[0] > 0) draft.variants[key] = `${value[0]}b`;\r\n               else draft.variants[key] = `${value[1]}t`;\r\n            });\r\n         } else {\r\n            const quantity = inventory.quantity;\r\n            if (quantity[0] > 0) draft.quantity = `${quantity[0]}b`;\r\n            else draft.variants = `${quantity[1]}t`;\r\n         }\r\n      });\r\n\r\n      batch(() => {\r\n         dispatch(setInventoriesData(updatedInventory));\r\n         dispatch(setInventoriesVisibility(true));\r\n      });\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Inventory\" motherMenu=\"Diamond Tiles\" />\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading || mutation.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Inventory</Card.Title>\r\n                     <ButtonGroup className=\"tw-float-right\">\r\n                        <input\r\n                           type=\"text\"\r\n                           className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\r\n                           placeholder=\"Search Inventory by Product\"\r\n                           onChange={(e) => setSearch(e.target.value)}\r\n                           value={search}\r\n                        />\r\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                           Add Inventory\r\n                        </Button>\r\n                     </ButtonGroup>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('modelNumber')}>\r\n                                          Product\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'modelNumber'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'modelNumber' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'modelNumber' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\r\n                                          QUANTITY\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'quantity'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'quantity' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'quantity' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => {\r\n                                    const isVariant = e.variants;\r\n                                    return (\r\n                                       <tr key={`${e._id}`}>\r\n                                          <td>\r\n                                             <strong>{query.data.pagingCounter + index}</strong>\r\n                                          </td>\r\n                                          <td>{e.product.modelNumber ?? 'N/A'}</td>\r\n                                          <td>\r\n                                             {isVariant\r\n                                                ? Object.entries(e.variants).map(([key, value]) => (\r\n                                                     <>\r\n                                                        <span className=\"tw-mr-4\">{`${key.toUpperCase()}: ${getQuantity(\r\n                                                           value\r\n                                                        )}`}</span>\r\n                                                     </>\r\n                                                  ))\r\n                                                : getQuantity(e.quantity)}\r\n                                          </td>\r\n                                          <td>\r\n                                             <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                                <ButtonGroup>\r\n                                                   <Button\r\n                                                      variant=\"light\"\r\n                                                      size=\"sm\"\r\n                                                      icon={AiFillEdit}\r\n                                                      onClick={() => handleEdit(e)}\r\n                                                   >\r\n                                                      Edit\r\n                                                   </Button>\r\n                                                   <Button\r\n                                                      variant=\"danger\"\r\n                                                      size=\"sm\"\r\n                                                      icon={AiFillDelete}\r\n                                                      onClick={() => handleOnClickDelete(e._id)}\r\n                                                   >\r\n                                                      Delete\r\n                                                   </Button>\r\n                                                </ButtonGroup>\r\n                                             </When>\r\n                                          </td>\r\n                                       </tr>\r\n                                    );\r\n                                 })}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No inventory created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default connect((state) => ({ user: state.auth.user }))(Khaata);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\index.js",["694","695","696","697"],"import React, { memo, useEffect } from 'react';\r\nimport { setLogin, setLogout } from 'store/auth/actions';\r\nimport { connect } from 'react-redux';\r\nimport Nav from './nav';\r\nimport Footer from './Footer';\r\nimport { get } from '../helpers';\r\n\r\nconst Layout = ({ children: Children, isPublic, setUser, logout }) => {\r\n   const token = localStorage.getItem('auth_token');\r\n   const getUserProfile = async () => {\r\n      try {\r\n         const res = await get(`/auth/decode/${token}`);\r\n         if (!res?.isConfirmed) {\r\n            logout();\r\n            localStorage.clear();\r\n            window.location = 'page-login';\r\n         } else {\r\n            setUser({ ...res, auth_token: token });\r\n         }\r\n      } catch (error) {\r\n         logout();\r\n         setUser({});\r\n         localStorage.clear();\r\n         window.location = 'page-login';\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (token) {\r\n         getUserProfile();\r\n      }\r\n   }, [token]);\r\n\r\n   if (isPublic)\r\n      return (\r\n         <>\r\n            <div id=\"main-wrapper\" className=\"show\">\r\n               <div className=\"container-fluid\">\r\n                  {/* <Children /> */}\r\n                  {Children}\r\n               </div>\r\n            </div>\r\n         </>\r\n      );\r\n\r\n   return (\r\n      <>\r\n         <div id=\"main-wrapper\" className=\"show\" style={{ minHeight: '100vh' }}>\r\n            <Nav />\r\n            <div className=\"content-body\">\r\n               <div className=\"container-fluid\">\r\n                  {/* <Children /> */}\r\n                  {Children}\r\n               </div>\r\n            </div>\r\n            {/* <Footer /> */}\r\n         </div>\r\n      </>\r\n   );\r\n};\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setUser: (payload) => dispatch(setLogin(payload)),\r\n   logout: () => dispatch(setLogout()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\expenses\\index.js",["698","699","700","701","702","703","704"],"import { useDebounce } from 'ahooks';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { setExpensesVisibility } from 'store/actions';\r\nimport swal from 'sweetalert';\r\nimport ExpenseTypes from '../expenseTypes';\r\nimport Salaries from '../salaries';\r\n\r\nconst Expenses = (props) => {\r\n   dayjs.extend(relativeTime);\r\n   const history = useHistory();\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const dispatch = useDispatch();\r\n\r\n   const query = useQuery(['expenses', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\r\n      get('/expenses', page, limit, sort.field, sort.order, debouncedSearchValue)\r\n   );\r\n   const deleteMutation = useMutation((id) => del(`/expenses/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('expenses');\r\n         alert.setAlert({\r\n            message: 'Sale deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete sale', err });\r\n      },\r\n   });\r\n\r\n   // const handleOnClickView = (obj) => {\r\n   //    history.push({ pathname: `/expenses/${obj._id}`, search: `?type=view` });\r\n   // };\r\n   const handleOnClickAdd = () => {\r\n      history.push('/expenses/add');\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Expenses\" motherMenu=\"Diamond Tiles\" />\r\n\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <div className=\"row\">\r\n            <div className=\"col-xl-12 mb-4\">\r\n               <Salaries />\r\n            </div>\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Expenses</Card.Title>\r\n                     <ButtonGroup className=\"tw-float-right\">\r\n                        <input\r\n                           type=\"text\"\r\n                           className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\r\n                           placeholder=\"Search Expenses...\"\r\n                           disabled={deleteMutation.isLoading}\r\n                           onChange={(e) => setSearch(e.target.value)}\r\n                        />\r\n                        <Button\r\n                           size=\"sm\"\r\n                           variant=\"primary\"\r\n                           icon={AiFillPlusCircle}\r\n                           onClick={() => dispatch(setExpensesVisibility(true))}\r\n                        >\r\n                           Add New Expense\r\n                        </Button>\r\n                     </ButtonGroup>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>{getSortingIcon({ label: 'Title' })}</th>\r\n\r\n                                    <th>\r\n                                       {getSortingIcon({ label: 'Amount', key: 'amount', onSort: handleSort, sort })}\r\n                                    </th>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{query.data.pagingCounter + index}</strong>\r\n                                       </td>\r\n                                       <td>{e.title}</td>\r\n                                       <td>\r\n                                          {new Intl.NumberFormat('en-IN', {\r\n                                             maximumSignificantDigits: 3,\r\n                                          }).format(e.amount)}{' '}\r\n                                          PKR\r\n                                       </td>\r\n                                       <td>\r\n                                          <div className=\"tw-flex tw-items-center tw-gap-4\">\r\n                                             <OverlayTrigger\r\n                                                trigger={['hover', 'hover']}\r\n                                                placement=\"top\"\r\n                                                overlay={\r\n                                                   <Popover className=\"tw-border-gray-500\">\r\n                                                      <Popover.Content>\r\n                                                         {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\r\n                                                      </Popover.Content>\r\n                                                   </Popover>\r\n                                                }\r\n                                             >\r\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                             </OverlayTrigger>\r\n                                             <ButtonGroup>\r\n                                                <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                                   <Button\r\n                                                      variant=\"danger\"\r\n                                                      size=\"sm\"\r\n                                                      icon={AiFillDelete}\r\n                                                      onClick={() => handleOnClickDelete(e._id)}\r\n                                                   >\r\n                                                      Delete\r\n                                                   </Button>\r\n                                                </When>\r\n                                             </ButtonGroup>\r\n                                          </div>\r\n                                       </td>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No Expenses created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Expenses);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\dashboard\\index.js",["705","706","707","708","709","710","711"],"import React, { useState } from 'react';\r\nimport { Dropdown, Table, ButtonGroup, Card } from 'react-bootstrap';\r\nimport Button from 'jsx/components/Button';\r\n\r\nimport { AiFillEye, AiOutlinePlus } from 'react-icons/ai';\r\nimport { connect } from 'formik';\r\nimport { useSelector } from 'react-redux';\r\nimport dayjs from 'dayjs';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport '../../../css/react-datepicker.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getV2, useQuery } from 'jsx/helpers';\r\nimport { currencyFormatter } from 'jsx/helpers/misc';\r\nimport ManagePurchase from '../purchase/ManagePurchase';\r\nimport ManageSales from '../sale/MangeSales';\r\nimport SaleGrid from '../sale/sale-grid';\r\n\r\nconst today = new Date();\r\n\r\nconst Dashboard = () => {\r\n   const [startDate, setStartDate] = useState(new Date());\r\n   const [endDate, setEndDate] = useState(new Date());\r\n   const history = useHistory();\r\n\r\n   const user = useSelector((s) => s.auth.user);\r\n\r\n   // const purchase = useQuery(['dashboard-purchases', startDate, endDate], () =>\r\n   //    getV2('/dashboard/purchases', { startDate, endDate })\r\n   // );\r\n   const sale = useQuery(['dashboard-sales', startDate, endDate], () =>\r\n      getV2('/dashboard/sales', { startDate, endDate })\r\n   );\r\n   // const revenue = useQuery(['dashboard-revenue', startDate, endDate], () =>\r\n   //    getV2('/dashboard/revenue', { startDate, endDate })\r\n   // );\r\n   // const expense = useQuery(['dashboard-expenses', startDate, endDate], () =>\r\n   //    getV2('/dashboard/expenses', { startDate, endDate })\r\n   // );\r\n   // const profit = useQuery(['dashboard-profit', startDate, endDate], () =>\r\n   //    getV2('/dashboard/profit', { startDate, endDate })\r\n   // );\r\n\r\n   return (\r\n      <>\r\n         <div className=\"row tw-mb-[30px]\">\r\n            <div className=\"col-xl-12 tw-flex tw-justify-end tw-items-center\">\r\n               <DatePicker selected={startDate} onChange={(d) => setStartDate(d)} dateFormat=\"dd MMMM yyyy\" />\r\n               <span className=\"mx-4\">to</span>\r\n               <DatePicker selected={endDate} onChange={(d) => setEndDate(d)} dateFormat=\"dd MMMM yyyy\" />\r\n            </div>\r\n         </div>\r\n         <div className=\"row\">\r\n            <div className=\"col-lg-4 col-md-12\">\r\n               <Card className=\"tw-h-[205px]\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">\r\n                        Hey <span className=\"tw-capitalize\">{user.name?.toLowerCase() ?? 'Loading...'}</span>!\r\n                     </h3>\r\n                     <h4>{dayjs(today).format('dddd[,] DD MMMM YYYY')}</h4>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div>\r\n            {/* <div className=\"col-lg-4 col-md-6\">\r\n               <Card className=\"\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">Purchase</h3>\r\n                     <h4>\r\n                        {purchase.data\r\n                           ? `${purchase.data.count} - ${new Intl.NumberFormat('en-IN', {\r\n                                maximumSignificantDigits: 3,\r\n                             }).format(purchase.data.sum)} PKR`\r\n                           : '...'}\r\n                     </h4>\r\n                     <h6 className=\"tw-text-xs\">Total purchases made</h6>\r\n                     <Button\r\n                        variant=\"secondary\"\r\n                        className=\"btn-block\"\r\n                        icon={AiOutlinePlus}\r\n                        onClick={() => history.push('/purchase/add')}\r\n                     >\r\n                        New Purchase\r\n                     </Button>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div> */}\r\n            <div className=\"col-lg-8 col-md-12\">\r\n               <Card className=\"\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">Sale</h3>\r\n                     <h4>{sale.data ? `${sale.data.count} - ${currencyFormatter.format(sale.data.sum)}` : '...'}</h4>\r\n                     <h6 className=\"tw-text-xs\">Total sale made</h6>\r\n                     <Button\r\n                        variant=\"primary\"\r\n                        className=\"btn-block\"\r\n                        icon={AiOutlinePlus}\r\n                        onClick={() => history.push('/sale/add')}\r\n                     >\r\n                        New Sale\r\n                     </Button>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div>\r\n            {/* <div className=\"col-lg-4 col-md-6\">\r\n               <Card className=\"tw-h-[205px]\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">Revenue</h3>\r\n                     <h4>\r\n                        {revenue.data !== undefined && revenue.data !== null\r\n                           ? `${new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(\r\n                                revenue.data\r\n                             )} PKR`\r\n                           : '...'}\r\n                     </h4>\r\n                     <h6 className=\"tw-text-xs\">Profit made from the sales</h6>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div> */}\r\n            {/* <div className=\"col-lg-4 col-md-6\">\r\n               <Card className=\"tw-h-[205px]\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">Expenses</h3>\r\n                     <h4>\r\n                        {expense.data !== undefined && expense.data !== null\r\n                           ? `${new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(\r\n                                expense.data\r\n                             )} PKR`\r\n                           : '...'}\r\n                     </h4>\r\n\r\n                     <h6 className=\"tw-text-xs\">Salaries and expenses</h6>\r\n                     <Button\r\n                        variant=\"secondary\"\r\n                        className=\"btn-block\"\r\n                        icon={AiOutlinePlus}\r\n                        onClick={() => history.push('/expenses/add')}\r\n                     >\r\n                        New Expense\r\n                     </Button>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div> */}\r\n            {/* <div className=\"col-lg-4 col-md-6\">\r\n               <Card className=\"tw-h-[205px]\">\r\n                  <Card.Body>\r\n                     <h3 className=\"tw-font-bold\">Profit</h3>\r\n                     <h4>\r\n                        {profit.data !== undefined && profit.data !== null\r\n                           ? `${new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(\r\n                                profit.data.profit\r\n                             )} PKR`\r\n                           : '...'}\r\n                     </h4>\r\n                     <h6 className=\"tw-text-xs\">Take home money</h6>\r\n                  </Card.Body>\r\n               </Card>\r\n            </div> */}\r\n            <div className=\"col-12\">\r\n               <SaleGrid startDate={startDate} endDate={endDate} />\r\n            </div>\r\n            {/* <div className=\"col-12\">\r\n               <ManagePurchase />\r\n            </div> */}\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\users\\index.js",["712","713","714","715","716","717","718","719","720","721","722","723","724","725","726","727"],"import Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, getV2, put, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, Row, Table, Popover, OverlayTrigger } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { useHistory } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport swal from 'sweetalert';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { useDebounce } from 'ahooks';\r\nimport { connect } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport cls from 'classnames';\r\nimport Select from 'jsx/components/Select';\r\nimport ClearSale from '../sale/ClearSale';\r\n\r\ndayjs.extend(relativeTime);\r\nconst Users = (props) => {\r\n   const history = useHistory();\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: 1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n   const [roles, setRoles] = useState({});\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['auth', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\r\n      getV2('/auth', { page, limit, search: debouncedSearchValue })\r\n   );\r\n   const rejectMutation = useMutation((id) => del(`/auth/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('auth');\r\n         alert.setAlert({\r\n            message: 'User rejected successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to reject user', err });\r\n      },\r\n   });\r\n\r\n   const acceptMutation = useMutation(({ id, role }) => put(`/auth/confirm/${id}/${role}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('auth');\r\n         alert.setAlert({\r\n            message: 'User accepted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to accepted user', err });\r\n      },\r\n   });\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            rejectMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleAcceptUser = (id) => {\r\n      console.log(id, roles, roles[id]);\r\n      acceptMutation.mutate({ id, role: roles[id] });\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Users\" motherMenu=\"Manage\" />\r\n         <div className=\"row tw-mb-8\">\r\n            <div className=\"col-xl-6\" />\r\n\r\n            <div className=\"col-xl-6\">\r\n               <ButtonGroup className=\"tw-float-right\">\r\n                  <input\r\n                     type=\"text\"\r\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\r\n                     placeholder=\"Search Users...\"\r\n                     disabled={rejectMutation.isLoading}\r\n                     onChange={(e) => setSearch(e.target.value)}\r\n                  />\r\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\r\n                     Search\r\n                  </Button>\r\n               </ButtonGroup>\r\n            </div>\r\n         </div>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading || rejectMutation.isLoading || acceptMutation.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Users</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\">Name</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\">Role</strong>\r\n                                    </th>\r\n                                    <th />\r\n                                 </tr>\r\n                              </thead>\r\n\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => {\r\n                                    if (e.name === 'dev') return null;\r\n\r\n                                    const DeleteButton = (p) => (\r\n                                       <Button\r\n                                          variant=\"danger\"\r\n                                          size=\"sm\"\r\n                                          icon={AiFillDelete}\r\n                                          onClick={() => handleOnClickDelete(e._id)}\r\n                                       >\r\n                                          {p.children}\r\n                                       </Button>\r\n                                    );\r\n                                    return (\r\n                                       <tr key={`${e._id}`}>\r\n                                          <td>\r\n                                             <b>{query.data.pagingCounter + index}</b>\r\n                                          </td>\r\n                                          <td className=\"tw-capitalize\">{e.name}</td>\r\n                                          <td className=\"tw-capitalize\">{e.role?.toLowerCase()}</td>\r\n                                          <td className=\"tw-flex tw-items-center tw-gap-4\">\r\n                                             <If condition={!e.isConfirmed}>\r\n                                                <Then>\r\n                                                   <Select\r\n                                                      width=\"tw-w-[200px]\"\r\n                                                      placeholder=\"Assign Role\"\r\n                                                      options={[\r\n                                                         { label: 'Administrator', value: 'Administrator' },\r\n                                                         { label: 'Cashier', value: 'Cashier' },\r\n                                                      ]}\r\n                                                      onChange={(role) =>\r\n                                                         setRoles((prev) => ({ ...prev, [e._id]: role.value }))\r\n                                                      }\r\n                                                   />\r\n                                                   <ButtonGroup>\r\n                                                      <DeleteButton>Reject</DeleteButton>\r\n                                                      <Button\r\n                                                         variant=\"secondary\"\r\n                                                         size=\"sm\"\r\n                                                         icon={AiFillEdit}\r\n                                                         disabled={!roles[e._id]}\r\n                                                         onClick={() => handleAcceptUser(e._id)}\r\n                                                      >\r\n                                                         Accept\r\n                                                      </Button>\r\n                                                   </ButtonGroup>\r\n                                                </Then>\r\n                                                <Else>\r\n                                                   <When condition={props.user._id !== e._id}>\r\n                                                      <DeleteButton>Delete</DeleteButton>\r\n                                                   </When>\r\n                                                </Else>\r\n                                             </If>\r\n                                          </td>\r\n                                       </tr>\r\n                                    );\r\n                                 })}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No customers created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || rejectMutation.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\suppliers\\index.js",["728","729"],"import { useDebounce } from 'ahooks';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { batch, connect, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { setSuppliersData, setSuppliersVisibility } from 'store/actions';\r\nimport swal from 'sweetalert';\r\n\r\ndayjs.extend(relativeTime);\r\nconst Suppliers = (props) => {\r\n   const history = useHistory();\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const query = useQuery(['suppliers', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\r\n      get('/suppliers', page, limit, sort.field, sort.order, debouncedSearchValue)\r\n   );\r\n   const deleteMutation = useMutation((id) => del(`/suppliers/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('suppliers');\r\n         alert.setAlert({\r\n            message: 'Supplier deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete supplier', err });\r\n      },\r\n   });\r\n\r\n   const handleEdit = (supplier) => {\r\n      batch(() => {\r\n         dispatch(setSuppliersData(supplier));\r\n         dispatch(setSuppliersVisibility(true));\r\n      });\r\n   };\r\n\r\n   const handleOnClickView = (obj) => {\r\n      history.push({ pathname: `/suppliers/${obj._id}`, search: `?type=view` });\r\n   };\r\n   const handleOnClickAdd = () => {\r\n      history.push('/suppliers/add');\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Suppliers\" motherMenu=\"Manage\" />\r\n         <div className=\"row tw-mb-8\">\r\n            <div className=\"col-xl-6\">\r\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                  Add New Supplier\r\n               </Button>\r\n            </div>\r\n\r\n            <div className=\"col-xl-6\">\r\n               <ButtonGroup className=\"tw-float-right\">\r\n                  <input\r\n                     type=\"text\"\r\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\r\n                     placeholder=\"Search Suppliers...\"\r\n                     disabled={deleteMutation.isLoading}\r\n                     onChange={(e) => setSearch(e.target.value)}\r\n                  />\r\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\r\n                     Search\r\n                  </Button>\r\n               </ButtonGroup>\r\n            </div>\r\n         </div>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Suppliers</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('name')}>\r\n                                          NAME\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'name'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'name' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'name' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('phone')}>\r\n                                          PHONE\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'phone'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'phone' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'phone' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('company')}>\r\n                                          COMPANY\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'company'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'company' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'company' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{query.data.pagingCounter + index}</strong>\r\n                                       </td>\r\n                                       <td>{e.name}</td>\r\n                                       <td>{e.phone}</td>\r\n                                       <td>{e.company}</td>\r\n                                       <td>\r\n                                          <OverlayTrigger\r\n                                             trigger={['hover', 'hover']}\r\n                                             placement=\"top\"\r\n                                             overlay={\r\n                                                <Popover className=\"tw-border-gray-500\">\r\n                                                   <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                      dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                         ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                         : dayjs(e.createdAt).fromNow()\r\n                                                   }.`}</Popover.Content>\r\n                                                </Popover>\r\n                                             }\r\n                                          >\r\n                                             <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                          </OverlayTrigger>\r\n                                       </td>\r\n                                       <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                          <td>\r\n                                             <ButtonGroup>\r\n                                                <Button\r\n                                                   variant=\"light\"\r\n                                                   size=\"sm\"\r\n                                                   icon={AiFillEdit}\r\n                                                   onClick={() => handleEdit(e)}\r\n                                                >\r\n                                                   Edit\r\n                                                </Button>\r\n                                                <Button\r\n                                                   variant=\"danger\"\r\n                                                   size=\"sm\"\r\n                                                   icon={AiFillDelete}\r\n                                                   onClick={() => handleOnClickDelete(e._id)}\r\n                                                >\r\n                                                   Delete\r\n                                                </Button>\r\n                                             </ButtonGroup>\r\n                                          </td>\r\n                                       </When>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No suppliers created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Suppliers);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\purchase\\index.js",["730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765"],"import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport produce from 'immer';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport getQuantity from 'jsx/helpers/getQuantity';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _, { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport ClearPurchase from './ClearPurchase';\r\nimport RefundPurchase from './RefundPurchase';\r\nimport ManagePurchase from './ManagePurchase';\r\n\r\ndayjs.extend(relativeTime);\r\n\r\nconst Purchase = () => {\r\n   const history = useHistory();\r\n\r\n   const handleOnClickAdd = () => {\r\n      history.push('/purchase/add');\r\n   };\r\n\r\n   const [startDate, setStartDate] = useState(new Date());\r\n   const [endDate, setEndDate] = useState(new Date());\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"purchase\" motherMenu=\"Diamond Tiles\" />\r\n         <div className=\"row tw-mb-8\">\r\n            <div className=\"col-xl-6\">\r\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                  Add New Purchase\r\n               </Button>\r\n            </div>\r\n            <div className=\"col-xl-6 tw-flex tw-justify-end tw-items-center\">\r\n               <ReactDatePicker selected={startDate} onChange={(d) => setStartDate(d)} dateFormat=\"dd MMMM yyyy\" />\r\n               <span className=\"mx-4\">to</span>\r\n               <ReactDatePicker selected={endDate} onChange={(d) => setEndDate(d)} dateFormat=\"dd MMMM yyyy\" />\r\n            </div>\r\n         </div>\r\n         <ManagePurchase startDate={startDate} endDate={endDate} />\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Purchase);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\index.js",["766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804"],"import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport produce from 'immer';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, getV2, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _, { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\nimport ClearSale from './ClearSale';\r\nimport RefundSale from './RefundSale';\r\nimport ManageSales from './MangeSales';\r\nimport SaleGrid from './sale-grid';\r\n\r\nconst Sale = (props) => {\r\n   const history = useHistory();\r\n\r\n   const [startDate, setStartDate] = useState(new Date());\r\n   const [endDate, setEndDate] = useState(new Date());\r\n\r\n   const handleOnClickAdd = () => {\r\n      history.push('/sale/add');\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Sale\" motherMenu=\"Frosty Bites\" />\r\n\r\n         <div className=\"row tw-mb-8\">\r\n            <div className=\"col-xl-6\">\r\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                  Add New Sale\r\n               </Button>\r\n            </div>\r\n            <div className=\"col-xl-6 tw-flex tw-justify-end tw-items-center\">\r\n               <ReactDatePicker selected={startDate} onChange={(d) => setStartDate(d)} dateFormat=\"dd MMMM yyyy\" />\r\n               <span className=\"mx-4\">to</span>\r\n               <ReactDatePicker selected={endDate} onChange={(d) => setEndDate(d)} dateFormat=\"dd MMMM yyyy\" />\r\n            </div>\r\n         </div>\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               {/* <ManageSales startDate={startDate} endDate={endDate} /> */}\r\n               <SaleGrid startDate={startDate} endDate={endDate} />\r\n            </Col>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sale);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\index.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\auth\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\products\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\types\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\units\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\salaries\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\employees\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\customers\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\suppliers\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\inventories\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\expenses\\actionTypes.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\khaata\\index.js",["805","806","807","808","809","810","811","812","813","814","815","816","817","818"],"import { useDebounce } from 'ahooks';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport { getActiveElement } from 'formik';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, useAlert, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport {\r\n   AiFillDelete,\r\n   AiFillEdit,\r\n   AiFillEye,\r\n   AiFillPlusCircle,\r\n   AiOutlineClear,\r\n   AiOutlineQuestionCircle,\r\n} from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Khaata = (props) => {\r\n   dayjs.extend(relativeTime);\r\n   const history = useHistory();\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n   const [search, setSearch] = useState('');\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['expenses/khaata', page, limit, sort.field, sort.order], () =>\r\n      get('/expenses/khaata', page, limit, sort.field, sort.order)\r\n   );\r\n\r\n   // const handleOnClickView = (obj) => {\r\n   //    history.push({ pathname: `/expenses/khaata/${obj._id}`, search: `?type=view` });\r\n   // };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"khaata\" motherMenu=\"Diamond Tiles\" />\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Khaata</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('customer')}>\r\n                                          Customer\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'customer'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'customer' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'customer' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('inventory')}>\r\n                                          Product\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'inventory'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'inventory' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'inventory' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\r\n                                          Qty\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'quantity'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'quantity' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'quantity' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('retailPrice')}>\r\n                                          Total\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'retailPrice'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'retailPrice' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'retailPrice' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\r\n                                          Paid\r\n                                          <span>\r\n                                             <When condition={sort.field !== 'paid'}>\r\n                                                <FaSort className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'paid' && sort.order === -1}>\r\n                                                <FaSortDown className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                             <When condition={sort.field === 'paid' && sort.order === 1}>\r\n                                                <FaSortUp className=\"d-inline mx-1\" />\r\n                                             </When>\r\n                                          </span>\r\n                                       </strong>\r\n                                    </th>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data &&\r\n                                    query.data?.docs.map((e, index) => {\r\n                                       const getId = () => {\r\n                                          const id = e._id;\r\n                                          return id.slice(id.length - 3);\r\n                                       };\r\n                                       const getTotal = () => {\r\n                                          const price = e.type === 'inventory' ? e.sourcePrice : e.retailPrice;\r\n                                          if (!price) return null;\r\n                                          return price * e.quantity;\r\n                                       };\r\n                                       return (\r\n                                          <tr key={`${e._id}`}>\r\n                                             <td>\r\n                                                <strong>{getId()}</strong>\r\n                                             </td>\r\n                                             <td>{e[e.type === 'sale' ? 'customer' : 'supplier']?.name ?? 'N/A'}</td>\r\n                                             <td>\r\n                                                {e[e.type === 'sale' ? 'inventory' : 'product']?.modelNumber ?? 'N/A'}\r\n                                             </td>\r\n                                             <td>{e?.quantity ?? 'N/a'}</td>\r\n                                             <td>{getTotal()}</td>\r\n                                             <td>{e?.paid ?? 'N/A'}</td>\r\n                                             <td>\r\n                                                <OverlayTrigger\r\n                                                   trigger={['hover', 'hover']}\r\n                                                   placement=\"top\"\r\n                                                   overlay={\r\n                                                      <Popover className=\"tw-border-gray-500\">\r\n                                                         <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                            dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                               ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                               : dayjs(e.createdAt).fromNow()\r\n                                                         }.`}</Popover.Content>\r\n                                                      </Popover>\r\n                                                   }\r\n                                                >\r\n                                                   <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                                </OverlayTrigger>\r\n                                             </td>\r\n                                             {/* <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                                <td>\r\n                                                   <Button\r\n                                                      variant=\"danger\"\r\n                                                      size=\"sm\"\r\n                                                      icon={AiOutlineClear}\r\n                                                      onClick={() => {}}\r\n                                                   >\r\n                                                      Clear\r\n                                                   </Button>\r\n                                                </td>\r\n                                             </When> */}\r\n                                          </tr>\r\n                                       );\r\n                                    })}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No sales created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Khaata);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\auth\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\CreatableSelect.js",["819","820"],"import Creatable from 'react-select/creatable';\r\n\r\nconst selectStyles = {\r\n   control: (provided, state) => {\r\n      provided.borderColor = state.menuIsOpen ? '#44bdec' : 'hsl(0, 0%, 80%)';\r\n      provided.boxShadow = state.menuIsOpen ? '0 0 0 1px #44bdec' : '';\r\n      provided['&:hover'] = { borderColor: '#44bdec' };\r\n      provided.justifyContent = 'center';\r\n      provided.paddingTop = '0.2rem';\r\n      provided.paddingBottom = '0.2rem';\r\n\r\n      return provided;\r\n   },\r\n   valueContainer: (provided, state) => {\r\n      provided.justifyContent = 'center';\r\n      return provided;\r\n   },\r\n   menu: (provided, state) => {\r\n      provided.textAlign = 'center';\r\n      return provided;\r\n   },\r\n   option: (provided, state) => {\r\n      provided.backgroundColor = state.isSelected || state.isFocused ? '#44bdec' : 'transparent';\r\n\r\n      if (state.isFocused) provided.color = 'white';\r\n      return provided;\r\n   },\r\n};\r\n\r\nconst Select = ({ className = '', ...props }) => (\r\n   <Creatable menuPlacement=\"auto\" className={`tw-w-[auto] ${className}`} styles={selectStyles} {...props} />\r\n);\r\n\r\nexport default Select;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\SpinnerOverlay.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\ModalWrapper.js",["821"],"import { Form, useFormikContext } from 'formik';\r\nimport React, { useEffect } from 'react';\r\n\r\nimport { Button, Modal, Container, Spinner, ButtonGroup } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\n\r\nconst ModalWrapper = ({\r\n   show,\r\n   onHide,\r\n   isLoading,\r\n   title,\r\n   submitButtonText = 'Save',\r\n   children,\r\n   isDisabled,\r\n   onShow,\r\n   ...rest\r\n}) => {\r\n   useEffect(() => {\r\n      if (show) onShow?.();\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [show]);\r\n\r\n   return (\r\n      <Modal\r\n         className=\"fade\"\r\n         show={show}\r\n         onHide={() => {\r\n            if (!isLoading) onHide();\r\n         }}\r\n         size=\"md\"\r\n         {...rest}\r\n      >\r\n         <Form>\r\n            <Modal.Header>\r\n               <Modal.Title>{title}</Modal.Title>\r\n               <Button variant=\"\" className=\"close\" onClick={onHide}>\r\n                  <span>&times;</span>\r\n               </Button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n               <Container>{children}</Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n               <ButtonGroup>\r\n                  <Button variant=\"warning light\" disabled={isLoading} onClick={onHide}>\r\n                     Close\r\n                  </Button>\r\n                  <Button\r\n                     variant=\"primary\"\r\n                     type=\"submit\"\r\n                     // onClick={formikProps?.handleSubmit}\r\n                     disabled={isLoading || isDisabled}\r\n                  >\r\n                     <When condition={isLoading}>\r\n                        <Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n                     </When>\r\n                     <span className=\"ml-1\">{submitButtonText}</span>\r\n                  </Button>\r\n               </ButtonGroup>\r\n            </Modal.Footer>\r\n         </Form>\r\n      </Modal>\r\n   );\r\n};\r\n\r\nexport default ModalWrapper;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\Select.js",["822","823","824"],"import ReactSelect from 'react-select';\r\n\r\nexport const defaultSelectStyles = {\r\n   control: (baseStyles, state) => {\r\n      delete baseStyles['&:hover'];\r\n      delete baseStyles.boxShadow;\r\n\r\n      const borderColor = state.isFocused ? '#44bdec' : '#f0f1f5';\r\n\r\n      return {\r\n         ...baseStyles,\r\n         borderRadius: 0,\r\n         height: 56,\r\n         cursor: 'pointer',\r\n         padding: '6px 12px',\r\n         border: `1px solid ${borderColor}`,\r\n      };\r\n   },\r\n};\r\n\r\nconst selectStyles = (height) => ({\r\n   control: (provided, state) => {\r\n      provided.borderColor = state.menuIsOpen ? '#44bdec' : 'hsl(0, 0%, 80%)';\r\n      provided.boxShadow = state.menuIsOpen ? '0 0 0 1px #44bdec' : '';\r\n      provided['&:hover'] = { borderColor: '#44bdec' };\r\n      provided.justifyContent = 'center';\r\n      provided.paddingTop = '0.2rem';\r\n      provided.paddingBottom = '0.2rem';\r\n      provided.height = height;\r\n\r\n      console.log(provided);\r\n\r\n      return provided;\r\n   },\r\n   valueContainer: (provided, state) => {\r\n      provided.justifyContent = 'center';\r\n\r\n      return provided;\r\n   },\r\n   menu: (provided, state) => {\r\n      provided.textAlign = 'center';\r\n      return provided;\r\n   },\r\n   option: (provided, state) => {\r\n      provided.backgroundColor = state.isSelected || state.isFocused ? '#44bdec' : 'transparent';\r\n\r\n      if (state.isFocused) provided.color = 'white';\r\n      return provided;\r\n   },\r\n});\r\n\r\nconst Select = ({ width = 'tw-w-[100px]', className = '', height = '36px', ...props }) => (\r\n   <ReactSelect\r\n      menuPlacement=\"auto\"\r\n      className={`${width} ${className}`}\r\n      styles={() => selectStyles(height)}\r\n      {...props}\r\n   />\r\n);\r\n\r\nexport default Select;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\Button.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\Pagination.js",["825","826"],"import cls from 'classnames';\r\nimport { useState } from 'react';\r\nimport { AiOutlineDoubleLeft, AiOutlineDoubleRight, AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\r\nimport Select from './Select';\r\n\r\nconst getOption = (v) => ({ value: v, label: v });\r\nconst options = [getOption(5), getOption(10), getOption(25)];\r\n\r\nconst PaginationItem = ({\r\n   children,\r\n   className = '',\r\n   disabled,\r\n   first = false,\r\n   last = false,\r\n   active = false,\r\n   ...props\r\n}) => (\r\n   <li\r\n      {...props}\r\n      className={cls(\r\n         'tw-transition-all tw-cursor-pointer tw-flex tw-items-center tw-text-[#7E7E7E] tw-px-[12px] tw-py-[6px] tw-bg-white tw-border tw-border-solid',\r\n         className,\r\n         { 'tw-border-[#44bdec] tw-bg-[#44bdec] tw-text-white': active },\r\n         { 'tw-cursor-not-allowed': disabled },\r\n         { 'hover:tw-border-[#44bdec] hover:tw-bg-[#44bdec] hover:tw-text-white': !disabled },\r\n         { 'tw-rounded-l-md': first },\r\n         { 'tw-rounded-r-md': last }\r\n      )}\r\n   >\r\n      {children}\r\n   </li>\r\n);\r\n\r\nconst FirstPage = (props) => (\r\n   <PaginationItem first {...props}>\r\n      <AiOutlineDoubleLeft />\r\n   </PaginationItem>\r\n);\r\n\r\nconst PrevPage = (props) => (\r\n   <PaginationItem {...props}>\r\n      <AiOutlineLeft />\r\n   </PaginationItem>\r\n);\r\n\r\nconst EllipsisPage = (props) => (\r\n   <PaginationItem disabled {...props}>\r\n      ...\r\n   </PaginationItem>\r\n);\r\n\r\nconst NextPage = (props) => (\r\n   <PaginationItem {...props}>\r\n      <AiOutlineRight />\r\n   </PaginationItem>\r\n);\r\n\r\nconst LastPage = (props) => (\r\n   <PaginationItem last {...props}>\r\n      <AiOutlineDoubleRight />\r\n   </PaginationItem>\r\n);\r\n\r\nconst Page = ({ children, ...props }) => <PaginationItem {...props}>{children}</PaginationItem>;\r\n\r\nconst Pagination = ({\r\n   isDisabled = false,\r\n   page,\r\n   onPageChange,\r\n   onLimitChange,\r\n   totalPages,\r\n   hasNextPage,\r\n   hasPrevPage,\r\n   totalDocs,\r\n}) => {\r\n   const [option, setOption] = useState(getOption(5));\r\n\r\n   const renderPagination = () => {\r\n      const pages = [];\r\n\r\n      const handleFirstPage = () => {\r\n         if (page > 1) onPageChange(1);\r\n      };\r\n\r\n      const handlePrevPage = () => {\r\n         if (page > 1) onPageChange((prev) => prev - 1);\r\n      };\r\n\r\n      const handleNextPage = () => {\r\n         if (page < totalPages) onPageChange((prev) => prev + 1);\r\n      };\r\n\r\n      const handleLastPage = () => {\r\n         if (page < totalPages) onPageChange(totalPages);\r\n      };\r\n\r\n      pages.push(<FirstPage disabled={page === 1 || isDisabled} onClick={handleFirstPage} />);\r\n      pages.push(<PrevPage disabled={page === 1 || isDisabled} onClick={handlePrevPage} />);\r\n\r\n      for (let currPage = 0; currPage < totalPages; currPage++) {\r\n         pages.push(\r\n            <Page active={page === currPage + 1} disabled={isDisabled} onClick={() => onPageChange(currPage + 1)}>\r\n               {currPage + 1}\r\n            </Page>\r\n         );\r\n      }\r\n\r\n      pages.push(<NextPage disabled={!hasNextPage || isDisabled} onClick={handleNextPage} />);\r\n      pages.push(<LastPage disabled={!hasNextPage || isDisabled} onClick={handleLastPage} />);\r\n\r\n      return pages;\r\n   };\r\n\r\n   return (\r\n      <div className=\"tw-flex tw-flex-col tw-items-center tw-gap-3 tw-overflow-visible\">\r\n         <p className=\"tw-m-0\">{`Showing ${\r\n            // eslint-disable-next-line no-nested-ternary\r\n            totalPages === page ? totalDocs : page * option.value > totalDocs ? totalDocs : page * option.value\r\n         } of ${totalDocs}`}</p>\r\n         <ul className=\"tw-flex \">{renderPagination()}</ul>\r\n         <Select\r\n            isDisabled={isDisabled}\r\n            className=\"tw-mb-6\"\r\n            options={options}\r\n            placeholder=\"Select Page Size\"\r\n            value={option}\r\n            onChange={(opt) => {\r\n               setOption(opt);\r\n               onLimitChange(opt.value);\r\n            }}\r\n         />\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Pagination;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\PageTitle.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\purchase\\RefundPurchase.js",["827","828","829","830","831","832","833","834","835"],"import produce from 'immer';\r\nimport ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport Select from 'jsx/components/Select';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, getV2, put, useAlert, useQuery } from 'jsx/helpers';\r\nimport _, { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst RefundPurchase = ({ refundPurchase, toggle, onClose, onOpen, ...props }) => {\r\n   const queryClient = useQueryClient();\r\n\r\n   const alert = useAlert();\r\n\r\n   const [refund, setRefund] = useState([]);\r\n\r\n   const purchase = useQuery(\r\n      ['refund-purchase', refundPurchase],\r\n      () => getV2(`/purchases/id/${refundPurchase}`, { page: 1, limit: 1000 }),\r\n      {\r\n         enabled: false,\r\n         onSuccess: (data) => {\r\n            const refunds = data.products.map(({ product }) => {\r\n               const returned = {};\r\n               returned.product = product._id;\r\n\r\n               if (product.type.title.toLowerCase() === 'tile') returned.variants = { a: '', b: '', c: '', d: '' };\r\n               else returned.quantity = '';\r\n\r\n               return returned;\r\n            });\r\n            if (!refund.length) setRefund(refunds);\r\n         },\r\n      }\r\n   );\r\n\r\n   const mutation = useMutation((payload) => put(`/purchases/${refundPurchase}/refund`, payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('purchases');\r\n         onClose();\r\n         setRefund([]);\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to refund purchase', err });\r\n      },\r\n   });\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleChangeQuantity = (index, q) => {\r\n      const updatedRefund = produce(refund, (draft) => {\r\n         draft[index].quantity = q;\r\n      });\r\n      setRefund(updatedRefund);\r\n   };\r\n\r\n   const handleChangeVariantQuantity = (index, variant, q) => {\r\n      const updatedRefund = produce(refund, (draft) => {\r\n         draft[index].variants[variant] = q;\r\n      });\r\n      setRefund(updatedRefund);\r\n   };\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n\r\n      const referenceRefund = _.cloneDeep(refund);\r\n\r\n      const payload = [];\r\n\r\n      referenceRefund.forEach((r) => {\r\n         if (r.quantity) payload.push(r);\r\n         if (r.variants) {\r\n            const variants = _.cloneDeep(r.variants);\r\n            Object.entries(variants).forEach(([key, value]) => {\r\n               if (!value) delete variants[key];\r\n            });\r\n\r\n            if (Object.keys(variants).length) {\r\n               r.variants = variants;\r\n               payload.push(r);\r\n            }\r\n         }\r\n      });\r\n\r\n      mutation.mutate(payload);\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (refundPurchase) {\r\n         console.log('hitting get one purchase');\r\n         purchase.refetch();\r\n      }\r\n   }, [refundPurchase]);\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={refundPurchase}\r\n            onHide={() => {\r\n               if (!mutation.isLoading || !purchase.isLoading) {\r\n                  onClose();\r\n                  setRefund([]);\r\n               }\r\n            }}\r\n            isLoading={mutation.isLoading || purchase.isLoading}\r\n            isDisabled={mutation.isLoading || purchase.isLoading}\r\n            title=\"Refund Purchase\"\r\n            onSubmit={handleSubmit}\r\n            submitButtonText=\"Refund\"\r\n            size=\"xl\"\r\n            {...props}\r\n         >\r\n            {alertMarkup ? (\r\n               <Row>\r\n                  <Col lg={12}>{alertMarkup}</Col>\r\n               </Row>\r\n            ) : null}\r\n            <form onSubmit={handleSubmit}>\r\n               {purchase.data?.products.map((product, index) => {\r\n                  const isVarianted = product.variants;\r\n                  return (\r\n                     <div className=\"form-group\" key={`product-${index}`}>\r\n                        <label className=\"col-form-label\">Product</label>\r\n                        <div className=\"tw-flex\">\r\n                           <input\r\n                              className=\"form-control\"\r\n                              type=\"text\"\r\n                              value={product.product.modelNumber}\r\n                              style={{ flex: isVarianted ? 1 : 2 }}\r\n                              disabled\r\n                           />\r\n                           {isVarianted ? (\r\n                              <div className=\"tw-flex\" style={{ flex: 3 }}>\r\n                                 <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"A\"\r\n                                    value={refund[index]?.variants.a}\r\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'a', e.target.value)}\r\n                                 />\r\n                                 <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"B\"\r\n                                    value={refund[index]?.variants.b}\r\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'b', e.target.value)}\r\n                                 />\r\n                                 <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"C\"\r\n                                    value={refund[index]?.variants.c}\r\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'c', e.target.value)}\r\n                                 />\r\n                                 <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"D\"\r\n                                    value={refund[index]?.variants.d}\r\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'd', e.target.value)}\r\n                                 />\r\n                              </div>\r\n                           ) : (\r\n                              <input\r\n                                 className=\"form-control\"\r\n                                 style={{ flex: 1 }}\r\n                                 type=\"text\"\r\n                                 name=\"modelNumber\"\r\n                                 placeholder=\"Quantity\"\r\n                                 value={refund[index]?.quantity}\r\n                                 onChange={(e) => handleChangeQuantity(index, e.target.value)}\r\n                              />\r\n                           )}\r\n                        </div>\r\n                     </div>\r\n                  );\r\n               })}\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default RefundPurchase;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\purchase\\ManagePurchase.js",["836","837","838","839","840","841","842","843","844","845"],"import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport produce from 'immer';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, getV2, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport getQuantity from 'jsx/helpers/getQuantity';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _, { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport ClearPurchase from './ClearPurchase';\r\nimport RefundPurchase from './RefundPurchase';\r\n\r\nconst ManagePurchase = ({ startDate, endDate, ...props }) => {\r\n   const [refundPurchase, setRefundPurchase] = useState(null);\r\n   const [clearPurchase, setClearPurchase] = useState({ id: null, amount: null });\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n   const history = useHistory();\r\n\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n\r\n   const query = useQuery(['purchases', page, limit, sort.field, sort.order, startDate, endDate], () =>\r\n      getV2('/purchases', { page, limit, sort: { [sort.field]: sort.order }, startDate, endDate })\r\n   );\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   const deleteMutation = useMutation((id) => del(`/purchases/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('purchases');\r\n         alert.setAlert({\r\n            message: 'Purchase deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete purchase', err });\r\n      },\r\n   });\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const handleEdit = (id) => {\r\n      history.push({ pathname: `/purchase/add`, state: { purchaseId: id } });\r\n   };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   return (\r\n      <>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Purchase</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>{getSortingIcon({ label: 'Supplier' })}</th>\r\n                                    <th>{getSortingIcon({ label: 'Products' })}</th>\r\n                                    <th>\r\n                                       {getSortingIcon({\r\n                                          label: 'Price',\r\n                                          key: 'totalSourcePrice',\r\n                                          onSort: handleSort,\r\n                                          sort,\r\n                                       })}\r\n                                    </th>\r\n                                    <th>\r\n                                       {getSortingIcon({\r\n                                          label: 'Paid',\r\n                                          key: 'paid',\r\n                                          onSort: handleSort,\r\n                                          sort,\r\n                                       })}\r\n                                    </th>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e) => {\r\n                                    const getId = () => {\r\n                                       const id = e._id;\r\n                                       return id.slice(id.length - 4);\r\n                                    };\r\n\r\n                                    const getProducts = () => {\r\n                                       const products = [];\r\n\r\n                                       e.products.forEach((d, i) => {\r\n                                          products.push(\r\n                                             <>\r\n                                                <b>{`${d.product.modelNumber} - ${d.sourcePrice} PKR`}</b>\r\n                                                {d.variants ? (\r\n                                                   <>\r\n                                                      <br />\r\n                                                      {Object.entries(d.variants).map(([key, value]) => (\r\n                                                         <span className=\"tw-mr-4\">{`${key.toUpperCase()}: ${getQuantity(\r\n                                                            value\r\n                                                         )}`}</span>\r\n                                                      ))}\r\n                                                   </>\r\n                                                ) : (\r\n                                                   <>\r\n                                                      <br />\r\n                                                      {getQuantity(d.quantity)}\r\n                                                   </>\r\n                                                )}\r\n                                             </>\r\n                                          );\r\n                                          if (i < e.products.length - 1) products.push(<br />);\r\n                                       });\r\n\r\n                                       return products;\r\n                                    };\r\n\r\n                                    return (\r\n                                       <tr\r\n                                          key={`${e._id}`}\r\n                                          className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\r\n                                       >\r\n                                          <td>\r\n                                             <strong className={e.isRemaining && 'tw-text-gray-50'}>{getId()}</strong>\r\n                                          </td>\r\n                                          <td>{e.supplier?.name}</td>\r\n                                          <td>{getProducts()}</td>\r\n                                          <td>{`${new Intl.NumberFormat('en-IN', {\r\n                                             maximumSignificantDigits: 3,\r\n                                          }).format(e.totalSourcePrice)} PKR`}</td>\r\n                                          <td>{`${new Intl.NumberFormat('en-IN', {\r\n                                             maximumSignificantDigits: 3,\r\n                                          }).format(e.paid)} PKR`}</td>\r\n                                          <td>\r\n                                             <div className=\"tw-flex tw-items-center tw-gap-4\">\r\n                                                <OverlayTrigger\r\n                                                   trigger={['hover', 'hover']}\r\n                                                   placement=\"top\"\r\n                                                   overlay={\r\n                                                      <Popover className=\"tw-border-gray-500\">\r\n                                                         <Popover.Content>\r\n                                                            {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\r\n                                                         </Popover.Content>\r\n                                                      </Popover>\r\n                                                   }\r\n                                                >\r\n                                                   <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                                </OverlayTrigger>\r\n                                                <ButtonGroup>\r\n                                                   <Button\r\n                                                      variant=\"light\"\r\n                                                      size=\"sm\"\r\n                                                      icon={AiFillEdit}\r\n                                                      onClick={() => handleEdit(e._id)}\r\n                                                   >\r\n                                                      Edit\r\n                                                   </Button>\r\n                                                   <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                                      <Button\r\n                                                         variant=\"danger\"\r\n                                                         size=\"sm\"\r\n                                                         icon={AiFillDelete}\r\n                                                         onClick={() => handleOnClickDelete(e._id)}\r\n                                                      >\r\n                                                         Delete\r\n                                                      </Button>\r\n                                                   </When>\r\n                                                </ButtonGroup>\r\n                                             </div>\r\n                                          </td>\r\n                                       </tr>\r\n                                    );\r\n                                 })}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading}>\r\n                              <p className=\"tw-m-0\">No purchases created</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\r\n            />\r\n         </When>\r\n         <RefundPurchase refundPurchase={refundPurchase} onClose={() => setRefundPurchase(null)} size=\"md\" />\r\n         <ClearPurchase\r\n            clearPurchase={clearPurchase.id}\r\n            initialAmount={clearPurchase.amount}\r\n            onClose={() => setClearPurchase((prev) => ({ ...prev, id: null }))}\r\n            size=\"md\"\r\n         />\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePurchase);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\MangeSales.js",["846","847","848","849","850","851","852","853","854","855","856","857","858","859"],"import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport produce from 'immer';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, getV2, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _, { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\nimport ClearSale from './ClearSale';\r\nimport RefundSale from './RefundSale';\r\n\r\ndayjs.extend(relativeTime);\r\n\r\nconst getQuantity = (array) => {\r\n   if (array[0] > 0) return `${array[0]} Units`;\r\n   return `${array[1]} ${array[1] > 0 ? 'Singles' : ''}`;\r\n};\r\n\r\nconst MangeSales = ({ startDate, endDate, ...props }) => {\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n\r\n   const [refundPurchase, setRefundPurchase] = useState(null);\r\n\r\n   const [clearSale, setClearSale] = useState({ id: null, amount: null });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const history = useHistory();\r\n\r\n   const alert = useAlert();\r\n\r\n   const query = useQuery(['sales', page, limit, sort.field, sort.order, startDate, endDate], () =>\r\n      getV2('/sales', { page, limit, sort: { [sort.field]: sort.order }, startDate, endDate })\r\n   );\r\n\r\n   const deleteMutation = useMutation((id) => del(`/sales/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('sales');\r\n         alert.setAlert({\r\n            message: 'Sale deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete sale', err });\r\n      },\r\n   });\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const handleEdit = (id) => {\r\n      history.push({ pathname: `/sale/add`, state: { saleId: id } });\r\n   };\r\n\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   return (\r\n      <>\r\n         <Card>\r\n            <When condition={query.isLoading || deleteMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <Card.Header>\r\n               <Card.Title>Manage Sale</Card.Title>\r\n            </Card.Header>\r\n            <Card.Body>\r\n               <If condition={query.data?.totalDocs > 0}>\r\n                  <Then>\r\n                     <Table className=\"tw-relative\" responsive>\r\n                        <thead>\r\n                           <tr>\r\n                              <th className=\"width80\">\r\n                                 <strong>#</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong>Supplier</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong>Products</strong>\r\n                              </th>\r\n                              <th>\r\n                                 {getSortingIcon({\r\n                                    label: 'Price',\r\n                                    key: 'totalRetailPrice',\r\n                                    onSort: handleSort,\r\n                                    sort,\r\n                                 })}\r\n                              </th>\r\n                              <th>\r\n                                 {getSortingIcon({\r\n                                    label: 'Paid',\r\n                                    key: 'paid',\r\n                                    onSort: handleSort,\r\n                                    sort,\r\n                                 })}\r\n                              </th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {query.data?.docs.map((e, index) => {\r\n                              const getId = () => {\r\n                                 const id = e._id;\r\n                                 return id.slice(id.length - 4);\r\n                              };\r\n\r\n                              const getProducts = () => {\r\n                                 const products = [];\r\n\r\n                                 e.products.forEach((d, i) => {\r\n                                    products.push(\r\n                                       <>\r\n                                          <b>{`${d.product.modelNumber}`}</b>\r\n                                          <br />\r\n                                          <span className=\"tw-mr-4\">{`BUY: ${d.sourcePrice} PKR`}</span>\r\n                                          <span>{`SELL: ${d.retailPrice} PKR`}</span>\r\n\r\n                                          {d.variants ? (\r\n                                             <>\r\n                                                <br />\r\n                                                {Object.entries(d.variants).map(([key, value]) => (\r\n                                                   <span className=\"tw-mr-4\">{`${key.toUpperCase()}: ${getQuantity(\r\n                                                      value\r\n                                                   )}`}</span>\r\n                                                ))}\r\n                                             </>\r\n                                          ) : (\r\n                                             <>\r\n                                                <br />\r\n                                                {getQuantity(d.quantity)}\r\n                                             </>\r\n                                          )}\r\n                                       </>\r\n                                    );\r\n                                    if (i < e.products.length - 1) products.push(<br />);\r\n                                 });\r\n\r\n                                 return products;\r\n                              };\r\n\r\n                              // getProducts();\r\n\r\n                              return (\r\n                                 <tr key={`${e._id}`} className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}>\r\n                                    <td>\r\n                                       <strong className={e.isRemaining && 'tw-text-gray-50'}>{getId()}</strong>\r\n                                    </td>\r\n                                    <td>{e.customer?.name}</td>\r\n                                    <td>{getProducts()}</td>\r\n                                    <td>{`${new Intl.NumberFormat('en-IN', {\r\n                                       maximumSignificantDigits: 3,\r\n                                    }).format(e.totalRetailPrice)} PKR`}</td>\r\n                                    <td>{`${new Intl.NumberFormat('en-IN', {\r\n                                       maximumSignificantDigits: 3,\r\n                                    }).format(e.paid)} PKR`}</td>\r\n\r\n                                    <td>\r\n                                       <div className=\"tw-flex tw-items-center tw-gap-4\">\r\n                                          <OverlayTrigger\r\n                                             trigger={['hover', 'hover']}\r\n                                             placement=\"top\"\r\n                                             overlay={\r\n                                                <Popover className=\"tw-border-gray-500\">\r\n                                                   <Popover.Content>\r\n                                                      {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\r\n                                                   </Popover.Content>\r\n                                                </Popover>\r\n                                             }\r\n                                          >\r\n                                             <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                          </OverlayTrigger>\r\n                                          <ButtonGroup>\r\n                                             <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                                <Button\r\n                                                   variant=\"light\"\r\n                                                   size=\"sm\"\r\n                                                   icon={AiFillEdit}\r\n                                                   onClick={() => handleEdit(e._id)}\r\n                                                >\r\n                                                   Edit\r\n                                                </Button>\r\n                                                <Button\r\n                                                   variant=\"danger\"\r\n                                                   size=\"sm\"\r\n                                                   icon={AiFillDelete}\r\n                                                   onClick={() => handleOnClickDelete(e._id)}\r\n                                                >\r\n                                                   Delete\r\n                                                </Button>\r\n                                             </When>\r\n                                          </ButtonGroup>\r\n                                       </div>\r\n                                    </td>\r\n                                 </tr>\r\n                              );\r\n                           })}\r\n                        </tbody>\r\n                     </Table>\r\n                  </Then>\r\n                  <Else>\r\n                     <When condition={!query.isLoading}>\r\n                        <p className=\"tw-m-0\">No sales created</p>\r\n                     </When>\r\n                  </Else>\r\n               </If>\r\n            </Card.Body>\r\n         </Card>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\r\n            />\r\n         </When>\r\n         <RefundSale refundPurchase={refundPurchase} onClose={() => setRefundPurchase(null)} size=\"md\" />\r\n         <ClearSale\r\n            clearSale={clearSale.id}\r\n            initialAmount={clearSale.amount}\r\n            onClose={() => setClearSale((prev) => ({ ...prev, id: null }))}\r\n            size=\"md\"\r\n         />\r\n      </>\r\n   );\r\n};\r\n\r\nexport default MangeSales;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\RefundSale.js",["860","861","862","863","864","865","866","867"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport Select from 'jsx/components/Select';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, put, useAlert, useQuery } from 'jsx/helpers';\r\nimport { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst initialValues = {\r\n   quantity: '',\r\n   total: '',\r\n   unit: '',\r\n};\r\n\r\nconst RefundSale = ({ refundSale, toggle, onClose, onOpen, ...props }) => {\r\n   const [isError, setIsError] = useState(false);\r\n\r\n   const [quantity, setQuantity] = useState('');\r\n   const [total, setTotal] = useState('');\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const alert = useAlert();\r\n\r\n   const handleChangeTotal = (t) => {\r\n      setTotal(t);\r\n   };\r\n\r\n   const handleChangeQuantity = (q, i = null) => {\r\n      setQuantity(q);\r\n      console.log('handle', i);\r\n      console.log('q:%s,retailPrice:%s,quantity:%s', q, i?.retailPrice, i?.quantity);\r\n      handleChangeTotal(q * (i?.retailPrice ?? 0 / i?.quantity ?? 0));\r\n   };\r\n\r\n   const inventory = useQuery(['sale', refundSale], () => get(`/sales/id/${refundSale}`), {\r\n      enabled: false,\r\n      onSuccess: (data) => {\r\n         handleChangeQuantity(1, data);\r\n      },\r\n   });\r\n\r\n   const refundMutation = useMutation((payload) => put(`/sales/${refundSale}/refund/${payload}`), {\r\n      onSuccess: () => {\r\n         onClose();\r\n         handleChangeQuantity(0, inventory.data);\r\n         queryClient.invalidateQueries('sales');\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to refund sale', err });\r\n      },\r\n   });\r\n\r\n   useEffect(() => {\r\n      if (refundSale) inventory.refetch();\r\n   }, [refundSale]);\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={refundSale}\r\n            onHide={() => {\r\n               onClose();\r\n               handleChangeQuantity(0);\r\n            }}\r\n            isLoading={refundMutation.isLoading}\r\n            title=\"Refund Sale\"\r\n            onSubmit={() => {\r\n               refundMutation.mutate(quantity);\r\n            }}\r\n            submitButtonText=\"Refund\"\r\n            size=\"xl\"\r\n            isDisabled={isError}\r\n            {...props}\r\n         >\r\n            <When condition={inventory.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alertMarkup ? (\r\n               <Row>\r\n                  <Col lg={12}>{alertMarkup}</Col>\r\n               </Row>\r\n            ) : null}\r\n            <Form>\r\n               <Form.Group>\r\n                  <Form.Label>Quantity</Form.Label>\r\n                  <Form.Control\r\n                     type=\"number\"\r\n                     value={quantity}\r\n                     onChange={(e) => handleChangeQuantity(e.target.value, inventory.data)}\r\n                  />\r\n               </Form.Group>\r\n\r\n               <Form.Group>\r\n                  <Form.Label>Total</Form.Label>\r\n                  <Form.Control type=\"number\" value={total} onChange={(e) => handleChangeTotal(e.target.value)} />\r\n               </Form.Group>\r\n            </Form>\r\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default RefundSale;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\ClearSale.js",["868","869","870","871","872"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport Select from 'jsx/components/Select';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, post, put, useAlert, useQuery } from 'jsx/helpers';\r\nimport { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\n\r\nconst ClearSale = ({ initialAmount, clearSale, toggle, onClose, onOpen, ...props }) => {\r\n   const [amount, setAmount] = useState(0);\r\n\r\n   useEffect(() => setAmount(initialAmount), [initialAmount]);\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const alert = useAlert();\r\n\r\n   const clearMutation = useMutation((payload) => post(`/sales/pay/id/${clearSale}/amount/${payload}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('sales');\r\n         onClose();\r\n         setAmount(0);\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to clear sale', err });\r\n      },\r\n   });\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={clearSale}\r\n            onHide={() => {\r\n               onClose();\r\n               setAmount(0);\r\n            }}\r\n            isLoading={clearMutation.isLoading}\r\n            title=\"Clear Sale\"\r\n            onSubmit={() => {\r\n               clearMutation.mutate(amount);\r\n            }}\r\n            submitButtonText=\"Clear\"\r\n            size=\"xl\"\r\n            {...props}\r\n         >\r\n            <When condition={clearMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alertMarkup ? (\r\n               <Row>\r\n                  <Col lg={12}>{alertMarkup}</Col>\r\n               </Row>\r\n            ) : null}\r\n            <Form onSubmit={() => clearMutation.mutate(amount)}>\r\n               <Form.Group>\r\n                  <Form.Label>Amount</Form.Label>\r\n                  <Form.Control type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\r\n               </Form.Group>\r\n            </Form>\r\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default ClearSale;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\purchase\\ClearPurchase.js",["873","874","875","876","877"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport Select from 'jsx/components/Select';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { get, post, put, useAlert, useQuery } from 'jsx/helpers';\r\nimport { isArray } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Col, Form, Row } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\n\r\nconst ClearPurchase = ({ initialAmount, clearPurchase, toggle, onClose, onOpen, ...props }) => {\r\n   const [amount, setAmount] = useState(0);\r\n\r\n   useEffect(() => setAmount(initialAmount), [initialAmount]);\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const alert = useAlert();\r\n\r\n   const clearMutation = useMutation((payload) => post(`/purchases/pay/id/${clearPurchase}/amount/${payload}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('purchases');\r\n         onClose();\r\n         setAmount(0);\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to clear purchase', err });\r\n      },\r\n   });\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   return (\r\n      <>\r\n         <ModalWrapper\r\n            show={clearPurchase}\r\n            onHide={() => {\r\n               onClose();\r\n               setAmount(0);\r\n            }}\r\n            isLoading={clearMutation.isLoading}\r\n            title=\"Clear Purchase\"\r\n            onSubmit={() => {\r\n               clearMutation.mutate(amount);\r\n            }}\r\n            submitButtonText=\"Clear\"\r\n            size=\"xl\"\r\n            {...props}\r\n         >\r\n            <When condition={clearMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            {alertMarkup ? (\r\n               <Row>\r\n                  <Col lg={12}>{alertMarkup}</Col>\r\n               </Row>\r\n            ) : null}\r\n            <Form onSubmit={() => clearMutation.mutate(amount)}>\r\n               <Form.Group>\r\n                  <Form.Label>Amount</Form.Label>\r\n                  <Form.Control type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\r\n               </Form.Group>\r\n            </Form>\r\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default ClearPurchase;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\salaries\\index.js",["878","879","880","881","882"],"import dayjs from 'dayjs';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, useAlert, useQuery } from 'jsx/helpers';\r\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\r\nimport _ from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { ButtonGroup, Card, OverlayTrigger, Table, Popover } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setSalariesVisibility } from 'store/actions';\r\nimport swal from 'sweetalert';\r\n\r\nconst Salaries = () => {\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const alert = useAlert();\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const query = useQuery(['salaries', page, limit, sort.field, sort.order], () =>\r\n      get('/salaries', page, limit, sort.field, sort.order)\r\n   );\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   useEffect(() => {\r\n      if (page > query.data?.totalPages) {\r\n         setPage((prev) => prev - 1);\r\n      }\r\n   }, [page, query.data?.totalPages]);\r\n\r\n   const deleteMutation = useMutation((id) => del(`/salaries/id/${id}`), {\r\n      onSuccess: async () => {\r\n         console.log('updating');\r\n         await queryClient.invalidateQueries('salaries');\r\n         console.log('updated');\r\n         alert.setAlert({\r\n            message: 'Salary deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete salary', err });\r\n      },\r\n   });\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <Card className=\"h-100\">\r\n            <When condition={query.isLoading || deleteMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <Card.Header>\r\n               <Card.Title>Salaries</Card.Title>\r\n               <ButtonGroup className=\"tw-float-right\">\r\n                  <input\r\n                     type=\"text\"\r\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\r\n                     placeholder=\"Search Salaries by Employee...\"\r\n                     // disabled={deleteMutation.isLoading}\r\n                     // onChange={(e) => setSearch(e.target.value)}\r\n                  />\r\n                  <Button\r\n                     size=\"sm\"\r\n                     variant=\"primary\"\r\n                     icon={AiFillPlusCircle}\r\n                     onClick={() => dispatch(setSalariesVisibility(true))}\r\n                  >\r\n                     Add New Salary\r\n                  </Button>\r\n               </ButtonGroup>\r\n            </Card.Header>\r\n            <Card.Body>\r\n               <If condition={query.data?.totalDocs > 0}>\r\n                  <Then>\r\n                     <Table className=\"tw-relative\" responsive>\r\n                        <thead>\r\n                           <tr>\r\n                              <th className=\"width80\">\r\n                                 <strong>#</strong>\r\n                              </th>\r\n                              <th>{getSortingIcon({ label: 'Employee' })}</th>\r\n                              <th>{getSortingIcon({ label: 'Salary', key: 'amount', onSort: handleSort, sort })}</th>\r\n                              <th>{getSortingIcon({ label: 'Date', key: 'createdAt', onSort: handleSort, sort })}</th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {query.data?.docs.map((e, index) => (\r\n                              <tr key={`${e._id}`}>\r\n                                 <td>\r\n                                    <strong>{query.data.pagingCounter + index}</strong>\r\n                                 </td>\r\n                                 <td>{e.employee.name}</td>\r\n                                 <td>\r\n                                    {new Intl.NumberFormat('en-IN', {\r\n                                       maximumSignificantDigits: 3,\r\n                                    }).format(e.amount)}{' '}\r\n                                    PKR\r\n                                 </td>\r\n                                 <td>{dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}</td>\r\n                                 <td>\r\n                                    <div className=\"tw-flex tw-items-center tw-gap-4\">\r\n                                       <OverlayTrigger\r\n                                          trigger={['hover', 'hover']}\r\n                                          placement=\"top\"\r\n                                          overlay={\r\n                                             <Popover className=\"tw-border-gray-500\">\r\n                                                <Popover.Content>\r\n                                                   {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\r\n                                                </Popover.Content>\r\n                                             </Popover>\r\n                                          }\r\n                                       >\r\n                                          <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                       </OverlayTrigger>\r\n                                       <Button\r\n                                          variant=\"danger\"\r\n                                          size=\"sm\"\r\n                                          icon={AiFillDelete}\r\n                                          onClick={() => handleOnClickDelete(e._id)}\r\n                                       >\r\n                                          Delete\r\n                                       </Button>\r\n                                    </div>\r\n                                 </td>\r\n                              </tr>\r\n                           ))}\r\n                        </tbody>\r\n                     </Table>\r\n                  </Then>\r\n                  <Else>\r\n                     <When condition={!query.isLoading}>\r\n                        <p className=\"tw-m-0\">No salaries found</p>\r\n                     </When>\r\n                  </Else>\r\n               </If>\r\n            </Card.Body>\r\n         </Card>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={query.isLoading}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default React.memo(Salaries);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\index.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\expenseTypes\\index.js",["883","884"],"import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport { useFormik } from 'formik';\r\nimport Button from 'jsx/components/Button';\r\nimport ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport React, { useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { connect } from 'react-redux';\r\nimport swal from 'sweetalert';\r\n\r\nconst ExpenseTypes = (props) => {\r\n   dayjs.extend(relativeTime);\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState({ field: null, order: -1 });\r\n\r\n   const [showModal, setShowModal] = useState(false);\r\n\r\n   const alert = useAlert();\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['expenses/types', page, limit, sort.field, sort.order], () =>\r\n      get('/expenses/types', page, limit, sort.field, sort.order)\r\n   );\r\n   const deleteMutation = useMutation((id) => del(`/expenses/types/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('expenses/types');\r\n         alert.setAlert({\r\n            message: 'Expense type deleted successfully.',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete Expense type.', err });\r\n      },\r\n   });\r\n\r\n   const postMutation = useMutation((payload) => post('/expenses/types', payload), {\r\n      onSuccess: () => {\r\n         setShowModal(false);\r\n         query.refetch();\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add Expense type.', err });\r\n      },\r\n   });\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         title: '',\r\n      },\r\n      validateOnChange: false,\r\n      validateOnBlur: false,\r\n      onSubmit: (values) => {\r\n         postMutation.mutate(values);\r\n      },\r\n   });\r\n\r\n   const handleOnClickAdd = () => {\r\n      setShowModal(true);\r\n      formik.setFieldValue('title', '');\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const handleSort = (key) => {\r\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\r\n   };\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   return (\r\n      <>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <Card className=\"h-100\">\r\n            <When condition={query.isLoading || deleteMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <Card.Header>\r\n               <Card.Title>Manage Types</Card.Title>\r\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                  Add New Expense Type\r\n               </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n               <If condition={query.data?.length > 0}>\r\n                  <Then>\r\n                     <Table className=\"tw-relative\" responsive>\r\n                        <thead>\r\n                           <tr>\r\n                              <th className=\"width80\">\r\n                                 <strong>#</strong>\r\n                              </th>\r\n                              <th className=\"tw-cursor-pointer\" onClick={() => handleSort('title')}>\r\n                                 <strong className=\"tw-cursor-pointer\">\r\n                                    TITLE\r\n                                    <span>\r\n                                       <When condition={sort.field !== 'title'}>\r\n                                          <FaSort className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                       <When condition={sort.field === 'title' && sort.order === -1}>\r\n                                          <FaSortDown className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                       <When condition={sort.field === 'title' && sort.order === 1}>\r\n                                          <FaSortUp className=\"d-inline mx-1\" />\r\n                                       </When>\r\n                                    </span>\r\n                                 </strong>\r\n                              </th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {query.data?.map((e, index) => (\r\n                              <tr key={`${e._id}`}>\r\n                                 <td>\r\n                                    <strong>{index + 1}</strong>\r\n                                 </td>\r\n                                 <td>{e.title}</td>\r\n                                 <td>\r\n                                    <OverlayTrigger\r\n                                       trigger={['hover', 'hover']}\r\n                                       placement=\"top\"\r\n                                       overlay={\r\n                                          <Popover className=\"tw-border-gray-500\">\r\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\r\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\r\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\r\n                                                   : dayjs(e.createdAt).fromNow()\r\n                                             }.`}</Popover.Content>\r\n                                          </Popover>\r\n                                       }\r\n                                    >\r\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\r\n                                    </OverlayTrigger>\r\n                                 </td>\r\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                    <td>\r\n                                       <ButtonGroup>\r\n                                          <Button\r\n                                             variant=\"danger\"\r\n                                             size=\"sm\"\r\n                                             icon={AiFillDelete}\r\n                                             onClick={() => handleOnClickDelete(e._id)}\r\n                                          />\r\n                                       </ButtonGroup>\r\n                                    </td>\r\n                                 </When>\r\n                              </tr>\r\n                           ))}\r\n                        </tbody>\r\n                     </Table>\r\n                  </Then>\r\n                  <Else>\r\n                     <When condition={!query.isLoading}>\r\n                        <p className=\"tw-m-0\">No types found</p>\r\n                     </When>\r\n                  </Else>\r\n               </If>\r\n            </Card.Body>\r\n         </Card>\r\n\r\n         {/* ADD Modal */}\r\n         <ModalWrapper\r\n            show={showModal}\r\n            onHide={() => {\r\n               setShowModal(false);\r\n            }}\r\n            title=\"Add New Expense Type\"\r\n            isLoading={query.isLoading || postMutation.isLoading}\r\n            size=\"md\"\r\n            onSubmit={formik.handleSubmit}\r\n            submitButtonText=\"Confirm\"\r\n         >\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <div className=\"row\">\r\n                  <div className=\"form-group col-xl-6\">\r\n                     <label className=\"col-form-label\">Title</label>\r\n                     <input\r\n                        className=\"form-control\"\r\n                        onChange={formik.handleChange}\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        value={formik.values.title}\r\n                     />\r\n                  </div>\r\n               </div>\r\n            </form>\r\n         </ModalWrapper>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(ExpenseTypes));\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\units\\index.js",["885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905"],"import useUrlState from '@ahooksjs/use-url-state';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport Button from 'jsx/components/Button';\r\nimport ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle, AiFillEye } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport swal from 'sweetalert';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useFormik } from 'formik';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setUnitsData, setUnitsVisibility } from 'store/actions';\r\nimport CreatableSelect from '../../components/CreatableSelect';\r\n\r\nconst Units = (props) => {\r\n   const history = useHistory();\r\n   dayjs.extend(relativeTime);\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [urlState, setUrlState] = useUrlState({});\r\n   const [search, setSearch] = useState('');\r\n\r\n   const [showModal, setShowModal] = useState(false);\r\n   const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n   const alert = useAlert();\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const query = useQuery(['units', page, limit, search], () => get('/units', page, limit, '', '', search));\r\n   const getTypes = useQuery('types', () => get('/types'));\r\n   const deleteMutation = useMutation((id) => del(`/units/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('units');\r\n         alert.setAlert({\r\n            message: 'Unit deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete Unit', err });\r\n      },\r\n   });\r\n\r\n   const postMutation = useMutation((payload) => post('/units', payload), {\r\n      onSuccess: () => {\r\n         setShowModal(false);\r\n         setUrlState({});\r\n         query.refetch();\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\r\n      },\r\n   });\r\n   const postTypeMutation = useMutation((payload) => post('/types', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('types');\r\n      },\r\n   });\r\n\r\n   const isAdd = useMemo(() => urlState?.action === 'add', [urlState.action]);\r\n   const mutation = useMemo(() => postMutation, [postMutation]);\r\n\r\n   const handleOnClickAdd = () => {\r\n      dispatch(setUnitsVisibility(true));\r\n      dispatch(setUnitsData({}));\r\n      // setUrlState({ action: 'add' });\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   return (\r\n      <>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <Card className=\"h-100\">\r\n            <When condition={query.isLoading || deleteMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <Card.Header>\r\n               <Card.Title>Manage units</Card.Title>\r\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                  Add New Unit\r\n               </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n               <If condition={query.data?.length > 0}>\r\n                  <Then>\r\n                     <Table className=\"tw-relative\" responsive>\r\n                        <thead>\r\n                           <tr>\r\n                              <th className=\"width80\">\r\n                                 <strong>#</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong className=\"tw-cursor-pointer\">Title</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong className=\"tw-cursor-pointer\">Value</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong className=\"tw-cursor-pointer\">Type</strong>\r\n                              </th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {query.data?.map((e, index) => (\r\n                              <tr key={`${e._id}`}>\r\n                                 <td>\r\n                                    <strong>{index + 1}</strong>\r\n                                 </td>\r\n                                 <td>{e.title}</td>\r\n                                 <td>{e.value}</td>\r\n                                 <td>{e.type.title}</td>\r\n\r\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                    <td>\r\n                                       <Button\r\n                                          variant=\"danger\"\r\n                                          size=\"sm\"\r\n                                          icon={AiFillDelete}\r\n                                          onClick={() => handleOnClickDelete(e._id)}\r\n                                       >\r\n                                          Delete\r\n                                       </Button>\r\n                                    </td>\r\n                                 </When>\r\n                              </tr>\r\n                           ))}\r\n                        </tbody>\r\n                     </Table>\r\n                  </Then>\r\n                  <Else>\r\n                     <When condition={!query.isLoading}>\r\n                        <p className=\"tw-m-0\">No units created</p>\r\n                     </When>\r\n                  </Else>\r\n               </If>\r\n            </Card.Body>\r\n         </Card>\r\n      </>\r\n   );\r\n};\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Units));\r\n",["906","907","908","909","910"],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\types\\index.js",["911","912","913","914","915","916","917","918","919","920","921","922","923","924"],"import useUrlState from '@ahooksjs/use-url-state';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport Button from 'jsx/components/Button';\r\nimport ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport React, { useMemo, useState } from 'react';\r\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\r\nimport { AiFillDelete, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport { useHistory } from 'react-router-dom';\r\nimport swal from 'sweetalert';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setTypesData, setTypesVisibility } from 'store/actions';\r\n\r\nconst Types = (props) => {\r\n   const history = useHistory();\r\n   dayjs.extend(relativeTime);\r\n   const [urlState, setUrlState] = useUrlState({});\r\n\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [search, setSearch] = useState('');\r\n   const [showModal, setShowModal] = useState(false);\r\n   const [title, setTitle] = useState('');\r\n\r\n   const alert = useAlert();\r\n   const queryClient = useQueryClient();\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const query = useQuery('types', () => get('/types', page, limit, '', '', search));\r\n   const postMutation = useMutation((payload) => post('/types', payload), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('units');\r\n         if (urlState.redirect) {\r\n            history.replace(urlState.redirect);\r\n         }\r\n         setShowModal(false);\r\n         query.refetch();\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\r\n      },\r\n   });\r\n   const deleteMutation = useMutation((id) => del(`/types/id/${id}`), {\r\n      onSuccess: async () => {\r\n         await queryClient.invalidateQueries('types');\r\n         alert.setAlert({\r\n            message: 'Type deleted successfully',\r\n            variant: 'success',\r\n         });\r\n      },\r\n      onError: (err) => {\r\n         alert.setErrorAlert({ message: 'Unable to delete Type', err });\r\n      },\r\n   });\r\n\r\n   const mutation = useMemo(() => postMutation, [postMutation]);\r\n\r\n   const handleOnClickAdd = () => {\r\n      // setUrlState({ action: 'add' });\r\n      dispatch(setTypesVisibility(true));\r\n      dispatch(setTypesData({}));\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete) {\r\n            deleteMutation.mutate(id);\r\n         }\r\n      });\r\n   };\r\n   const handleOnClickView = (id) => {\r\n      history.push(`/products/types/${id}`);\r\n   };\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      mutation.mutate({ title });\r\n   };\r\n   const alertMarkup = alert.getAlert();\r\n\r\n   return (\r\n      <>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <Card className=\"h-100\">\r\n            <When condition={query.isLoading || deleteMutation.isLoading}>\r\n               <SpinnerOverlay />\r\n            </When>\r\n            <Card.Header>\r\n               <Card.Title>Manage types</Card.Title>\r\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                  Add New Type\r\n               </Button>\r\n            </Card.Header>\r\n            <Card.Body>\r\n               <If condition={query.data?.length > 0}>\r\n                  <Then>\r\n                     <Table className=\"tw-relative\" responsive>\r\n                        <thead>\r\n                           <tr>\r\n                              <th className=\"width80\">\r\n                                 <strong>#</strong>\r\n                              </th>\r\n                              <th>\r\n                                 <strong>TITLE</strong>\r\n                              </th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {query.data?.map((e, index) => (\r\n                              <tr key={`${e._id}`}>\r\n                                 <td>\r\n                                    <strong>{index + 1}</strong>\r\n                                 </td>\r\n                                 <td>{e.title}</td>\r\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                                    <td>\r\n                                       <Button\r\n                                          variant=\"danger\"\r\n                                          size=\"sm\"\r\n                                          icon={AiFillDelete}\r\n                                          onClick={() => handleOnClickDelete(e._id)}\r\n                                       >\r\n                                          Delete\r\n                                       </Button>\r\n                                    </td>\r\n                                 </When>\r\n                              </tr>\r\n                           ))}\r\n                        </tbody>\r\n                     </Table>\r\n                  </Then>\r\n                  <Else>\r\n                     <When condition={!query.isLoading}>\r\n                        <p className=\"tw-m-0\">No types created</p>\r\n                     </When>\r\n                  </Else>\r\n               </If>\r\n            </Card.Body>\r\n         </Card>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Types));\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\expenses\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\employees\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\inventories\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\getSortingIcon.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\getQuantity.js",["925"],"import { Fragment } from 'react';\r\n\r\n/* eslint-disable prefer-destructuring */\r\nexport default (array) => {\r\n   if (!array) return null;\r\n   if (array[0] > 0) return `${array[0]} Units`;\r\n   return `${array[1]} ${array[1] > 0 ? 'Singles' : ''}`;\r\n};\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\useAlert.js",["926"],"import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport cls from 'classnames';\r\nimport { getError } from './server';\r\n\r\nexport const useAlert = () => {\r\n   const [isShowing, setIsShowing] = useState(false);\r\n   const [message, setMessage] = useState('');\r\n   const [variant, setVariant] = useState('success');\r\n\r\n   const callback = useRef(null);\r\n   const timeout = useRef(null);\r\n\r\n   // eslint-disable-next-line arrow-body-style\r\n   useEffect(() => {\r\n      return () => {\r\n         if (timeout.current) clearTimeout(timeout.current);\r\n      };\r\n   }, []);\r\n\r\n   const resetTimeout = useCallback((duration) => {\r\n      if (timeout.current) clearTimeout(timeout.current);\r\n      timeout.current = setTimeout(() => {\r\n         setIsShowing(false);\r\n         timeout.current = null;\r\n         if (callback.current) callback.current();\r\n      }, duration);\r\n   }, []);\r\n\r\n   const getAlert = useCallback(\r\n      () =>\r\n         isShowing ? (\r\n            <Alert\r\n               className=\"alert-dismissible fade show\"\r\n               variant={variant}\r\n               dismissible\r\n               onClose={() => setIsShowing(false)}\r\n            >\r\n               <p className={cls(`tw-m-0 tw-opacity-60`, { 'tw-text-black': variant === 'success' })}>{message}</p>\r\n            </Alert>\r\n         ) : null,\r\n      [isShowing, message, variant]\r\n   );\r\n\r\n   const setAlert = useCallback(\r\n      ({ message: msg = '', variant: v = 'success', callback: cb = null, duration: d = 3000 }) => {\r\n         callback.current = cb;\r\n         resetTimeout(d);\r\n         setIsShowing(true);\r\n         setMessage(msg);\r\n         setVariant(v);\r\n      },\r\n      [resetTimeout]\r\n   );\r\n\r\n   const setErrorAlert = useCallback(\r\n      ({ message: msg = 'Unable to dispatch action', err, callback: cb = null, duration: d = 6000 }) => {\r\n         resetTimeout(d);\r\n         const m = (\r\n            <>\r\n               <strong>{msg}</strong>\r\n               <br />\r\n               {getError(err).map((e, i, a) => (\r\n                  <React.Fragment key={`error-${i}`}>\r\n                     <p className=\"tw-m-0\">{e}</p>\r\n                     {i < a.length - 2 ? <br /> : null}\r\n                  </React.Fragment>\r\n               ))}\r\n            </>\r\n         );\r\n\r\n         callback.current = cb;\r\n         setIsShowing(true);\r\n         setMessage(m);\r\n         setVariant('danger');\r\n      },\r\n      [resetTimeout]\r\n   );\r\n\r\n   const alert = useMemo(() => ({ getAlert, setAlert, setErrorAlert }), [getAlert, setAlert, setErrorAlert]);\r\n\r\n   return alert;\r\n};\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\server.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\useQuery.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\salaries\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\customers\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\suppliers\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\units\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\types\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\store\\products\\actions.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\Footer.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\nav\\index.js",["927"],"import React, { Fragment, useState } from 'react';\r\nimport SideBar from './SideBar';\r\nimport NavHader from './NavHader';\r\nimport Header from './Header';\r\nimport ChatBox from '../ChatBox';\r\n\r\nconst JobieNav = ({ title }) => {\r\n   const [toggle, setToggle] = useState('');\r\n   const onClick = (name) => setToggle(toggle === name ? '' : name);\r\n   return (\r\n      <>\r\n         <NavHader />\r\n         <SideBar />\r\n         <Header\r\n            onNote={() => onClick('chatbox')}\r\n            onNotification={() => onClick('notification')}\r\n            onProfile={() => onClick('profile')}\r\n            toggle={toggle}\r\n            title={title}\r\n            onBox={() => onClick('box')}\r\n         />\r\n         {/* <ChatBox onClick={() => onClick('chatbox')} toggle={toggle} /> */}\r\n      </>\r\n   );\r\n};\r\n\r\nexport default JobieNav;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\nav\\SideBar.js",["928","929","930","931"],"/// Menu\r\nimport MetisMenu from 'metismenujs';\r\nimport React, { Component, useEffect, memo } from 'react';\r\n/// Scroll\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n/// Link\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\n\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { setLogin } from 'store/auth/actions';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\n\r\n/// Active menu\r\nconst manage = ['/employees', '/customers', '/products', '/users', '/types', '/units'];\r\n\r\nclass MM extends Component {\r\n   componentDidMount() {\r\n      this.$el = this.el;\r\n      this.mm = new MetisMenu(this.$el);\r\n   }\r\n\r\n   componentWillUnmount() {\r\n      this.mm.dispose();\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"mm-wrapper\">\r\n            <ul className=\"metismenu\" ref={(el) => (this.el = el)}>\r\n               {this.props.children}\r\n            </ul>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nconst SideBar = (props) => {\r\n   const { pathname: path } = useLocation();\r\n   const isCashier = useSelector((state) => state.auth.user.role === 'CASHIER');\r\n\r\n   useEffect(() => {\r\n      const btn = document.querySelector('.nav-control');\r\n      const aaa = document.querySelector('#main-wrapper');\r\n\r\n      function toggleFunc() {\r\n         return aaa.classList.toggle('menu-toggle');\r\n      }\r\n\r\n      btn.addEventListener('click', toggleFunc);\r\n   }, []);\r\n\r\n   return (\r\n      <div className=\"deznav\">\r\n         <PerfectScrollbar className=\"deznav-scroll\">\r\n            <MM className=\"metismenu\" id=\"menu\">\r\n               <When condition={!isCashier}>\r\n                  <li className={path === '/dashboard' ? 'mm-active' : ''}>\r\n                     <Link className=\"\" to=\"/dashboard\" aria-expanded=\"false\">\r\n                        <i className=\"flaticon-381-networking\" />\r\n                        <span className=\"nav-text\">Dashboard</span>\r\n                     </Link>\r\n                  </li>\r\n               </When>\r\n               <li className={path === '/products' ? 'mm-active' : ''}>\r\n                  <Link className=\"\" to=\"/products\" aria-expanded=\"false\">\r\n                     <i className=\"flaticon-381-box\" />\r\n                     <span className=\"nav-text\">Products</span>\r\n                  </Link>\r\n               </li>\r\n               {/* <li className={`${manage.includes(path.slice(1)) ? 'mm-active' : ''}`}>\r\n                  <Link className=\"has-arrow ai-icon color\" aria-expanded=\"false\">\r\n                     <i className=\"flaticon-381-notepad\" />\r\n                     <span className=\"nav-text\">Manage</span>\r\n                  </Link>\r\n                  <ul aria-expanded=\"false\">\r\n                     <li className={path === '/products' ? 'mm-active' : ''}>\r\n                        <Link to=\"/products\">Products</Link>\r\n                     </li>\r\n                     <li>\r\n                        <Link to=\"/suppliers\">Suppliers</Link>\r\n                     </li>\r\n                     <li>\r\n                        <Link to=\"/customers\">Customers</Link>\r\n                     </li>\r\n                     <li>\r\n                        <Link to=\"/app-calender\">Users</Link>\r\n                     </li>\r\n                     <When condition={props.user?.role !== userRoles.CASHIER}>\r\n                        <li>\r\n                           <Link to=\"/users\">Users</Link>\r\n                        </li>\r\n                        <li>\r\n                           <Link to=\"/employees\">Employees</Link>\r\n                        </li>\r\n                     </When>\r\n                  </ul>\r\n               </li> */}\r\n               {/* <li className={path === '/purchase' ? 'mm-active' : ''}>\r\n                  <Link className=\"\" to=\"/purchase\" aria-expanded=\"false\">\r\n                     <i className=\"flaticon-381-more\" />\r\n                     <span className=\"nav-text\">Purchase</span>\r\n                  </Link>\r\n               </li> */}\r\n               <li className={path === '/sale' ? 'mm-active' : ''}>\r\n                  <Link className=\"\" to=\"/sale\" aria-expanded=\"false\">\r\n                     <i className=\"flaticon-381-notepad\" />\r\n                     <span className=\"nav-text\">Sale</span>\r\n                  </Link>\r\n               </li>\r\n               {!isCashier && (\r\n                  <li className={path === '/users' ? 'mm-active' : ''}>\r\n                     <Link className=\"\" to=\"/users\" aria-expanded=\"false\">\r\n                        <i className=\"flaticon-381-user\" />\r\n                        <span className=\"nav-text\">Users</span>\r\n                     </Link>\r\n                  </li>\r\n               )}\r\n            </MM>\r\n         </PerfectScrollbar>\r\n      </div>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setLogin: (payload) => dispatch(setLogin(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(SideBar));\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\nav\\Header.js",["932","933","934","935","936","937"],"import React from 'react';\r\n/// Image\r\nimport Avatar from 'react-avatar';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { setLogin, setLogout } from 'store/auth/actions';\r\n\r\nconst pages = [\r\n   { path: '/dashboard', label: 'Dashboard' },\r\n   { path: '/inventory', label: 'Inventory' },\r\n\r\n   { path: '/products', label: 'Products' },\r\n   { path: '/suppliers', label: 'Suppliers' },\r\n   { path: '/customers', label: 'Customers' },\r\n   { path: '/users', label: 'Users' },\r\n   { path: '/employees', label: 'Employees' },\r\n   { path: '/purchase', label: 'Purchase' },\r\n   { path: '/sale', label: 'Sale' },\r\n   { path: '/expenses', label: 'Expenses' },\r\n];\r\n\r\nconst Header = ({ onNote, toggle, onProfile, setUser, onNotification, onBox, logout }) => {\r\n   const history = useHistory();\r\n   const path = window.location.pathname;\r\n   const finalName = pages.find((p) => path.includes(p.path))?.label;\r\n   const dispatch = useDispatch();\r\n\r\n   const handleLogout = () => {\r\n      localStorage.clear();\r\n      logout();\r\n      setUser({});\r\n   };\r\n\r\n   React.useEffect(() => {\r\n      const token = localStorage.getItem('auth_token');\r\n      if (!token) {\r\n         logout();\r\n         localStorage.clear();\r\n         history.push('/page-login');\r\n      }\r\n   }, []);\r\n\r\n   return (\r\n      <div className=\"header\">\r\n         <div className=\"header-content\">\r\n            <nav className=\"navbar navbar-expand\">\r\n               <div className=\"collapse navbar-collapse justify-content-between\">\r\n                  <div className=\"header-left\">\r\n                     <div className=\"dashboard_bar\" style={{ textTransform: 'capitalize' }}>\r\n                        {finalName || 'Dashboard'}\r\n                     </div>\r\n                  </div>\r\n                  <ul className=\"navbar-nav header-right\">\r\n                     <li className=\"nav-item dropdown header-profile\">\r\n                        <Link\r\n                           to=\"#\"\r\n                           role=\"button\"\r\n                           data-toggle=\"dropdown\"\r\n                           className={`nav-item dropdown header-profile ${toggle === 'profile' ? 'show' : ''}`}\r\n                           onClick={() => onProfile()}\r\n                        >\r\n                           {/* <img alt=\"Profile\" src={profile} width={20} /> */}\r\n                           <Avatar name=\"Foo Bar\" size=\"38\" textSizeRatio={2.9} round />\r\n                        </Link>\r\n                        <div className={`dropdown-menu dropdown-menu-right ${toggle === 'profile' ? 'show' : ''}`}>\r\n                           <Link to=\"/\" className=\"dropdown-item ai-icon\" onClick={handleLogout}>\r\n                              <svg\r\n                                 id=\"icon-logout\"\r\n                                 xmlns=\"http://www.w3.org/2000/svg\"\r\n                                 className=\"text-danger\"\r\n                                 width={18}\r\n                                 height={18}\r\n                                 viewBox=\"0 0 24 24\"\r\n                                 fill=\"none\"\r\n                                 stroke=\"currentColor\"\r\n                                 strokeWidth={2}\r\n                                 strokeLinecap=\"round\"\r\n                                 strokeLinejoin=\"round\"\r\n                              >\r\n                                 <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\r\n                                 <polyline points=\"16 17 21 12 16 7\" />\r\n                                 <line x1={21} y1={12} x2={9} y2={12} />\r\n                              </svg>\r\n                              <span className=\"ml-2\">Logout </span>\r\n                           </Link>\r\n                        </div>\r\n                     </li>\r\n                  </ul>\r\n               </div>\r\n            </nav>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setUser: (payload) => dispatch(setLogin(payload)),\r\n   logout: () => dispatch(setLogout()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\nav\\NavHader.js",["938","939"],"import React, { useState } from 'react';\r\n\r\n/// React router dom\r\nimport { Link } from 'react-router-dom';\r\n\r\n/// images\r\nimport logo from '../../../images/logo.png';\r\nimport logoText from '../../../images/logo-text.png';\r\n\r\nconst NavHader = () => {\r\n   const [toggle, setToggle] = useState(false);\r\n   return (\r\n      <div className=\"nav-header\">\r\n         <Link to=\"/\" className=\"brand-logo\">\r\n            {/* <img className=\"logo-abbr\" src={logo} alt=\"\" />\r\n            <img className=\"logo-compact\" src={logoText} alt=\"\" /> */}\r\n            {/* <img className=\"brand-title\" src={logoText} alt=\"\" /> */}\r\n            <h1 className=\"brand-title tw-text-2xl tw-text-black tw-font-bold\">Frosty Bites N Sips</h1>\r\n         </Link>\r\n\r\n         <div className=\"nav-control\" role=\"button\" tabIndex=\"0\" onClick={() => setToggle(!toggle)}>\r\n            <div className={`hamburger ${toggle ? 'is-active' : ''}`}>\r\n               <span className=\"line\" />\r\n               <span className=\"line\" />\r\n               <span className=\"line\" />\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default NavHader;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\layouts\\ChatBox.js",["940"],"import React, { useState } from 'react';\r\n\r\n/// Scroll\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\nconst ChatBox = ({ onClick, toggle }) => {\r\n   const [toggleTab, settoggleTab] = useState(window.location.hash.slice(1) ? window.location.hash.slice(1) : 'chat');\r\n\r\n   const dataToggle = [\r\n      { href: '#notes', name: 'Notes' },\r\n      { href: '#alerts', name: 'Alerts' },\r\n      { href: '#chat', name: 'Chat' },\r\n   ];\r\n\r\n   return (\r\n      <div className={`chatbox ${toggle === 'chatbox' ? 'active' : ''}`}>\r\n         <div className=\"chatbox-close\" label=\"chatbox-close\" role=\"button\" tabIndex=\"0\" onClick={() => onClick()} />\r\n         <div className=\"custom-tab-1\">\r\n            <ul className=\"nav nav-tabs\">\r\n               {dataToggle.map((data, i) => (\r\n                  <li className=\"nav-item\" key={i}>\r\n                     <a\r\n                        className={`nav-link ${toggleTab === data.name.toLocaleLowerCase() ? 'active' : ''}`}\r\n                        data-toggle=\"tab\"\r\n                        href={data.href}\r\n                        onClick={() => settoggleTab(data.name.toLocaleLowerCase())}\r\n                     >\r\n                        {data.name}\r\n                     </a>\r\n                  </li>\r\n               ))}\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n               {/* <Chat PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} />\r\n               <Notes PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} />\r\n               <Alerts PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} /> */}\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default ChatBox;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\TableSearch.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\GenericTableHeadingSorter.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\DeleteButton.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\modals\\index.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\modals\\manage-product\\index.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\modals\\manage-product\\manage-product.modal.js",["941","942","943","944","945","946","947","948","949"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useRef, useMemo } from 'react';\r\nimport { batch, useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { api, getV2, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport {\r\n   setProductsData,\r\n   setProductsVisibility,\r\n   setTypesData,\r\n   setTypesVisibility,\r\n   setUnitsData,\r\n   setUnitsVisibility,\r\n} from 'store/actions';\r\nimport { Formik } from 'formik';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { When } from 'react-if';\r\nimport { handleFormError } from 'jsx/helpers/misc';\r\nimport { toast } from 'react-toastify';\r\nimport ManageProductForm from './manage-product-form';\r\nimport { productShema } from '../../validations';\r\n\r\nconst ManageProductModal = () => {\r\n   const state = useSelector((s) => s.products);\r\n   const dispatch = useDispatch();\r\n\r\n   const nameInputRef = useRef();\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const editingProductId = state.data._id;\r\n   const isEditing = !!editingProductId;\r\n\r\n   const createMutation = useMutation((payload) => post('/products', payload));\r\n   const editMutation = useMutation((payload) => api.patch(`/products/id/${editingProductId}`, payload));\r\n\r\n   const mutation = useMemo(\r\n      () => (isEditing ? editMutation : createMutation),\r\n      [createMutation, editMutation, isEditing]\r\n   );\r\n\r\n   const handleSubmit = (values, { resetForm, setErrors }) => {\r\n      mutation.mutate(values, {\r\n         onSuccess: async () => {\r\n            dispatch(setProductsVisibility(false));\r\n            dispatch(setProductsData({}));\r\n            toast.success(`Product has been ${isEditing ? 'edited' : 'created'} successfully`);\r\n            return queryClient.invalidateQueries('products').then(resetForm);\r\n         },\r\n         onError: handleFormError(setErrors),\r\n      });\r\n   };\r\n\r\n   const handleShow = () => {\r\n      nameInputRef.current.focus();\r\n   };\r\n\r\n   const shouldShowSpinner = mutation.isLoading;\r\n\r\n   return (\r\n      <Formik\r\n         enableReinitialize\r\n         validateOnBlur={false}\r\n         validateOnChange={false}\r\n         validateOnMount={false}\r\n         validationSchema={productShema}\r\n         onSubmit={handleSubmit}\r\n         initialValues={{\r\n            name: state.data.name ?? '',\r\n            price: state.data.price ?? null,\r\n            tags: state.data.tags || [],\r\n         }}\r\n      >\r\n         {({ resetForm }) => {\r\n            const handleHide = () => {\r\n               resetForm();\r\n               batch(() => {\r\n                  dispatch(setProductsData({}));\r\n                  dispatch(setProductsVisibility(false));\r\n               });\r\n            };\r\n\r\n            return (\r\n               <ModalWrapper\r\n                  show={state.visible}\r\n                  title={isEditing ? 'Edit Product' : 'Add New Product'}\r\n                  isLoading={shouldShowSpinner}\r\n                  onShow={handleShow}\r\n                  onHide={handleHide}\r\n                  includeFormikForm\r\n               >\r\n                  <When condition={shouldShowSpinner}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <ManageProductForm ref={nameInputRef} />\r\n               </ModalWrapper>\r\n            );\r\n         }}\r\n      </Formik>\r\n   );\r\n};\r\n\r\nexport default ManageProductModal;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\modals\\manage-product\\manage-product-form.js",["950","951"],"import { Field } from 'formik';\r\nimport FormField from 'jsx/components/FormField';\r\nimport React, { forwardRef } from 'react';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport SelectTags from './select-tags';\r\n\r\nconst _ManageProductForm = ({ ...restProps }, ref) => (\r\n   <div className=\"row\">\r\n      <FormField ref={ref} label=\"Name\" name=\"name\" isRequired />\r\n      <FormField type=\"number\" label=\"Price\" name=\"price\" isRequired />\r\n      <SelectTags />\r\n      {/* <div className=\"form-group col-xl-12\">\r\n         <label className=\"col-form-label\">Type</label>\r\n         {!types.isLoading && !types.isError && (\r\n            <CreatableSelect\r\n               onChange={(type) => formik.setFieldValue('type', type.value)}\r\n               options={types.data?.map((type) => ({ label: type.title, value: type }))}\r\n               onCreateOption={(title) => {\r\n                  dispatch(setTypesData({ title }));\r\n                  dispatch(setTypesVisibility(true));\r\n               }}\r\n            />\r\n         )}\r\n      </div>\r\n      <div className=\"form-group col-xl-12\">\r\n         <label className=\"col-form-label\">Unit</label>\r\n         <CreatableSelect\r\n            width=\"tw-w-full\"\r\n            onChange={(unit) => formik.setFieldValue('unit', unit.value)}\r\n            options={units.data?.map((unit) => ({ label: unit.title, value: unit }))}\r\n            onCreateOption={(title) => {\r\n               dispatch(setUnitsData({ title }));\r\n               dispatch(setUnitsVisibility(true));\r\n            }}\r\n            //    options={units.data?.map((e) => ({ label: e.title, value: e }))}\r\n         />\r\n      </div> */}\r\n   </div>\r\n);\r\n\r\nconst ManageProductForm = forwardRef(_ManageProductForm);\r\n\r\nexport default ManageProductForm;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\FormField.js",["952"],"/* eslint-disable react/display-name */\r\nimport { ErrorMessage, Field, useFormikContext } from 'formik';\r\nimport React, { forwardRef } from 'react';\r\nimport cls from 'classnames';\r\nimport { When } from 'react-if';\r\nimport FormikField from './FormikField';\r\n\r\nconst FormField = forwardRef(\r\n   (\r\n      {\r\n         containerClassName = '',\r\n         labelClassName = '',\r\n         inputClassName = '',\r\n         label = '',\r\n         name = '',\r\n         children,\r\n         isRequired = false,\r\n         column = 12,\r\n         ...restProps\r\n      },\r\n      ref\r\n   ) => {\r\n      const { errors } = useFormikContext();\r\n      const fieldError = errors[name];\r\n\r\n      return (\r\n         <div className={cls(`form-group col-xl-${column}`, containerClassName)}>\r\n            <label htmlFor={name} className={cls('col-form-label', labelClassName)}>\r\n               {label}{' '}\r\n               <When condition={isRequired}>\r\n                  <span className=\"text-danger\">*</span>\r\n               </When>\r\n            </label>\r\n            {children ? (\r\n               <Field name={name}>{children}</Field>\r\n            ) : (\r\n               <FormikField\r\n                  ref={ref}\r\n                  name={name}\r\n                  className={cls('form-control', inputClassName, { 'is-invalid': !!fieldError })}\r\n                  {...restProps}\r\n               />\r\n            )}\r\n            <When condition={!!fieldError}>\r\n               <div className=\"invalid-feedback\">{fieldError}</div>\r\n            </When>\r\n         </div>\r\n      );\r\n   }\r\n);\r\n\r\nexport default FormField;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\FormikField.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\modals\\manage-product\\select-tags.js",["953","954","955"],"import { useFormikContext } from 'formik';\r\nimport FormField from 'jsx/components/FormField';\r\nimport { api, get, useAlert, useQuery } from 'jsx/helpers';\r\nimport React, { useState } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { useSelector } from 'react-redux';\r\nimport CreatableSelect from 'react-select/creatable';\r\nimport _cloneDeep from 'lodash/cloneDeep';\r\nimport { defaultSelectStyles } from 'jsx/components/Select';\r\nimport { createSelectTagOption } from '../../utils';\r\n\r\nconst SelectTags = (props) => {\r\n   const { setFieldValue, values } = useFormikContext();\r\n   const fieldValue = values.tags || [];\r\n\r\n   const alert = useAlert();\r\n   const alertMarkup = alert.getAlert();\r\n   const [createdTag, setCreatedTag] = useState(null);\r\n\r\n   const queryClient = useQueryClient();\r\n   const isModalVisible = useSelector((s) => s.products.visible);\r\n\r\n   const tagsQuery = useQuery(['TAGS'], () => api.get('/tags').then((res) => res.data), {\r\n      enabled: !!isModalVisible,\r\n      onSuccess: () => {\r\n         console.log('onSuccess tags', createdTag, fieldValue);\r\n         if (createdTag) {\r\n            const _selectedTags = _cloneDeep(fieldValue);\r\n            _selectedTags.push(createdTag._id);\r\n\r\n            setFieldValue('tags', _selectedTags);\r\n            setCreatedTag(null);\r\n         }\r\n      },\r\n   });\r\n\r\n   const createTagMutation = useMutation((payload) => api.post('/tags', payload).then((res) => res.data));\r\n\r\n   const selectOptions = (tagsQuery.data || []).map(createSelectTagOption);\r\n\r\n   const handleChange = (tags) => {\r\n      if (!tags || tags.length <= 0) return setFieldValue('tags', []);\r\n      const correspondingTagIds = tags.map((_tag) => _tag.value);\r\n      setFieldValue('tags', correspondingTagIds);\r\n   };\r\n\r\n   const getSelectedTags = () => {\r\n      if (tagsQuery.isLoading || tagsQuery.data?.length <= 0 || fieldValue.length <= 0) return [];\r\n      return tagsQuery.data.filter((_tag) => fieldValue.includes(_tag._id)).map(createSelectTagOption);\r\n   };\r\n\r\n   const selectedTags = getSelectedTags();\r\n\r\n   const handleCreateTag = (tagName) => {\r\n      createTagMutation.mutate(\r\n         { name: tagName },\r\n         {\r\n            onSuccess: (_createdTag) => {\r\n               setCreatedTag(_createdTag);\r\n               return queryClient.invalidateQueries('TAGS');\r\n            },\r\n            onError: (err) => alert.setErrorAlert({ message: 'Unable to add tag', err }),\r\n         }\r\n      );\r\n   };\r\n\r\n   return (\r\n      <>\r\n         {alertMarkup ? (\r\n            <Row>\r\n               <Col lg={12}>{alertMarkup}</Col>\r\n            </Row>\r\n         ) : null}\r\n         <FormField label=\"Tags\" name=\"tags\">\r\n            {() => (\r\n               <CreatableSelect\r\n                  isMulti\r\n                  styles={defaultSelectStyles}\r\n                  value={selectedTags}\r\n                  isLoading={tagsQuery.isLoading}\r\n                  options={selectOptions}\r\n                  onChange={handleChange}\r\n                  onCreateOption={handleCreateTag}\r\n               />\r\n            )}\r\n         </FormField>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default SelectTags;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\helpers\\misc.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\utils.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\validations.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\components\\EditButton.js",["956"],"import React from 'react';\r\nimport { AiFillDelete, AiFillEdit } from 'react-icons/ai';\r\n// eslint-disable-next-line import/no-named-as-default\r\nimport Button from './Button';\r\n\r\nconst EditButton = ({ size = 'sm', children = 'Edit', onClick }) => (\r\n   <Button variant=\"secondary\" size={size} icon={AiFillEdit} onClick={onClick}>\r\n      {children}\r\n   </Button>\r\n);\r\n\r\nexport default EditButton;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\product-grid.js",["957","958"],"import { useDebounce } from 'ahooks';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { api, del, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Badge, ButtonGroup, Card, Col, Table } from 'react-bootstrap';\r\nimport { AiFillPlusCircle } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport swal from 'sweetalert';\r\nimport { batch, connect, useDispatch } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setProductsData, setProductsVisibility } from 'store/actions';\r\nimport TableSearch from 'jsx/components/TableSearch';\r\nimport GenericTableHeadingSorter from 'jsx/components/GenericTableHeadingSorter';\r\nimport DeleteButton from 'jsx/components/DeleteButton';\r\nimport EditButton from 'jsx/components/EditButton';\r\nimport { toast } from 'react-toastify';\r\nimport { handleToastError, initialSort } from 'jsx/helpers/misc';\r\nimport { GET_PRODUCTS } from './queries';\r\nimport { DELETE_ENTITY } from '../../../queries';\r\n\r\nconst ProductGrid = (props) => {\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState(initialSort);\r\n\r\n   const [search, setSearch] = useState('');\r\n\r\n   const dispatch = useDispatch();\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['products', { page, sort, limit, search: debouncedSearchValue }], GET_PRODUCTS, {\r\n      onSuccess: (data) => {\r\n         if (page > data.totalPages) setPage((prev) => prev - 1);\r\n      },\r\n   });\r\n\r\n   const deleteMutation = useMutation(DELETE_ENTITY('Product'));\r\n\r\n   const handleOnClickAdd = () => {\r\n      dispatch(setProductsVisibility(true));\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete)\r\n            deleteMutation.mutate(id, {\r\n               onSuccess: async () => {\r\n                  toast.success('Product deleted successfully');\r\n                  return queryClient.invalidateQueries('products');\r\n               },\r\n               onError: handleToastError,\r\n            });\r\n      });\r\n   };\r\n\r\n   const handleSort = (field) => {\r\n      setSort((prev) => {\r\n         if (prev.field && prev.order === -1) return initialSort;\r\n         return { field, order: prev.order * -1 };\r\n      });\r\n   };\r\n\r\n   const TableHeadingSorter = useCallback(\r\n      ({ field, children }) => (\r\n         <GenericTableHeadingSorter sort={sort} field={field} onClick={() => handleSort(field)}>\r\n            {children}\r\n         </GenericTableHeadingSorter>\r\n      ),\r\n      [sort]\r\n   );\r\n\r\n   const handleEdit = (row) => {\r\n      const tagIds = row.tags.map((_tag) => _tag._id);\r\n      batch(() => {\r\n         dispatch(setProductsData({ ...row, tags: tagIds }));\r\n         dispatch(setProductsVisibility(true));\r\n      });\r\n   };\r\n\r\n   // eslint-disable-next-line react/destructuring-assignment\r\n   const isCashier = props.user?.role === userRoles.CASHIER;\r\n\r\n   const shouldShowSpinner = query.isLoading || deleteMutation.isLoading;\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Products\" motherMenu=\"Manage\" />\r\n\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={shouldShowSpinner}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Products</Card.Title>\r\n                     <ButtonGroup className=\"tw-float-right\">\r\n                        <TableSearch\r\n                           placeholder=\"Search products\"\r\n                           disabled={shouldShowSpinner}\r\n                           changeHandler={setSearch}\r\n                        />\r\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                           Add New Product\r\n                        </Button>\r\n                     </ButtonGroup>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <TableHeadingSorter field=\"name\">Name</TableHeadingSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                       <TableHeadingSorter field=\"price\">Price</TableHeadingSorter>\r\n                                    </th>\r\n                                    <When condition={!isCashier}>\r\n                                       <th>\r\n                                          <strong>Actions</strong>\r\n                                       </th>\r\n                                    </When>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{query.data.pagingCounter + index}</strong>\r\n                                       </td>\r\n                                       <td>\r\n                                          {e.name}{' '}\r\n                                          {e.tags.map((_tag) => (\r\n                                             <Badge key={_tag._id} variant=\"primary\">\r\n                                                {_tag.name}\r\n                                             </Badge>\r\n                                          ))}\r\n                                       </td>\r\n                                       <td>{e.price}</td>\r\n                                       <When condition={!isCashier}>\r\n                                          <td>\r\n                                             <ButtonGroup>\r\n                                                <EditButton onClick={() => handleEdit(e)} />\r\n                                                <DeleteButton onClick={() => handleOnClickDelete(e._id)} />\r\n                                             </ButtonGroup>\r\n                                          </td>\r\n                                       </When>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No products created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={shouldShowSpinner}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ProductGrid);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\products\\queries.js",["959"],"import { api } from 'jsx/helpers';\r\n\r\nexport const GET_PRODUCTS = ({ queryKey: [key, params] }) => api.get('/products', { params }).then((res) => res.data);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\queries.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\employees-grid.js",["960"],"import { useDebounce } from 'ahooks';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Badge, ButtonGroup, Card, Col, Table } from 'react-bootstrap';\r\nimport { AiFillPlusCircle } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport swal from 'sweetalert';\r\nimport { batch, connect, useDispatch } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setEmployeesData, setEmployeesVisibility } from 'store/actions';\r\nimport TableSearch from 'jsx/components/TableSearch';\r\nimport GenericTableHeadingSorter from 'jsx/components/GenericTableHeadingSorter';\r\nimport DeleteButton from 'jsx/components/DeleteButton';\r\nimport EditButton from 'jsx/components/EditButton';\r\nimport { toast } from 'react-toastify';\r\nimport { handleToastError, initialSort } from 'jsx/helpers/misc';\r\nimport { GET_EMPLOYEES } from './queries';\r\nimport { DELETE_ENTITY } from '../../../queries';\r\n\r\nconst EmployeesGrid = (props) => {\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState(initialSort);\r\n\r\n   const [search, setSearch] = useState('');\r\n\r\n   const dispatch = useDispatch();\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['employees', { page, sort, limit, search: debouncedSearchValue }], GET_EMPLOYEES, {\r\n      onSuccess: (data) => {\r\n         if (page > data.totalPages) setPage((prev) => prev - 1);\r\n      },\r\n   });\r\n\r\n   const deleteMutation = useMutation(DELETE_ENTITY('Employee'));\r\n\r\n   const handleOnClickAdd = () => {\r\n      dispatch(setEmployeesVisibility(true));\r\n   };\r\n\r\n   const handleOnClickDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete)\r\n            deleteMutation.mutate(id, {\r\n               onSuccess: async () => {\r\n                  toast.success('Employee deleted successfully');\r\n                  return queryClient.invalidateQueries('employees');\r\n               },\r\n               onError: handleToastError,\r\n            });\r\n      });\r\n   };\r\n\r\n   const handleSort = (field) => {\r\n      setSort((prev) => {\r\n         if (prev.field && prev.order === -1) return initialSort;\r\n         return { field, order: prev.order * -1 };\r\n      });\r\n   };\r\n\r\n   const TableHeadingSorter = useCallback(\r\n      ({ field, children }) => (\r\n         <GenericTableHeadingSorter sort={sort} field={field} onClick={() => handleSort(field)}>\r\n            {children}\r\n         </GenericTableHeadingSorter>\r\n      ),\r\n      [sort]\r\n   );\r\n\r\n   const handleEdit = (row) => {\r\n      batch(() => {\r\n         dispatch(setEmployeesData(row));\r\n         dispatch(setEmployeesVisibility(true));\r\n      });\r\n   };\r\n\r\n   // eslint-disable-next-line react/destructuring-assignment\r\n   const isCashier = props.user?.role === userRoles.CASHIER;\r\n\r\n   const shouldShowSpinner = query.isLoading || deleteMutation.isLoading;\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Employees\" motherMenu=\"Manage\" />\r\n\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={shouldShowSpinner}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Employees</Card.Title>\r\n                     <ButtonGroup className=\"tw-float-right\">\r\n                        <TableSearch\r\n                           placeholder=\"Search employee name\"\r\n                           disabled={shouldShowSpinner}\r\n                           changeHandler={setSearch}\r\n                        />\r\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                           Add New Employee\r\n                        </Button>\r\n                     </ButtonGroup>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>#</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <TableHeadingSorter field=\"name\">Name</TableHeadingSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                       <TableHeadingSorter field=\"phone\">Phone</TableHeadingSorter>\r\n                                    </th>\r\n                                    <th>\r\n                                       <TableHeadingSorter field=\"salary\">Salary</TableHeadingSorter>\r\n                                    </th>\r\n                                    <When condition={!isCashier}>\r\n                                       <th>\r\n                                          <strong>Actions</strong>\r\n                                       </th>\r\n                                    </When>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e, index) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{query.data.pagingCounter + index}</strong>\r\n                                       </td>\r\n                                       <td>{e.name}</td>\r\n                                       <td>{e.phone}</td>\r\n                                       <td>{e.salary}</td>\r\n                                       <When condition={!isCashier}>\r\n                                          <td>\r\n                                             <ButtonGroup>\r\n                                                <EditButton onClick={() => handleEdit(e)} />\r\n                                                <DeleteButton onClick={() => handleOnClickDelete(e._id)} />\r\n                                             </ButtonGroup>\r\n                                          </td>\r\n                                       </When>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No employees added</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={shouldShowSpinner}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(EmployeesGrid);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\queries.js",["961"],"import { api } from 'jsx/helpers';\r\n\r\nexport const GET_EMPLOYEES = ({ queryKey: [key, params] }) => api.get('/employees', { params }).then((res) => res.data);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\modals\\index.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\modals\\manage-employee\\index.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\modals\\manage-employee\\manage-employee.modal.js",["962","963","964","965","966","967","968"],"import ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport React, { useEffect, useRef, useMemo } from 'react';\r\nimport { batch, useDispatch, useSelector } from 'react-redux';\r\nimport CreatableSelect from 'jsx/components/CreatableSelect';\r\nimport { api, getV2, post, useAlert, useQuery } from 'jsx/helpers';\r\nimport { setEmployeesData, setEmployeesVisibility, setProductsData, setProductsVisibility } from 'store/actions';\r\nimport { Formik } from 'formik';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { When } from 'react-if';\r\nimport { handleFormError } from 'jsx/helpers/misc';\r\nimport { toast } from 'react-toastify';\r\nimport ManageProductForm from './manage-employee-form';\r\nimport { employeeSchema } from '../../validations';\r\n\r\nconst ManageEmployeeModal = () => {\r\n   const state = useSelector((s) => s.employees);\r\n   const dispatch = useDispatch();\r\n\r\n   const nameInputRef = useRef();\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const editingProductId = state.data._id;\r\n   const isEditing = !!editingProductId;\r\n\r\n   const createMutation = useMutation((payload) => post('/employees', payload));\r\n   const editMutation = useMutation((payload) => api.patch(`/employees/id/${editingProductId}`, payload));\r\n\r\n   const mutation = useMemo(\r\n      () => (isEditing ? editMutation : createMutation),\r\n      [createMutation, editMutation, isEditing]\r\n   );\r\n\r\n   const handleSubmit = (values, { resetForm, setErrors }) => {\r\n      mutation.mutate(values, {\r\n         onSuccess: async () => {\r\n            dispatch(setEmployeesVisibility(false));\r\n            dispatch(setEmployeesData({}));\r\n            toast.success(`Employee has been ${isEditing ? 'edited' : 'created'} successfully`);\r\n            return queryClient.invalidateQueries('employees').then(resetForm);\r\n         },\r\n         onError: handleFormError(setErrors),\r\n      });\r\n   };\r\n\r\n   const handleShow = () => {\r\n      nameInputRef.current.focus();\r\n   };\r\n\r\n   const shouldShowSpinner = mutation.isLoading;\r\n\r\n   return (\r\n      <Formik\r\n         enableReinitialize\r\n         validateOnBlur={false}\r\n         validateOnChange={false}\r\n         validateOnMount={false}\r\n         validationSchema={employeeSchema}\r\n         onSubmit={handleSubmit}\r\n         initialValues={{\r\n            name: state.data.name ?? '',\r\n            mobile: state.data.mobile ?? '',\r\n            salary: state.data.salary ?? null,\r\n         }}\r\n      >\r\n         {({ resetForm }) => {\r\n            const handleHide = () => {\r\n               resetForm();\r\n               batch(() => {\r\n                  dispatch(setEmployeesData({}));\r\n                  dispatch(setEmployeesVisibility(false));\r\n               });\r\n            };\r\n\r\n            return (\r\n               <ModalWrapper\r\n                  show={state.visible}\r\n                  title={isEditing ? 'Edit Employee' : 'Add New Employee'}\r\n                  isLoading={shouldShowSpinner}\r\n                  onShow={handleShow}\r\n                  onHide={handleHide}\r\n                  includeFormikForm\r\n               >\r\n                  <When condition={shouldShowSpinner}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <ManageProductForm ref={nameInputRef} />\r\n               </ModalWrapper>\r\n            );\r\n         }}\r\n      </Formik>\r\n   );\r\n};\r\n\r\nexport default ManageEmployeeModal;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\modals\\manage-employee\\manage-employee-form.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\employees\\validations.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\add-sale\\index.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\add-sale\\add-sale.js",["969","970","971","972","973"],"/* eslint-disable react/no-this-in-sfc */\r\nimport Button from 'jsx/components/Button';\r\nimport ModalWrapper from 'jsx/components/ModalWrapper';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { post, useAlert, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport React, { useRef, useState } from 'react';\r\nimport { ButtonGroup, Card } from 'react-bootstrap';\r\nimport { AiFillCaretLeft, AiFillSave } from 'react-icons/ai';\r\nimport { When } from 'react-if';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Form, Formik } from 'formik';\r\nimport { toast } from 'react-toastify';\r\nimport { handleFormError, handleToastError } from 'jsx/helpers/misc';\r\nimport { useQueryClient } from 'react-query';\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport CartGrid from './cart-grid';\r\nimport SaleInfo from './sale-info';\r\nimport { createSaleSchema } from '../validations';\r\nimport Receipt from './receipt';\r\n\r\nconst AddSale = () => {\r\n   const history = useHistory();\r\n   const componentToPrintRef = useRef();\r\n   const [generatedSaleId, setGeneratedSaleId] = useState(null);\r\n\r\n   const handlePrint = useReactToPrint({\r\n      content: () => componentToPrintRef.current,\r\n      onAfterPrint: () => {\r\n         toast.success('Sale has been made successfully');\r\n         localStorage.removeItem('cartProducts');\r\n         history.push('/sale');\r\n      },\r\n   });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const mutation = useMutation((payload) => post('/sales', payload));\r\n\r\n   const handleSubmit = (values, { setErrors }) => {\r\n      if (!values.discount) values.discount = 0;\r\n      mutation.mutate(values, {\r\n         onSuccess: (generatedSale) => {\r\n            setGeneratedSaleId(generatedSale.saleId);\r\n            handlePrint();\r\n            return queryClient.invalidateQueries('sales');\r\n         },\r\n         onError: handleFormError(setErrors),\r\n      });\r\n   };\r\n\r\n   const shouldShowSpinner = mutation.isLoading;\r\n\r\n   return (\r\n      <>\r\n         <When condition={shouldShowSpinner}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <PageTItle activeMenu=\"Add New Sale\" motherMenu=\"Frosty Bites\" />\r\n         <Formik\r\n            validationSchema={createSaleSchema}\r\n            initialValues={{ discount: 0, products: [], saleType: 'Dine-in' }}\r\n            onSubmit={handleSubmit}\r\n         >\r\n            <Form>\r\n               <Card>\r\n                  <Card.Header>\r\n                     <Card.Title>Add New Sale</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <SaleInfo />\r\n                  </Card.Body>\r\n                  <Card.Footer>\r\n                     <ButtonGroup>\r\n                        <Button\r\n                           icon={AiFillCaretLeft}\r\n                           variant=\"warning light\"\r\n                           onClick={() => history.push('/sale')}\r\n                           loading={shouldShowSpinner}\r\n                        >\r\n                           Back\r\n                        </Button>\r\n                        <Button icon={AiFillSave} variant=\"primary\" type=\"submit\" loading={shouldShowSpinner}>\r\n                           Save\r\n                        </Button>\r\n                     </ButtonGroup>\r\n                  </Card.Footer>\r\n               </Card>\r\n\r\n               <Card>\r\n                  <Card.Header>\r\n                     <Card.Title>Cart</Card.Title>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <CartGrid generatedSaleId={generatedSaleId} ref={componentToPrintRef} />\r\n                  </Card.Body>\r\n               </Card>\r\n            </Form>\r\n         </Formik>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default AddSale;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\add-sale\\cart-grid.js",["974","975"],"import { useFormikContext } from 'formik';\r\nimport Button from 'jsx/components/Button';\r\nimport { useQuery } from 'jsx/helpers';\r\nimport React, { forwardRef, useEffect, useMemo, useState } from 'react';\r\nimport { ButtonGroup, Table } from 'react-bootstrap';\r\nimport { When } from 'react-if';\r\nimport _cloneDeep from 'lodash/cloneDeep';\r\nimport { currencyFormatter } from 'jsx/helpers/misc';\r\nimport { GET_ALL_PRODUCTS } from '../queries';\r\nimport Receipt from './receipt';\r\n\r\nconst ResultRow = ({ subtotal, isDelivery, deliveryCharges, discountPercentage, absoluteDiscount, total }) => {\r\n   const getDiscount = () => {\r\n      if (!discountPercentage) return 'NONE';\r\n      if (discountPercentage >= 100) return 'FULL';\r\n      return `${discountPercentage}% - ${currencyFormatter.format(absoluteDiscount)}`;\r\n   };\r\n   const getTotal = () => {\r\n      if (discountPercentage >= 100) return 'FREE';\r\n      return currencyFormatter.format(total);\r\n   };\r\n   const getDeliveryCharges = () => {\r\n      if (!deliveryCharges) return 'NONE';\r\n      return currencyFormatter.format(deliveryCharges);\r\n   };\r\n   return (\r\n      <>\r\n         <tr>\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td>\r\n               <strong>SUBTOTAL</strong>\r\n            </td>\r\n            <td>\r\n               <strong>{currencyFormatter.format(subtotal)}</strong>\r\n            </td>\r\n            <td />\r\n         </tr>\r\n         <tr>\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td>\r\n               <strong>DISCOUNT</strong>\r\n            </td>\r\n            <td>\r\n               <strong>{getDiscount()}</strong>\r\n            </td>\r\n            <td />\r\n         </tr>\r\n         {isDelivery && (\r\n            <tr>\r\n               <td />\r\n               <td />\r\n               <td />\r\n               <td>\r\n                  <strong>DELIVERY CHARGES</strong>\r\n               </td>\r\n               <td>\r\n                  <strong>{getDeliveryCharges()}</strong>\r\n               </td>\r\n               <td />\r\n            </tr>\r\n         )}\r\n         <tr>\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td>\r\n               <strong>TOTAL</strong>\r\n            </td>\r\n            <td>\r\n               <strong>{getTotal()}</strong>\r\n            </td>\r\n            <td />\r\n         </tr>\r\n      </>\r\n   );\r\n};\r\n\r\nconst _CartGrid = ({ generatedSaleId }, ref) => {\r\n   const { values, setFieldValue } = useFormikContext();\r\n\r\n   const products = useQuery('ALL-PRODUCTS', GET_ALL_PRODUCTS);\r\n\r\n   const selectedProducts = useMemo(() => {\r\n      const cartProducts = values.products;\r\n      return cartProducts.map((elm) => {\r\n         const _cartProduct = _cloneDeep(elm);\r\n         const populatedProduct = (products.data?.docs || []).find((_product) => _product._id === _cartProduct._id);\r\n         if (!populatedProduct) return undefined;\r\n\r\n         delete _cartProduct._id;\r\n\r\n         // eslint-disable-next-line no-shadow\r\n         const subtotal = _cartProduct.quantity * populatedProduct.price;\r\n         return { ..._cartProduct, product: populatedProduct, subtotal };\r\n      });\r\n   }, [products.data?.docs, values.products]);\r\n\r\n   const { subtotal, absoluteDiscount, total } = useMemo(() => {\r\n      const subtotals = [0, 0, ...selectedProducts.filter(Boolean).map((_product) => _product.subtotal)];\r\n      // eslint-disable-next-line no-shadow\r\n      const subtotal = subtotals.reduce((a, b) => a + b, 0);\r\n      const discountPercentage = values.discount;\r\n\r\n      const deliveryCharges = values.deliveryCharges || 0;\r\n\r\n      // eslint-disable-next-line no-shadow\r\n      let total = subtotal + deliveryCharges;\r\n      // eslint-disable-next-line no-shadow\r\n      let absoluteDiscount = 0;\r\n      if (discountPercentage) {\r\n         absoluteDiscount = Math.floor(subtotal * (discountPercentage / 100));\r\n         total -= absoluteDiscount;\r\n      }\r\n      return { subtotal, absoluteDiscount, total: Math.floor(total) };\r\n   }, [selectedProducts, values.deliveryCharges, values.discount]);\r\n\r\n   const draftAndSave = (productId, callback) => {\r\n      const _cartProducts = _cloneDeep(values.products);\r\n      const productIndex = _cartProducts.findIndex((_product) => _product._id === productId);\r\n      if (productIndex === -1) return;\r\n      callback(_cartProducts, { productIndex });\r\n\r\n      localStorage.setItem('cartProducts', JSON.stringify(_cartProducts));\r\n      setFieldValue('products', _cartProducts);\r\n   };\r\n\r\n   const deleteProduct = (_products, index) => _products.splice(index, 1);\r\n\r\n   const handleDecrement = (productId) => {\r\n      draftAndSave(productId, (_cartProducts, { productIndex }) => {\r\n         const product = _cartProducts[productIndex];\r\n         if (product.quantity <= 1) return deleteProduct(_cartProducts, productIndex);\r\n         product.quantity--;\r\n      });\r\n   };\r\n\r\n   const handleIncrement = (productId) => {\r\n      draftAndSave(productId, (_cartProducts, { productIndex }) => {\r\n         const product = _cartProducts[productIndex];\r\n         product.quantity++;\r\n      });\r\n   };\r\n\r\n   const handleDiscard = (productId) => {\r\n      draftAndSave(productId, (_cartProducts, { productIndex }) => deleteProduct(_cartProducts, productIndex));\r\n   };\r\n\r\n   useEffect(() => {\r\n      const existingCartProducts = JSON.parse(localStorage.getItem('cartProducts') || '[]');\r\n      if (existingCartProducts.length > 0) setFieldValue('products', existingCartProducts);\r\n   }, []);\r\n\r\n   const isCartEmpty = selectedProducts.filter(Boolean).length <= 0;\r\n\r\n   return (\r\n      <>\r\n         <Table className=\"tw-relative\" responsive>\r\n            <thead>\r\n               <tr>\r\n                  <th className=\"width80\">\r\n                     <strong>#</strong>\r\n                  </th>\r\n                  <th>Product</th>\r\n                  <th>Price</th>\r\n                  <th>Quantity</th>\r\n                  <th>Subtotal</th>\r\n                  <th>\r\n                     <strong>Actions</strong>\r\n                  </th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               {(selectedProducts || []).filter(Boolean).map((e, index) => (\r\n                  <tr key={`selected-product-${e.product._id}`}>\r\n                     <td>\r\n                        <strong>{index + 1}</strong>\r\n                     </td>\r\n                     <td>{e.product.name}</td>\r\n                     <td>{currencyFormatter.format(e.product.price)}</td>\r\n                     <td>{e.quantity}</td>\r\n                     <td>{currencyFormatter.format(e.subtotal)}</td>\r\n                     <td>\r\n                        <div className=\"tw-flex tw-gap-3\">\r\n                           <ButtonGroup>\r\n                              <Button size=\"sm\" variant=\"light\" onClick={() => handleDecrement(e.product._id)}>\r\n                                 -\r\n                              </Button>\r\n                              <Button size=\"sm\" variant=\"light\" onClick={() => handleIncrement(e.product._id)}>\r\n                                 +\r\n                              </Button>\r\n                           </ButtonGroup>\r\n                           <Button size=\"sm\" variant=\"danger\" onClick={() => handleDiscard(e.product._id)}>\r\n                              Discard\r\n                           </Button>\r\n                        </div>\r\n                     </td>\r\n                  </tr>\r\n               ))}\r\n               <When condition={!isCartEmpty}>\r\n                  <ResultRow\r\n                     subtotal={subtotal}\r\n                     discountPercentage={values.discount}\r\n                     absoluteDiscount={absoluteDiscount}\r\n                     isDelivery={values.saleType === 'Delivery'}\r\n                     deliveryCharges={values.deliveryCharges}\r\n                     total={total}\r\n                  />\r\n               </When>\r\n            </tbody>\r\n         </Table>\r\n         <When condition={isCartEmpty}>\r\n            <p className=\"tw-m-0\">Cart is empty</p>\r\n         </When>\r\n         <Receipt\r\n            saleId={generatedSaleId}\r\n            saleType={values.saleType}\r\n            subtotal={subtotal}\r\n            discountPercentage={values.discount}\r\n            absoluteDiscount={absoluteDiscount}\r\n            deliveryCharges={values.deliveryCharges}\r\n            total={total}\r\n            products={(selectedProducts || []).filter(Boolean)}\r\n            ref={ref}\r\n         />\r\n      </>\r\n   );\r\n};\r\n\r\nconst CartGrid = forwardRef(_CartGrid);\r\n\r\nexport default CartGrid;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\add-sale\\sale-info.js",["976","977","978","979"],"import FormField from 'jsx/components/FormField';\r\nimport React, { useEffect } from 'react';\r\nimport { defaultSelectStyles } from 'jsx/components/Select';\r\nimport Select from 'react-select';\r\n\r\nimport { api, useQuery } from 'jsx/helpers';\r\nimport { useFormikContext } from 'formik';\r\nimport _cloneDeep from 'lodash/cloneDeep';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { GET_ALL_PRODUCTS } from '../queries';\r\nimport { createSelectProductOption } from '../utils';\r\n\r\nconst selectTypeOptions = ['Dine-in', 'Takeaway', 'Delivery'].map((_type) => ({ label: _type, value: _type }));\r\n\r\nconst SaleInfo = () => {\r\n   const products = useQuery('ALL-PRODUCTS', GET_ALL_PRODUCTS);\r\n   const { values, setFieldValue } = useFormikContext();\r\n   const selectedProducts = values.products;\r\n\r\n   useEffect(() => {\r\n      if (values.discount > 100) setFieldValue('discount', 100);\r\n   }, [values.discount]);\r\n\r\n   const handleSelectProduct = (product) => {\r\n      const productId = product._id;\r\n\r\n      const _selectedProducts = _cloneDeep(selectedProducts);\r\n\r\n      const existingProductIndexInCart = _selectedProducts.findIndex((_product) => _product._id === productId);\r\n      if (existingProductIndexInCart !== -1) _selectedProducts[existingProductIndexInCart].quantity++;\r\n      else _selectedProducts.push({ _id: productId, quantity: 1 });\r\n\r\n      localStorage.setItem('cartProducts', JSON.stringify(_selectedProducts));\r\n      setFieldValue('products', _selectedProducts);\r\n   };\r\n\r\n   const handleSelectSaleType = (opt) => {\r\n      const _isDelivery = opt.value === 'Delivery';\r\n      if (_isDelivery) setFieldValue('deliveryCharges', 100);\r\n      else if (values.deliveryCharges) setFieldValue('deliveryCharges', undefined);\r\n      setFieldValue('saleType', opt.value);\r\n   };\r\n\r\n   const isDelivery = values.saleType === 'Delivery';\r\n\r\n   return (\r\n      <>\r\n         <Row>\r\n            <FormField column={6} name=\"saleType\" label=\"Type\">\r\n               {() => (\r\n                  <Select\r\n                     styles={defaultSelectStyles}\r\n                     value={selectTypeOptions.find((opt) => opt.value === values.saleType)}\r\n                     onChange={handleSelectSaleType}\r\n                     options={selectTypeOptions}\r\n                  />\r\n               )}\r\n            </FormField>\r\n            {isDelivery && (\r\n               <FormField type=\"number\" column={6} name=\"deliveryCharges\" label=\"Delivery Charges\" isRequired />\r\n            )}\r\n         </Row>\r\n         <Row>\r\n            <FormField column={6} name=\"products\" label=\"Search Products\" isRequired>\r\n               {() => (\r\n                  <Select\r\n                     styles={defaultSelectStyles}\r\n                     value={null}\r\n                     onChange={handleSelectProduct}\r\n                     options={products.data?.docs || []}\r\n                     getOptionLabel={(_product) => _product.name}\r\n                     getOptionValue={(_product) => _product._id}\r\n                  />\r\n               )}\r\n            </FormField>\r\n            <FormField type=\"number\" min={0} max={100} column={6} name=\"discount\" label=\"Discount\" isRequired />\r\n         </Row>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default SaleInfo;\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\queries.js",["980"],"import { api } from 'jsx/helpers';\r\n\r\nexport const GET_ALL_PRODUCTS = () =>\r\n   api.get('/products', { params: { page: 1, limit: 10000, sort: { _id: -1 }, search: '' } }).then((res) => res.data);\r\n\r\nexport const GET_SALE = ({ queryKey: [key, params] }) => api.get('/sales', { params }).then((res) => res.data);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\utils.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\validations.js",[],"C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\sale-grid.js",["981","982","983","984","985","986","987","988","989","990","991"],"import { useDebounce } from 'ahooks';\r\nimport Button from 'jsx/components/Button';\r\nimport Pagination from 'jsx/components/Pagination';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { api, del, useMutation, useQuery } from 'jsx/helpers';\r\nimport PageTItle from 'jsx/layouts/PageTitle';\r\nimport _ from 'lodash';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { Badge, ButtonGroup, Card, Col, Table } from 'react-bootstrap';\r\nimport { AiFillPlusCircle } from 'react-icons/ai';\r\nimport { Else, If, Then, When } from 'react-if';\r\nimport { useQueryClient } from 'react-query';\r\nimport swal from 'sweetalert';\r\nimport { batch, connect, useDispatch } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setProductsData, setProductsVisibility } from 'store/actions';\r\nimport TableSearch from 'jsx/components/TableSearch';\r\nimport GenericTableHeadingSorter from 'jsx/components/GenericTableHeadingSorter';\r\nimport DeleteButton from 'jsx/components/DeleteButton';\r\nimport EditButton from 'jsx/components/EditButton';\r\nimport { toast } from 'react-toastify';\r\nimport { currencyFormatter, handleToastError, initialSort } from 'jsx/helpers/misc';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { DELETE_ENTITY } from '../../../queries';\r\nimport { GET_SALE } from './queries';\r\n\r\nconst SaleGrid = ({ startDate, endDate, ...props }) => {\r\n   const [page, setPage] = useState(1);\r\n   const [limit, setLimit] = useState(5);\r\n   const [sort, setSort] = useState(initialSort);\r\n\r\n   const [search, setSearch] = useState('');\r\n\r\n   const dispatch = useDispatch();\r\n   const history = useHistory();\r\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\r\n\r\n   const queryClient = useQueryClient();\r\n\r\n   const query = useQuery(['sale', { page, sort, limit, search: debouncedSearchValue, startDate, endDate }], GET_SALE, {\r\n      onSuccess: (data) => {\r\n         if (page > data.totalPages) setPage((prev) => prev - 1);\r\n      },\r\n   });\r\n\r\n   const deleteMutation = useMutation(DELETE_ENTITY('Sale'));\r\n\r\n   const handleDelete = (id) => {\r\n      swal({\r\n         title: 'Are you sure?',\r\n         text: 'Once deleted, you will not be able to recover it!',\r\n         icon: 'warning',\r\n         buttons: true,\r\n         dangerMode: true,\r\n      }).then((willDelete) => {\r\n         if (willDelete)\r\n            deleteMutation.mutate(id, {\r\n               onSuccess: async () => {\r\n                  toast.success('Sale deleted successfully');\r\n                  return queryClient.invalidateQueries('sale');\r\n               },\r\n               onError: handleToastError,\r\n            });\r\n      });\r\n   };\r\n\r\n   const handleOnClickAdd = () => history.push('/sale/add');\r\n\r\n   // eslint-disable-next-line react/destructuring-assignment\r\n   const isCashier = props.user?.role === userRoles.CASHIER;\r\n\r\n   const shouldShowSpinner = query.isLoading || deleteMutation.isLoading;\r\n\r\n   return (\r\n      <>\r\n         <PageTItle activeMenu=\"Products\" motherMenu=\"Manage\" />\r\n\r\n         <div className=\"row\">\r\n            <Col lg={12}>\r\n               <Card>\r\n                  <When condition={shouldShowSpinner}>\r\n                     <SpinnerOverlay />\r\n                  </When>\r\n                  <Card.Header>\r\n                     <Card.Title>Manage Sale</Card.Title>\r\n                     <ButtonGroup className=\"tw-float-right\">\r\n                        <TableSearch\r\n                           placeholder=\"Search by Sale ID\"\r\n                           disabled={shouldShowSpinner}\r\n                           changeHandler={setSearch}\r\n                        />\r\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\r\n                           Add New Sale\r\n                        </Button>\r\n                     </ButtonGroup>\r\n                  </Card.Header>\r\n                  <Card.Body>\r\n                     <If condition={query.data?.totalDocs > 0}>\r\n                        <Then>\r\n                           <Table className=\"tw-relative\" responsive>\r\n                              <thead>\r\n                                 <tr>\r\n                                    <th className=\"width80\">\r\n                                       <strong>ID</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong>Products</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong>Subtotal</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong>Discount</strong>\r\n                                    </th>\r\n                                    <th>\r\n                                       <strong>Total</strong>\r\n                                    </th>\r\n                                    <When condition={!isCashier}>\r\n                                       <th>\r\n                                          <strong>Actions</strong>\r\n                                       </th>\r\n                                    </When>\r\n                                 </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                 {query.data?.docs.map((e) => (\r\n                                    <tr key={`${e._id}`}>\r\n                                       <td>\r\n                                          <strong>{e.saleId}</strong>\r\n                                       </td>\r\n                                       <td>\r\n                                          {e.products.map((_cartRow, i, _array) => {\r\n                                             const isLastIteration = i >= _array.length - 1;\r\n                                             return (\r\n                                                <>\r\n                                                   <div key={`${e._id}-product-${i}`}>\r\n                                                      <span>{`${_cartRow.product.name}`}</span>\r\n                                                      <br />\r\n                                                      <span>{`${_cartRow.quantity}x ${currencyFormatter.format(\r\n                                                         _cartRow.product.price\r\n                                                      )} = `}</span>\r\n                                                      <strong>{currencyFormatter.format(_cartRow.subtotal)}</strong>\r\n                                                   </div>\r\n                                                   {!isLastIteration && <br />}\r\n                                                </>\r\n                                             );\r\n                                          })}\r\n                                          {e.saleType === 'Delivery' && e.deliveryCharges > 0 && (\r\n                                             <div className=\"text-primary\">\r\n                                                <br />\r\n                                                <span>\r\n                                                   Delivery charges ={' '}\r\n                                                   <b>{currencyFormatter.format(e.deliveryCharges)}</b>\r\n                                                </span>\r\n                                             </div>\r\n                                          )}\r\n                                       </td>\r\n                                       <td>\r\n                                          {(e.saleType === 'Delivery' || e.discount > 0) &&\r\n                                             currencyFormatter.format(e.subtotal)}\r\n                                       </td>\r\n                                       <td>{e.discount > 0 && `${e.discount}%`}</td>\r\n                                       <td>{e.total > 0 && currencyFormatter.format(e.total)}</td>\r\n                                       <When condition={!isCashier}>\r\n                                          <td>\r\n                                             <DeleteButton onClick={() => handleDelete(e._id)} />\r\n                                          </td>\r\n                                       </When>\r\n                                    </tr>\r\n                                 ))}\r\n                              </tbody>\r\n                           </Table>\r\n                        </Then>\r\n                        <Else>\r\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No products created</p>\r\n                           </When>\r\n                           <When condition={!query.isLoading && debouncedSearchValue}>\r\n                              <p className=\"tw-m-0\">No result found!</p>\r\n                           </When>\r\n                        </Else>\r\n                     </If>\r\n                  </Card.Body>\r\n               </Card>\r\n            </Col>\r\n         </div>\r\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\r\n            <Pagination\r\n               page={page}\r\n               onPageChange={setPage}\r\n               onLimitChange={setLimit}\r\n               {..._.omit(query.data, ['docs'])}\r\n               isLimitDisabled={shouldShowSpinner}\r\n            />\r\n         </When>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n   user: auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(SaleGrid);\r\n","C:\\Users\\Muneeb\\dev\\diamond-tiles-frontend\\src\\jsx\\pages\\sale\\add-sale\\receipt.js",[],{"ruleId":"992","replacedBy":"993"},{"ruleId":"994","replacedBy":"995"},{"ruleId":"996","replacedBy":"997"},{"ruleId":"998","replacedBy":"999"},{"ruleId":"1000","replacedBy":"1001"},{"ruleId":"1002","severity":1,"message":"1003","line":1,"column":33,"nodeType":"1004","messageId":"1005","endLine":1,"endColumn":40},{"ruleId":"1002","severity":1,"message":"1006","line":24,"column":7,"nodeType":"1004","messageId":"1005","endLine":24,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1007","line":27,"column":7,"nodeType":"1004","messageId":"1005","endLine":27,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1008","line":49,"column":10,"nodeType":"1004","messageId":"1005","endLine":49,"endColumn":19},{"ruleId":"1009","severity":1,"message":"1010","line":49,"column":22,"nodeType":"1011","messageId":"1012","endLine":49,"endColumn":32},{"ruleId":"1002","severity":1,"message":"1013","line":26,"column":21,"nodeType":"1004","messageId":"1005","endLine":26,"endColumn":32},{"ruleId":"1002","severity":1,"message":"1014","line":29,"column":21,"nodeType":"1004","messageId":"1005","endLine":29,"endColumn":32},{"ruleId":"1002","severity":1,"message":"1015","line":33,"column":19,"nodeType":"1004","messageId":"1005","endLine":33,"endColumn":28},{"ruleId":"1016","severity":1,"message":"1017","line":39,"column":7,"nodeType":"1018","endLine":39,"endColumn":22,"suggestions":"1019"},{"ruleId":"1016","severity":1,"message":"1020","line":103,"column":7,"nodeType":"1018","endLine":103,"endColumn":30,"suggestions":"1021"},{"ruleId":"1002","severity":1,"message":"1022","line":319,"column":66,"nodeType":"1004","messageId":"1005","endLine":319,"endColumn":71},{"ruleId":"992","replacedBy":"1023"},{"ruleId":"994","replacedBy":"1024"},{"ruleId":"996","replacedBy":"1025"},{"ruleId":"998","replacedBy":"1026"},{"ruleId":"1000","replacedBy":"1027"},{"ruleId":"1002","severity":1,"message":"1028","line":4,"column":8,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1029","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1030","line":5,"column":15,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1031","line":5,"column":38,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":46},{"ruleId":"1002","severity":1,"message":"1032","line":6,"column":8,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":14},{"ruleId":"1016","severity":1,"message":"1033","line":46,"column":7,"nodeType":"1018","endLine":46,"endColumn":22,"suggestions":"1034"},{"ruleId":"1002","severity":1,"message":"1035","line":24,"column":17,"nodeType":"1004","messageId":"1005","endLine":24,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1036","line":25,"column":18,"nodeType":"1004","messageId":"1005","endLine":25,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1037","line":26,"column":17,"nodeType":"1004","messageId":"1005","endLine":26,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1015","line":27,"column":19,"nodeType":"1004","messageId":"1005","endLine":27,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1014","line":30,"column":21,"nodeType":"1004","messageId":"1005","endLine":30,"endColumn":32},{"ruleId":"1002","severity":1,"message":"1028","line":4,"column":8,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1029","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1030","line":5,"column":15,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1031","line":5,"column":45,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":53},{"ruleId":"1002","severity":1,"message":"1032","line":6,"column":8,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":14},{"ruleId":"1016","severity":1,"message":"1038","line":61,"column":7,"nodeType":"1018","endLine":61,"endColumn":22,"suggestions":"1039"},{"ruleId":"1002","severity":1,"message":"1040","line":21,"column":16,"nodeType":"1004","messageId":"1005","endLine":21,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1041","line":1,"column":20,"nodeType":"1004","messageId":"1005","endLine":1,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1042","line":7,"column":10,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":19},{"ruleId":"1016","severity":1,"message":"1043","line":49,"column":7,"nodeType":"1018","endLine":49,"endColumn":9,"suggestions":"1044"},{"ruleId":"1002","severity":1,"message":"1045","line":152,"column":28,"nodeType":"1004","messageId":"1005","endLine":152,"endColumn":32},{"ruleId":"1002","severity":1,"message":"1046","line":3,"column":8,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1014","line":25,"column":21,"nodeType":"1004","messageId":"1005","endLine":25,"endColumn":32},{"ruleId":"1016","severity":1,"message":"1017","line":30,"column":7,"nodeType":"1018","endLine":30,"endColumn":22,"suggestions":"1047"},{"ruleId":"1002","severity":1,"message":"1048","line":36,"column":11,"nodeType":"1004","messageId":"1005","endLine":36,"endColumn":16},{"ruleId":"1016","severity":1,"message":"1020","line":97,"column":7,"nodeType":"1018","endLine":97,"endColumn":30,"suggestions":"1049"},{"ruleId":"1002","severity":1,"message":"1022","line":304,"column":77,"nodeType":"1004","messageId":"1005","endLine":304,"endColumn":82},{"ruleId":"1002","severity":1,"message":"1028","line":4,"column":8,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1029","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1030","line":5,"column":15,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1031","line":5,"column":45,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":53},{"ruleId":"1002","severity":1,"message":"1032","line":6,"column":8,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1050","line":8,"column":4,"nodeType":"1004","messageId":"1005","endLine":8,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1051","line":9,"column":4,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":9},{"ruleId":"1002","severity":1,"message":"1052","line":10,"column":4,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":43},{"ruleId":"1016","severity":1,"message":"1053","line":69,"column":7,"nodeType":"1018","endLine":69,"endColumn":22,"suggestions":"1054"},{"ruleId":"1002","severity":1,"message":"1055","line":3,"column":8,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1056","line":7,"column":37,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":43},{"ruleId":"1002","severity":1,"message":"1057","line":8,"column":29,"nodeType":"1004","messageId":"1005","endLine":8,"endColumn":34},{"ruleId":"1002","severity":1,"message":"1058","line":10,"column":10,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1059","line":10,"column":25,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":37},{"ruleId":"1002","severity":1,"message":"1060","line":18,"column":8,"nodeType":"1004","messageId":"1005","endLine":18,"endColumn":19},{"ruleId":"1061","severity":1,"message":"1062","line":38,"column":10,"nodeType":"1011","messageId":"1063","endLine":38,"endColumn":21},{"ruleId":"1061","severity":1,"message":"1062","line":61,"column":16,"nodeType":"1011","messageId":"1063","endLine":61,"endColumn":27},{"ruleId":"1016","severity":1,"message":"1064","line":78,"column":7,"nodeType":"1018","endLine":78,"endColumn":9,"suggestions":"1065"},{"ruleId":"1061","severity":1,"message":"1062","line":81,"column":7,"nodeType":"1011","messageId":"1063","endLine":81,"endColumn":18},{"ruleId":"1016","severity":1,"message":"1066","line":83,"column":7,"nodeType":"1018","endLine":83,"endColumn":19,"suggestions":"1067"},{"ruleId":"1002","severity":1,"message":"1022","line":163,"column":55,"nodeType":"1004","messageId":"1005","endLine":163,"endColumn":60},{"ruleId":"1002","severity":1,"message":"1068","line":16,"column":27,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":36},{"ruleId":"1002","severity":1,"message":"1069","line":30,"column":21,"nodeType":"1004","messageId":"1005","endLine":30,"endColumn":32},{"ruleId":"1002","severity":1,"message":"1070","line":31,"column":22,"nodeType":"1004","messageId":"1005","endLine":31,"endColumn":34},{"ruleId":"1002","severity":1,"message":"1071","line":32,"column":21,"nodeType":"1004","messageId":"1005","endLine":32,"endColumn":32},{"ruleId":"1002","severity":1,"message":"1014","line":37,"column":21,"nodeType":"1004","messageId":"1005","endLine":37,"endColumn":32},{"ruleId":"1016","severity":1,"message":"1017","line":45,"column":7,"nodeType":"1018","endLine":45,"endColumn":22,"suggestions":"1072"},{"ruleId":"1061","severity":1,"message":"1062","line":122,"column":10,"nodeType":"1011","messageId":"1063","endLine":122,"endColumn":21},{"ruleId":"1016","severity":1,"message":"1020","line":150,"column":7,"nodeType":"1018","endLine":150,"endColumn":39,"suggestions":"1073"},{"ruleId":"1002","severity":1,"message":"1056","line":2,"column":37,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":43},{"ruleId":"1002","severity":1,"message":"1029","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1032","line":6,"column":8,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1074","line":9,"column":10,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":21},{"ruleId":"1016","severity":1,"message":"1075","line":87,"column":7,"nodeType":"1018","endLine":87,"endColumn":22,"suggestions":"1076"},{"ruleId":"1002","severity":1,"message":"1029","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1032","line":6,"column":8,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":14},{"ruleId":"1016","severity":1,"message":"1077","line":50,"column":7,"nodeType":"1018","endLine":50,"endColumn":22,"suggestions":"1078"},{"ruleId":"1002","severity":1,"message":"1079","line":14,"column":4,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1080","line":15,"column":4,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1068","line":16,"column":4,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1081","line":17,"column":4,"nodeType":"1004","messageId":"1005","endLine":17,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1036","line":29,"column":18,"nodeType":"1004","messageId":"1005","endLine":29,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1082","line":50,"column":10,"nodeType":"1004","messageId":"1005","endLine":50,"endColumn":27},{"ruleId":"1002","severity":1,"message":"1083","line":54,"column":10,"nodeType":"1004","messageId":"1005","endLine":54,"endColumn":27},{"ruleId":"1002","severity":1,"message":"1084","line":57,"column":10,"nodeType":"1004","messageId":"1005","endLine":57,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1028","line":4,"column":8,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1029","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1030","line":5,"column":15,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1031","line":5,"column":38,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":46},{"ruleId":"1002","severity":1,"message":"1032","line":6,"column":8,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":14},{"ruleId":"1016","severity":1,"message":"1085","line":44,"column":7,"nodeType":"1018","endLine":44,"endColumn":22,"suggestions":"1086"},{"ruleId":"1002","severity":1,"message":"1056","line":2,"column":28,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":34},{"ruleId":"1002","severity":1,"message":"1029","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1032","line":6,"column":8,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1074","line":9,"column":10,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":21},{"ruleId":"1016","severity":1,"message":"1087","line":49,"column":7,"nodeType":"1018","endLine":49,"endColumn":22,"suggestions":"1088"},{"ruleId":"1002","severity":1,"message":"1068","line":9,"column":36,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":45},{"ruleId":"1002","severity":1,"message":"1083","line":58,"column":10,"nodeType":"1004","messageId":"1005","endLine":58,"endColumn":27},{"ruleId":"1002","severity":1,"message":"1068","line":12,"column":36,"nodeType":"1004","messageId":"1005","endLine":12,"endColumn":45},{"ruleId":"1002","severity":1,"message":"1089","line":23,"column":10,"nodeType":"1004","messageId":"1005","endLine":23,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1090","line":3,"column":8,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1046","line":4,"column":8,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1029","line":9,"column":15,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1091","line":13,"column":13,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1092","line":16,"column":34,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":48},{"ruleId":"1002","severity":1,"message":"1093","line":16,"column":50,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":57},{"ruleId":"1002","severity":1,"message":"1094","line":17,"column":8,"nodeType":"1004","messageId":"1005","endLine":17,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1095","line":18,"column":54,"nodeType":"1004","messageId":"1005","endLine":18,"endColumn":77},{"ruleId":"1002","severity":1,"message":"1089","line":28,"column":10,"nodeType":"1004","messageId":"1005","endLine":28,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1096","line":1,"column":17,"nodeType":"1004","messageId":"1005","endLine":1,"endColumn":21},{"ruleId":"1002","severity":1,"message":"1097","line":5,"column":8,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":14},{"ruleId":"1016","severity":1,"message":"1098","line":32,"column":7,"nodeType":"1018","endLine":32,"endColumn":14,"suggestions":"1099"},{"ruleId":"1002","severity":1,"message":"1100","line":61,"column":26,"nodeType":"1004","messageId":"1005","endLine":61,"endColumn":31},{"ruleId":"1002","severity":1,"message":"1080","line":14,"column":24,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":34},{"ruleId":"1002","severity":1,"message":"1068","line":14,"column":36,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":45},{"ruleId":"1002","severity":1,"message":"1101","line":15,"column":10,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1102","line":15,"column":18,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1103","line":15,"column":30,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":38},{"ruleId":"1002","severity":1,"message":"1104","line":22,"column":8,"nodeType":"1004","messageId":"1005","endLine":22,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1084","line":57,"column":10,"nodeType":"1004","messageId":"1005","endLine":57,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1105","line":2,"column":10,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1057","line":2,"column":20,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":25},{"ruleId":"1002","severity":1,"message":"1106","line":2,"column":27,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":38},{"ruleId":"1002","severity":1,"message":"1068","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1107","line":6,"column":10,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1108","line":15,"column":8,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1109","line":16,"column":8,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1029","line":4,"column":15,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1093","line":8,"column":46,"nodeType":"1004","messageId":"1005","endLine":8,"endColumn":53},{"ruleId":"1002","severity":1,"message":"1092","line":8,"column":55,"nodeType":"1004","messageId":"1005","endLine":8,"endColumn":69},{"ruleId":"1002","severity":1,"message":"1068","line":9,"column":36,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":45},{"ruleId":"1002","severity":1,"message":"1081","line":9,"column":47,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":63},{"ruleId":"1002","severity":1,"message":"1095","line":9,"column":65,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":88},{"ruleId":"1002","severity":1,"message":"1101","line":16,"column":10,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1102","line":16,"column":18,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1103","line":16,"column":30,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":38},{"ruleId":"1002","severity":1,"message":"1042","line":19,"column":10,"nodeType":"1004","messageId":"1005","endLine":19,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1110","line":20,"column":8,"nodeType":"1004","messageId":"1005","endLine":20,"endColumn":11},{"ruleId":"1002","severity":1,"message":"1111","line":22,"column":8,"nodeType":"1004","messageId":"1005","endLine":22,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1089","line":26,"column":10,"nodeType":"1004","messageId":"1005","endLine":26,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1037","line":29,"column":17,"nodeType":"1004","messageId":"1005","endLine":29,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1062","line":83,"column":7,"nodeType":"1011","messageId":"1063","endLine":83,"endColumn":18},{"ruleId":"1009","severity":1,"message":"1112","line":158,"column":44,"nodeType":"1011","messageId":"1012","endLine":158,"endColumn":54},{"ruleId":"1002","severity":1,"message":"1068","line":13,"column":36,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":45},{"ruleId":"1002","severity":1,"message":"1083","line":59,"column":10,"nodeType":"1004","messageId":"1005","endLine":59,"endColumn":27},{"ruleId":"1002","severity":1,"message":"1113","line":3,"column":8,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1114","line":5,"column":8,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1115","line":6,"column":8,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1116","line":7,"column":10,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1029","line":7,"column":15,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1117","line":7,"column":20,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1118","line":7,"column":30,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":41},{"ruleId":"1002","severity":1,"message":"1031","line":7,"column":43,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":51},{"ruleId":"1002","severity":1,"message":"1042","line":8,"column":10,"nodeType":"1004","messageId":"1005","endLine":8,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1119","line":9,"column":8,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1120","line":11,"column":8,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":9},{"ruleId":"1002","severity":1,"message":"1091","line":11,"column":13,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1121","line":12,"column":17,"nodeType":"1004","messageId":"1005","endLine":12,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1106","line":13,"column":10,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":21},{"ruleId":"1002","severity":1,"message":"1122","line":13,"column":23,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":27},{"ruleId":"1002","severity":1,"message":"1123","line":13,"column":29,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":32},{"ruleId":"1002","severity":1,"message":"1092","line":13,"column":34,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":48},{"ruleId":"1002","severity":1,"message":"1093","line":13,"column":50,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":57},{"ruleId":"1002","severity":1,"message":"1124","line":13,"column":59,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":62},{"ruleId":"1002","severity":1,"message":"1057","line":13,"column":64,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":69},{"ruleId":"1002","severity":1,"message":"1079","line":14,"column":10,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1080","line":14,"column":24,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":34},{"ruleId":"1002","severity":1,"message":"1068","line":14,"column":36,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":45},{"ruleId":"1002","severity":1,"message":"1095","line":14,"column":65,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":88},{"ruleId":"1002","severity":1,"message":"1101","line":15,"column":10,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1102","line":15,"column":18,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1103","line":15,"column":30,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":38},{"ruleId":"1002","severity":1,"message":"1125","line":16,"column":10,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1126","line":16,"column":16,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1127","line":16,"column":20,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1128","line":16,"column":26,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":30},{"ruleId":"1002","severity":1,"message":"1129","line":17,"column":10,"nodeType":"1004","messageId":"1005","endLine":17,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1130","line":20,"column":8,"nodeType":"1004","messageId":"1005","endLine":20,"endColumn":12},{"ruleId":"1002","severity":1,"message":"1131","line":21,"column":8,"nodeType":"1004","messageId":"1005","endLine":21,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1132","line":23,"column":8,"nodeType":"1004","messageId":"1005","endLine":23,"endColumn":21},{"ruleId":"1002","severity":1,"message":"1133","line":24,"column":8,"nodeType":"1004","messageId":"1005","endLine":24,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1090","line":1,"column":8,"nodeType":"1004","messageId":"1005","endLine":1,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1046","line":2,"column":8,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1113","line":3,"column":8,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1114","line":5,"column":8,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1115","line":6,"column":8,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1116","line":7,"column":10,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1029","line":7,"column":15,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1030","line":7,"column":20,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":25},{"ruleId":"1002","severity":1,"message":"1117","line":7,"column":27,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":35},{"ruleId":"1002","severity":1,"message":"1118","line":7,"column":37,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":48},{"ruleId":"1002","severity":1,"message":"1031","line":7,"column":50,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":58},{"ruleId":"1002","severity":1,"message":"1042","line":8,"column":10,"nodeType":"1004","messageId":"1005","endLine":8,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1131","line":9,"column":8,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1120","line":11,"column":8,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":9},{"ruleId":"1002","severity":1,"message":"1091","line":11,"column":13,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1121","line":12,"column":17,"nodeType":"1004","messageId":"1005","endLine":12,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1106","line":13,"column":10,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":21},{"ruleId":"1002","severity":1,"message":"1122","line":13,"column":23,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":27},{"ruleId":"1002","severity":1,"message":"1092","line":13,"column":34,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":48},{"ruleId":"1002","severity":1,"message":"1093","line":13,"column":50,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":57},{"ruleId":"1002","severity":1,"message":"1124","line":13,"column":59,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":62},{"ruleId":"1002","severity":1,"message":"1057","line":13,"column":64,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":69},{"ruleId":"1002","severity":1,"message":"1079","line":15,"column":10,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1080","line":15,"column":24,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":34},{"ruleId":"1002","severity":1,"message":"1068","line":15,"column":36,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":45},{"ruleId":"1002","severity":1,"message":"1095","line":15,"column":65,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":88},{"ruleId":"1002","severity":1,"message":"1101","line":16,"column":10,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1102","line":16,"column":18,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1103","line":16,"column":30,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":38},{"ruleId":"1002","severity":1,"message":"1125","line":17,"column":10,"nodeType":"1004","messageId":"1005","endLine":17,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1126","line":17,"column":16,"nodeType":"1004","messageId":"1005","endLine":17,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1127","line":17,"column":20,"nodeType":"1004","messageId":"1005","endLine":17,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1128","line":17,"column":26,"nodeType":"1004","messageId":"1005","endLine":17,"endColumn":30},{"ruleId":"1002","severity":1,"message":"1129","line":18,"column":10,"nodeType":"1004","messageId":"1005","endLine":18,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1130","line":21,"column":8,"nodeType":"1004","messageId":"1005","endLine":21,"endColumn":12},{"ruleId":"1002","severity":1,"message":"1111","line":22,"column":8,"nodeType":"1004","messageId":"1005","endLine":22,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1134","line":23,"column":8,"nodeType":"1004","messageId":"1005","endLine":23,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1109","line":24,"column":8,"nodeType":"1004","messageId":"1005","endLine":24,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1135","line":27,"column":15,"nodeType":"1004","messageId":"1005","endLine":27,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1136","line":4,"column":10,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1137","line":5,"column":8,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1042","line":9,"column":10,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1106","line":13,"column":10,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":21},{"ruleId":"1002","severity":1,"message":"1079","line":15,"column":4,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1080","line":16,"column":4,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1068","line":17,"column":4,"nodeType":"1004","messageId":"1005","endLine":17,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1081","line":18,"column":4,"nodeType":"1004","messageId":"1005","endLine":18,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1138","line":19,"column":4,"nodeType":"1004","messageId":"1005","endLine":19,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1135","line":28,"column":17,"nodeType":"1004","messageId":"1005","endLine":28,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1089","line":30,"column":10,"nodeType":"1004","messageId":"1005","endLine":30,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1015","line":34,"column":19,"nodeType":"1004","messageId":"1005","endLine":34,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1139","line":38,"column":10,"nodeType":"1004","messageId":"1005","endLine":38,"endColumn":21},{"ruleId":"1002","severity":1,"message":"1022","line":170,"column":62,"nodeType":"1004","messageId":"1005","endLine":170,"endColumn":67},{"ruleId":"1002","severity":1,"message":"1100","line":14,"column":31,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":36},{"ruleId":"1002","severity":1,"message":"1100","line":18,"column":21,"nodeType":"1004","messageId":"1005","endLine":18,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1140","line":1,"column":16,"nodeType":"1004","messageId":"1005","endLine":1,"endColumn":32},{"ruleId":"1061","severity":1,"message":"1062","line":31,"column":7,"nodeType":"1011","messageId":"1063","endLine":31,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1100","line":35,"column":31,"nodeType":"1004","messageId":"1005","endLine":35,"endColumn":36},{"ruleId":"1002","severity":1,"message":"1100","line":40,"column":21,"nodeType":"1004","messageId":"1005","endLine":40,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1141","line":46,"column":7,"nodeType":"1004","messageId":"1005","endLine":46,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1142","line":73,"column":4,"nodeType":"1004","messageId":"1005","endLine":73,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1032","line":3,"column":8,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1115","line":4,"column":8,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1029","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1091","line":6,"column":13,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1143","line":8,"column":15,"nodeType":"1004","messageId":"1005","endLine":8,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1128","line":9,"column":10,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1144","line":11,"column":10,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":20},{"ruleId":"1061","severity":1,"message":"1062","line":94,"column":10,"nodeType":"1011","messageId":"1063","endLine":94,"endColumn":21},{"ruleId":"1016","severity":1,"message":"1145","line":97,"column":7,"nodeType":"1018","endLine":97,"endColumn":23,"suggestions":"1146"},{"ruleId":"1002","severity":1,"message":"1046","line":2,"column":8,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1113","line":3,"column":8,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1029","line":7,"column":15,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1147","line":10,"column":8,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1091","line":11,"column":13,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1068","line":14,"column":36,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":45},{"ruleId":"1002","severity":1,"message":"1081","line":14,"column":47,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":63},{"ruleId":"1002","severity":1,"message":"1101","line":15,"column":10,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1102","line":15,"column":18,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1103","line":15,"column":30,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":38},{"ruleId":"1002","severity":1,"message":"1113","line":3,"column":8,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1029","line":7,"column":15,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1147","line":10,"column":8,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1091","line":11,"column":13,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1123","line":13,"column":29,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":32},{"ruleId":"1002","severity":1,"message":"1124","line":13,"column":59,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":62},{"ruleId":"1002","severity":1,"message":"1094","line":14,"column":8,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1068","line":15,"column":36,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":45},{"ruleId":"1002","severity":1,"message":"1081","line":15,"column":47,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":63},{"ruleId":"1002","severity":1,"message":"1101","line":16,"column":10,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1102","line":16,"column":18,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1103","line":16,"column":30,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":38},{"ruleId":"1002","severity":1,"message":"1107","line":19,"column":10,"nodeType":"1004","messageId":"1005","endLine":19,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1022","line":134,"column":54,"nodeType":"1004","messageId":"1005","endLine":134,"endColumn":59},{"ruleId":"1002","severity":1,"message":"1032","line":2,"column":8,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1091","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1144","line":10,"column":10,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1148","line":12,"column":7,"nodeType":"1004","messageId":"1005","endLine":12,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1149","line":19,"column":20,"nodeType":"1004","messageId":"1005","endLine":19,"endColumn":30},{"ruleId":"1061","severity":1,"message":"1062","line":34,"column":7,"nodeType":"1011","messageId":"1063","endLine":34,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1062","line":35,"column":7,"nodeType":"1011","messageId":"1063","endLine":35,"endColumn":18},{"ruleId":"1016","severity":1,"message":"1150","line":59,"column":7,"nodeType":"1018","endLine":59,"endColumn":19,"suggestions":"1151"},{"ruleId":"1002","severity":1,"message":"1032","line":2,"column":8,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1029","line":4,"column":10,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1152","line":4,"column":21,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1031","line":4,"column":36,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":44},{"ruleId":"1002","severity":1,"message":"1091","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1032","line":2,"column":8,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1029","line":4,"column":10,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1152","line":4,"column":21,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1031","line":4,"column":36,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":44},{"ruleId":"1002","severity":1,"message":"1091","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1101","line":11,"column":10,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1102","line":11,"column":18,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1103","line":11,"column":30,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":38},{"ruleId":"1061","severity":1,"message":"1062","line":44,"column":10,"nodeType":"1011","messageId":"1063","endLine":44,"endColumn":21},{"ruleId":"1061","severity":1,"message":"1062","line":46,"column":10,"nodeType":"1011","messageId":"1063","endLine":46,"endColumn":21},{"ruleId":"1002","severity":1,"message":"1035","line":20,"column":17,"nodeType":"1004","messageId":"1005","endLine":20,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1036","line":21,"column":18,"nodeType":"1004","messageId":"1005","endLine":21,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1055","line":5,"column":8,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1147","line":8,"column":8,"nodeType":"1004","messageId":"1005","endLine":8,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1121","line":9,"column":17,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1106","line":10,"column":10,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":21},{"ruleId":"1002","severity":1,"message":"1092","line":10,"column":34,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":48},{"ruleId":"1002","severity":1,"message":"1093","line":10,"column":50,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":57},{"ruleId":"1002","severity":1,"message":"1095","line":11,"column":42,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":65},{"ruleId":"1002","severity":1,"message":"1068","line":11,"column":67,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":76},{"ruleId":"1002","severity":1,"message":"1153","line":16,"column":10,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1028","line":20,"column":8,"nodeType":"1004","messageId":"1005","endLine":20,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1089","line":23,"column":10,"nodeType":"1004","messageId":"1005","endLine":23,"endColumn":17},{"ruleId":"1002","severity":1,"message":"1035","line":25,"column":17,"nodeType":"1004","messageId":"1005","endLine":25,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1036","line":26,"column":18,"nodeType":"1004","messageId":"1005","endLine":26,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1015","line":28,"column":19,"nodeType":"1004","messageId":"1005","endLine":28,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1154","line":30,"column":11,"nodeType":"1004","messageId":"1005","endLine":30,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1155","line":31,"column":11,"nodeType":"1004","messageId":"1005","endLine":31,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1156","line":31,"column":24,"nodeType":"1004","messageId":"1005","endLine":31,"endColumn":38},{"ruleId":"1002","severity":1,"message":"1157","line":40,"column":10,"nodeType":"1004","messageId":"1005","endLine":40,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1158","line":64,"column":10,"nodeType":"1004","messageId":"1005","endLine":64,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1159","line":70,"column":10,"nodeType":"1004","messageId":"1005","endLine":70,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1160","line":71,"column":10,"nodeType":"1004","messageId":"1005","endLine":71,"endColumn":18},{"ruleId":"992","replacedBy":"1161"},{"ruleId":"994","replacedBy":"1162"},{"ruleId":"996","replacedBy":"1163"},{"ruleId":"998","replacedBy":"1164"},{"ruleId":"1000","replacedBy":"1165"},{"ruleId":"1002","severity":1,"message":"1055","line":5,"column":8,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1106","line":9,"column":10,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":21},{"ruleId":"1002","severity":1,"message":"1092","line":9,"column":34,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":48},{"ruleId":"1002","severity":1,"message":"1093","line":9,"column":50,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":57},{"ruleId":"1002","severity":1,"message":"1068","line":10,"column":24,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":33},{"ruleId":"1002","severity":1,"message":"1095","line":10,"column":53,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":76},{"ruleId":"1002","severity":1,"message":"1014","line":22,"column":21,"nodeType":"1004","messageId":"1005","endLine":22,"endColumn":32},{"ruleId":"1002","severity":1,"message":"1035","line":24,"column":17,"nodeType":"1004","messageId":"1005","endLine":24,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1036","line":25,"column":18,"nodeType":"1004","messageId":"1005","endLine":25,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1015","line":26,"column":19,"nodeType":"1004","messageId":"1005","endLine":26,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1154","line":27,"column":11,"nodeType":"1004","messageId":"1005","endLine":27,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1166","line":28,"column":18,"nodeType":"1004","messageId":"1005","endLine":28,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1083","line":83,"column":10,"nodeType":"1004","messageId":"1005","endLine":83,"endColumn":27},{"ruleId":"1002","severity":1,"message":"1167","line":87,"column":10,"nodeType":"1004","messageId":"1005","endLine":87,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1168","line":1,"column":10,"nodeType":"1004","messageId":"1005","endLine":1,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1128","line":3,"column":10,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":14},{"ruleId":"1002","severity":1,"message":"1169","line":5,"column":8,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1042","line":12,"column":10,"nodeType":"1004","messageId":"1005","endLine":12,"endColumn":19},{"ruleId":"1002","severity":1,"message":"1170","line":15,"column":7,"nodeType":"1004","messageId":"1005","endLine":15,"endColumn":13},{"ruleId":"1009","severity":1,"message":"1010","line":31,"column":17,"nodeType":"1011","messageId":"1012","endLine":31,"endColumn":36},{"ruleId":"1002","severity":1,"message":"1135","line":38,"column":18,"nodeType":"1004","messageId":"1005","endLine":38,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1171","line":22,"column":19,"nodeType":"1004","messageId":"1005","endLine":22,"endColumn":25},{"ruleId":"1002","severity":1,"message":"1172","line":22,"column":55,"nodeType":"1004","messageId":"1005","endLine":22,"endColumn":69},{"ruleId":"1002","severity":1,"message":"1173","line":22,"column":71,"nodeType":"1004","messageId":"1005","endLine":22,"endColumn":76},{"ruleId":"1002","severity":1,"message":"1174","line":26,"column":10,"nodeType":"1004","messageId":"1005","endLine":26,"endColumn":18},{"ruleId":"1016","severity":1,"message":"1175","line":41,"column":7,"nodeType":"1018","endLine":41,"endColumn":9,"suggestions":"1176"},{"ruleId":"1002","severity":1,"message":"1100","line":96,"column":26,"nodeType":"1004","messageId":"1005","endLine":96,"endColumn":31},{"ruleId":"1002","severity":1,"message":"1177","line":7,"column":8,"nodeType":"1004","messageId":"1005","endLine":7,"endColumn":12},{"ruleId":"1002","severity":1,"message":"1178","line":8,"column":8,"nodeType":"1004","messageId":"1005","endLine":8,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1179","line":4,"column":8,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1121","line":2,"column":17,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1028","line":4,"column":8,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1030","line":5,"column":15,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1117","line":5,"column":28,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":36},{"ruleId":"1002","severity":1,"message":"1031","line":5,"column":38,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":46},{"ruleId":"1002","severity":1,"message":"1050","line":9,"column":4,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1180","line":10,"column":4,"nodeType":"1004","messageId":"1005","endLine":10,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1181","line":11,"column":4,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":16},{"ruleId":"1002","severity":1,"message":"1182","line":12,"column":4,"nodeType":"1004","messageId":"1005","endLine":12,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1183","line":1,"column":10,"nodeType":"1004","messageId":"1005","endLine":1,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1028","line":4,"column":8,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1184","line":2,"column":10,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1029","line":3,"column":15,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1135","line":13,"column":21,"nodeType":"1004","messageId":"1005","endLine":13,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1062","line":27,"column":10,"nodeType":"1011","messageId":"1063","endLine":27,"endColumn":21},{"ruleId":"1002","severity":1,"message":"1079","line":2,"column":10,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":22},{"ruleId":"1002","severity":1,"message":"1185","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1116","line":5,"column":15,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1186","line":3,"column":43,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":46},{"ruleId":"1002","severity":1,"message":"1187","line":9,"column":10,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1186","line":3,"column":44,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":47},{"ruleId":"1002","severity":1,"message":"1121","line":2,"column":17,"nodeType":"1004","messageId":"1005","endLine":2,"endColumn":26},{"ruleId":"1002","severity":1,"message":"1028","line":4,"column":8,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":23},{"ruleId":"1002","severity":1,"message":"1030","line":5,"column":15,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1117","line":5,"column":28,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":36},{"ruleId":"1002","severity":1,"message":"1031","line":5,"column":38,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":46},{"ruleId":"1002","severity":1,"message":"1188","line":6,"column":52,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":67},{"ruleId":"1002","severity":1,"message":"1189","line":6,"column":69,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":90},{"ruleId":"1002","severity":1,"message":"1055","line":3,"column":8,"nodeType":"1004","messageId":"1005","endLine":3,"endColumn":20},{"ruleId":"1002","severity":1,"message":"1117","line":5,"column":16,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1031","line":5,"column":39,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":47},{"ruleId":"1002","severity":1,"message":"1190","line":14,"column":27,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":43},{"ruleId":"1002","severity":1,"message":"1191","line":20,"column":8,"nodeType":"1004","messageId":"1005","endLine":20,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1192","line":4,"column":49,"nodeType":"1004","messageId":"1005","endLine":4,"endColumn":57},{"ruleId":"1016","severity":1,"message":"1193","line":155,"column":7,"nodeType":"1018","endLine":155,"endColumn":9,"suggestions":"1194"},{"ruleId":"1002","severity":1,"message":"1185","line":6,"column":10,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1123","line":9,"column":10,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1195","line":11,"column":10,"nodeType":"1004","messageId":"1005","endLine":11,"endColumn":35},{"ruleId":"1016","severity":1,"message":"1193","line":22,"column":7,"nodeType":"1018","endLine":22,"endColumn":24,"suggestions":"1196"},{"ruleId":"1002","severity":1,"message":"1186","line":6,"column":39,"nodeType":"1004","messageId":"1005","endLine":6,"endColumn":42},{"ruleId":"1002","severity":1,"message":"1185","line":5,"column":10,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":13},{"ruleId":"1002","severity":1,"message":"1116","line":5,"column":15,"nodeType":"1004","messageId":"1005","endLine":5,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1197","line":8,"column":17,"nodeType":"1004","messageId":"1005","endLine":8,"endColumn":28},{"ruleId":"1002","severity":1,"message":"1187","line":9,"column":10,"nodeType":"1004","messageId":"1005","endLine":9,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1198","line":14,"column":10,"nodeType":"1004","messageId":"1005","endLine":14,"endColumn":15},{"ruleId":"1002","severity":1,"message":"1188","line":16,"column":10,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":25},{"ruleId":"1002","severity":1,"message":"1189","line":16,"column":27,"nodeType":"1004","messageId":"1005","endLine":16,"endColumn":48},{"ruleId":"1002","severity":1,"message":"1199","line":18,"column":8,"nodeType":"1004","messageId":"1005","endLine":18,"endColumn":33},{"ruleId":"1002","severity":1,"message":"1200","line":20,"column":8,"nodeType":"1004","messageId":"1005","endLine":20,"endColumn":18},{"ruleId":"1002","severity":1,"message":"1037","line":30,"column":17,"nodeType":"1004","messageId":"1005","endLine":30,"endColumn":24},{"ruleId":"1002","severity":1,"message":"1174","line":34,"column":10,"nodeType":"1004","messageId":"1005","endLine":34,"endColumn":18},"lines-around-directive",["1201"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'Employees' is assigned a value but never used.","'Expenses' is assigned a value but never used.","'isCashier' is assigned a value but never used.","react/destructuring-assignment","Must use destructuring props assignment","MemberExpression","useDestructAssignment","'setCustomer' is assigned a value but never used.","'setUrlState' is assigned a value but never used.","'setSearch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'props.user?.role'. Either include it or remove the dependency array.","ArrayExpression",["1202"],"React Hook useEffect has a missing dependency: 'formik'. Either include it or remove the dependency array.",["1203"],"'index' is defined but never used. Allowed unused args must match /res|next|^err/u.",["1201"],[],[],[],[],"'CreatableSelect' is defined but never used.","'get' is defined but never used.","'getV2' is defined but never used.","'useQuery' is defined but never used.","'Select' is defined but never used.","React Hook useEffect has missing dependencies: 'formik', 'state.data.amount', and 'state.data.title'. Either include them or remove the dependency array.",["1204"],"'setPage' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'setSort' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formik', 'state.data.name', and 'state.data.phone'. Either include them or remove the dependency array.",["1205"],"'res' is assigned a value but never used.","'post' is defined but never used.","'userRoles' is defined but never used.","React Hook useEffect has missing dependencies: 'alert', 'history', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1206"],"'auth' is defined but never used. Allowed unused args must match /res|next|^err/u.","'relativeTime' is defined but never used.",["1207"],"'limit' is assigned a value but never used.",["1208"],"'setTypesData' is defined but never used.","'setSu' is defined but never used.","'setSuppliersVisibilityppliersVisibility' is defined but never used.","React Hook useEffect has missing dependencies: 'formik', 'state.data.company', 'state.data.name', and 'state.data.phone'. Either include them or remove the dependency array.",["1209"],"'ModalWrapper' is defined but never used.","'useRef' is defined but never used.","'Table' is defined but never used.","'FaMinusCircle' is defined but never used.","'FaPlusCircle' is defined but never used.","'QueryString' is defined but never used.","no-console","Unexpected console statement.","unexpected","React Hook useEffect has a missing dependency: 'location.state?.purchaseId'. Either include it or remove the dependency array.",["1210"],"React Hook useEffect has a missing dependency: 'existingPurchase'. Either include it or remove the dependency array.",["1211"],"'AiFillEye' is defined but never used.","'setSalePage' is assigned a value but never used.","'setSaleLimit' is assigned a value but never used.","'setSaleSort' is assigned a value but never used.",["1212"],["1213"],"'QueryClient' is defined but never used.","React Hook useEffect has missing dependencies: 'formik', 'state.data.product', 'state.data.quantity', and 'state.data.variants'. Either include them or remove the dependency array.",["1214"],"React Hook useEffect has missing dependencies: 'formik', 'state.data.title', 'state.data.type', and 'state.data.value'. Either include them or remove the dependency array.",["1215"],"'AiFillDelete' is defined but never used.","'AiFillEdit' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'handleOnClickEdit' is assigned a value but never used.","'handleOnClickView' is assigned a value but never used.","'handleOnClickAdd' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formik' and 'state.data.title'. Either include them or remove the dependency array.",["1216"],"React Hook useEffect has missing dependencies: 'formik' and 'state.data.amount'. Either include them or remove the dependency array.",["1217"],"'history' is assigned a value but never used.","'dayjs' is defined but never used.","'isArray' is defined but never used.","'OverlayTrigger' is defined but never used.","'Popover' is defined but never used.","'ReactDatePicker' is defined but never used.","'AiOutlineQuestionCircle' is defined but never used.","'memo' is defined but never used.","'Footer' is defined but never used.","React Hook useEffect has a missing dependency: 'getUserProfile'. Either include it or remove the dependency array.",["1218"],"'state' is defined but never used. Allowed unused args must match /res|next|^err/u.","'FaSort' is defined but never used.","'FaSortDown' is defined but never used.","'FaSortUp' is defined but never used.","'ExpenseTypes' is defined but never used.","'Dropdown' is defined but never used.","'ButtonGroup' is defined but never used.","'connect' is defined but never used.","'ManagePurchase' is defined but never used.","'ManageSales' is defined but never used.","'cls' is defined but never used.","'ClearSale' is defined but never used.","Must use destructuring p assignment","'produce' is defined but never used.","'Pagination' is defined but never used.","'SpinnerOverlay' is defined but never used.","'del' is defined but never used.","'useAlert' is defined but never used.","'useMutation' is defined but never used.","'getQuantity' is defined but never used.","'_' is defined but never used.","'useEffect' is defined but never used.","'Card' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'Else' is defined but never used.","'If' is defined but never used.","'Then' is defined but never used.","'When' is defined but never used.","'useQueryClient' is defined but never used.","'swal' is defined but never used.","'getSortingIcon' is defined but never used.","'ClearPurchase' is defined but never used.","'RefundPurchase' is defined but never used.","'RefundSale' is defined but never used.","'props' is defined but never used. Allowed unused args must match /res|next|^err/u.","'getActiveElement' is defined but never used.","'Button' is defined but never used.","'AiOutlineClear' is defined but never used.","'queryClient' is assigned a value but never used.","'useFormikContext' is defined but never used.","'EllipsisPage' is assigned a value but never used.","'hasPrevPage' is defined but never used. Allowed unused args must match /res|next|^err/u.","'Form' is defined but never used.","'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'purchase'. Either include it or remove the dependency array.",["1219"],"'PageTItle' is defined but never used.","'initialValues' is assigned a value but never used.","'setIsError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'inventory'. Either include it or remove the dependency array.",["1220"],"'put' is defined but never used.","'useFormik' is defined but never used.","'showModal' is assigned a value but never used.","'selectedRow' is assigned a value but never used.","'setSelectedRow' is assigned a value but never used.","'getTypes' is assigned a value but never used.","'postTypeMutation' is assigned a value but never used.","'isAdd' is assigned a value but never used.","'mutation' is assigned a value but never used.",["1201"],[],[],[],[],"'setTitle' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'Fragment' is defined but never used.","'ChatBox' is defined but never used.","'manage' is assigned a value but never used.","'onNote' is defined but never used. Allowed unused args must match /res|next|^err/u.","'onNotification' is defined but never used. Allowed unused args must match /res|next|^err/u.","'onBox' is defined but never used. Allowed unused args must match /res|next|^err/u.","'dispatch' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'history' and 'logout'. Either include them or remove the dependency array. If 'logout' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1221"],"'logo' is defined but never used.","'logoText' is defined but never used.","'PerfectScrollbar' is defined but never used.","'setTypesVisibility' is defined but never used.","'setUnitsData' is defined but never used.","'setUnitsVisibility' is defined but never used.","'Field' is defined but never used.","'ErrorMessage' is defined but never used.","'api' is defined but never used.","'key' is defined but never used. Allowed unused args must match /res|next|^err/u.","'Badge' is defined but never used.","'setProductsData' is defined but never used.","'setProductsVisibility' is defined but never used.","'handleToastError' is defined but never used.","'Receipt' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'setFieldValue'. Either include it or remove the dependency array.",["1222"],"'createSelectProductOption' is defined but never used.",["1223"],"'useCallback' is defined but never used.","'batch' is defined but never used.","'GenericTableHeadingSorter' is defined but never used.","'EditButton' is defined but never used.","padding-line-between-statements",{"desc":"1224","fix":"1225"},{"desc":"1226","fix":"1227"},{"desc":"1228","fix":"1229"},{"desc":"1230","fix":"1231"},{"desc":"1232","fix":"1233"},{"desc":"1224","fix":"1234"},{"desc":"1226","fix":"1235"},{"desc":"1236","fix":"1237"},{"desc":"1238","fix":"1239"},{"desc":"1240","fix":"1241"},{"desc":"1224","fix":"1242"},{"desc":"1243","fix":"1244"},{"desc":"1245","fix":"1246"},{"desc":"1247","fix":"1248"},{"desc":"1249","fix":"1250"},{"desc":"1251","fix":"1252"},{"desc":"1253","fix":"1254"},{"desc":"1255","fix":"1256"},{"desc":"1257","fix":"1258"},{"desc":"1259","fix":"1260"},{"desc":"1261","fix":"1262"},{"desc":"1263","fix":"1264"},"Update the dependencies array to be: [props.user?.role, urlState?.type]",{"range":"1265","text":"1266"},"Update the dependencies array to be: [formik, isEditing, query.data]",{"range":"1267","text":"1268"},"Update the dependencies array to be: [formik, state.data.amount, state.data.title, state.visible]",{"range":"1269","text":"1270"},"Update the dependencies array to be: [formik, state.data.name, state.data.phone, state.visible]",{"range":"1271","text":"1272"},"Update the dependencies array to be: [alert, history, props]",{"range":"1273","text":"1274"},{"range":"1275","text":"1266"},{"range":"1276","text":"1268"},"Update the dependencies array to be: [formik, state.data.company, state.data.name, state.data.phone, state.visible]",{"range":"1277","text":"1278"},"Update the dependencies array to be: [location.state?.purchaseId]",{"range":"1279","text":"1280"},"Update the dependencies array to be: [existingPurchase, purchaseId]",{"range":"1281","text":"1282"},{"range":"1283","text":"1266"},"Update the dependencies array to be: [formik, isEditing, query.data?.product]",{"range":"1284","text":"1285"},"Update the dependencies array to be: [formik, state.data.product, state.data.quantity, state.data.variants, state.visible]",{"range":"1286","text":"1287"},"Update the dependencies array to be: [formik, state.data.title, state.data.type, state.data.value, state.visible]",{"range":"1288","text":"1289"},"Update the dependencies array to be: [formik, state.data.title, state.visible]",{"range":"1290","text":"1291"},"Update the dependencies array to be: [formik, state.data.amount, state.visible]",{"range":"1292","text":"1293"},"Update the dependencies array to be: [getUserProfile, token]",{"range":"1294","text":"1295"},"Update the dependencies array to be: [purchase, refundPurchase]",{"range":"1296","text":"1297"},"Update the dependencies array to be: [inventory, refundSale]",{"range":"1298","text":"1299"},"Update the dependencies array to be: [history, logout]",{"range":"1300","text":"1301"},"Update the dependencies array to be: [setFieldValue]",{"range":"1302","text":"1303"},"Update the dependencies array to be: [setFieldValue, values.discount]",{"range":"1304","text":"1305"},[1735,1750],"[props.user?.role, urlState?.type]",[4005,4028],"[formik, isEditing, query.data]",[1728,1743],"[formik, state.data.amount, state.data.title, state.visible]",[2281,2296],"[formik, state.data.name, state.data.phone, state.visible]",[1969,1971],"[alert, history, props]",[1320,1335],[3486,3509],[2494,2509],"[formik, state.data.company, state.data.name, state.data.phone, state.visible]",[3411,3413],"[location.state?.purchaseId]",[3547,3559],"[existingPurchase, purchaseId]",[2060,2075],[5502,5534],"[formik, isEditing, query.data?.product]",[3312,3327],"[formik, state.data.product, state.data.quantity, state.data.variants, state.visible]",[1866,1881],"[formik, state.data.title, state.data.type, state.data.value, state.visible]",[1577,1592],"[formik, state.data.title, state.visible]",[1855,1870],"[formik, state.data.amount, state.visible]",[949,956],"[getUserProfile, token]",[3065,3081],"[purchase, refundPurchase]",[1890,1902],"[inventory, refundSale]",[1323,1325],"[history, logout]",[5465,5467],"[setFieldValue]",[884,901],"[setFieldValue, values.discount]"]